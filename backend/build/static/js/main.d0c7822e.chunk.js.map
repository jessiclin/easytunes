{"version":3,"sources":["components/login_screen/SignIn.js","components/login_screen/SignUp.js","components/Navbar/Navbar.js","components/login_screen/LoginScreen.js","components/reset_password_screen/ResetPasswordScreen.js","components/Profile/Playlists/PlaylistButton.js","components/Profile/Playlists/NewPlaylistButton.js","components/Profile/Playlists/Playlists.js","components/Profile/Playlists/SavedPlaylistButton.js","components/Profile/Playlists/SavedPlaylists.js","components/Profile/Profile.js","components/Playlist/Songlist/Song.js","components/Playlist/Songlist/Songlist.js","components/Playlist/Comments/Comment.js","components/Playlist/Comments/Reply.js","components/Playlist/Comments/ShowReplyCard.js","components/Playlist/Comments/ShowReplies.js","components/Playlist/Comments/UserComment.js","components/Playlist/Comments/Comments.js","components/Playlist/PlaylistSetting/PlaylistSetting.js","components/Playlist/Playlist.js","components/HomePage/Home.js","components/home_screen/Home_Playlist_Button.js","components/home_screen/Home_Playlists.js","components/home_screen/HomeScreen.js","components/search_screen/AddSongs.js","components/search_screen/UserCard.js","components/search_screen/PlaylistCard.js","components/search_screen/ArtistCard.js","components/search_screen/SearchListCard.js","components/search_screen/SearchList.js","components/search_screen/SearchScreen.js","components/Following/Follower.js","components/Following/Followers.js","components/Following/FollowingUser.js","components/Following/Following.js","components/Following/Request.js","components/Following/Requests.js","components/Following/FollowingPage.js","components/Setting/AccountSetting/Update.js","components/Setting/AccountSetting/UpdatePassword.js","components/Setting/AccountSetting/AccountSetting.js","components/Setting/AdvancedSetting/AdvancedSetting.js","components/Setting/PrivacySetting/PrivacyToggles.js","components/Setting/PrivacySetting/PrivacySetting.js","components/Setting/Setting.js","components/HeaderNavbar/HeaderNavbar.js","components/PlaylistNavbar/PlaylistNavbar.js","components/Menu/Menu.js","App.js","serviceWorker.js","index.js"],"names":["SignIn","props","state","error","setErrmess","err","setState","errorMess","componentDidMount","console","log","username","toHome","handleSignIn","event","a","preventDefault","email","emailEl","current","children","value","toLowerCase","password","passwordEl","trim","length","requestBody","query","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","result","data","login","onUsernameChange","localStorage","setItem","window","location","replace","catch","message","React","createRef","classes","this","Container","component","maxWidth","CssBaseline","className","paper","Avatar","avatar","Typography","variant","form","noValidate","TextField","InputProps","input","margin","required","fullWidth","id","label","name","autoComplete","autoFocus","ref","type","Button","color","submit","onClick","Grid","container","item","xs","Link","href","Component","withStyles","theme","marginTop","spacing","display","flexDirection","alignItems","backgroundColor","width","paddingLeft","paddingRight","SignUp","handleSignUp","usernameEl","confirm","confirmEl","userUrl","pattern","test","errors","createUser","palette","secondary","main","useStyles","makeStyles","root","flexGrow","appbar","background","icon","fontSize","appbarWrapper","title","Navbar","AppBar","elevation","Toolbar","IconButton","edge","menuButton","aria-label","to","Login","loginVisible","signUpVisible","history","push","document","getElementsByClassName","style","borderBottom","borderRight","changeView","invisible","visible","target","element","getElementById","Reset","sent","handleReset","emailR","Math","floor","random","PlaylistButton","playlist","deleteConfirmVisible","setVisible","setInvisible","toPlaylist","encodeURIComponent","_id","deletePlaylist","setPlaylists","getUserPlaylists","handlePlay","current_playlist","onPlayChange","play","onPlaylistChange","songs","alt","src","playlist_img","class","public","total_duration","size","likes","playlist_id","disabled","sessionUser","deleteBtn","Dialog","open","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogActions","outline","NewPlaylistButton","popupVisible","user_id","createNewPlaylist","nameEl","addButton","dialog","DialogContent","DialogContentText","minWidth","float","Playlists","playlists","user","map","key","editing","text","SavedPlaylistButton","loading","getPlaylistByID","getUserByUsername","saved_playlists","SavedPlaylists","Profile","showSavedPlaylists","showMyPlaylists","showUploadedSongs","profileUsername","match","params","profileUserInfo","profileAccountCreationDate","profileFollowers","profilePlaylists","profileSavedPlaylists","date","Date","parseInt","joined","pathname","split","followers","getMonth","getDate","getFullYear","isFollowing","following","forEach","follower","currentTarget","profile_img","align","buttonFocus","buttonNotFocus","borderRadius","strokeLinecap","border","fontWeight","padding","Song","song","playlistId","handleDelete","removeSong","index","moveUp","handleMoveUp","moveDown","handleMoveDown","current_song","song_id","onSongChange","handlePlayClick","song_img","artists","duration","playlist_length","Songlist","splice","temp","i","Comment","buttonsVisible","handleBlur","handleCancel","handleSubmit","commentEl","stateChange","addComment","comments","placeholder","onFocus","onBlur","Reply","visibility","onChange","commentIndex","addReply","ShowReplyCard","getUserById","ShowReplies","repliesVisible","toggleVisibility","replies","reply","j","UserComment","editVisible","handleUpdate","handleEditVisibility","updateComments","deleteComment","handleEditSubmit","editComment","Comments","editCommentVisible","comment","elem","toString","PlaylistSetting","save","edit","handleEditClick","handleSave","changePrivacy","changeName","confirmDelete","deleteConfirmVisibleClose","Post","e","file","files","formData","FormData","append","r","privacyButton","defaultValue","accept","height","editSaveButton","Playlist","songsVisible","commentsVisible","settingsVisible","playlistInfo","playlistid","forkPopupVisible","liked","getPlaylist","liked_playlists","forkPlaylist","uploaded","setForkInvisible","setForkVisible","handleLike","obj","updatePrivacy","updateName","updateImg","removeSongs","addSong","Promise","resolve","reject","artist","song_uri","User","navigator","clipboard","writeText","Home","Box","hero","textAlign","gutterBottom","minHeight","backgroundImage","backgroundRepeat","backgroundSize","justifyContent","position","Home_Playlist_Button","Home_Playlists","HomeScreen","top_five","current_playlist_id","current_song_id","loadTopFive","topFivePlaylists","handleHome","getArtists","access_token","AddSong","createNew","changeVisible","handleAdd","songlength","millisToSeconds","duration_ms","album","images","url","uri","handleClose","createAndAdd","createPlaylist","handleClickOpen","openNew","closeNew","anchorEl","millis","iconButton","button","dialogButton","UserCard","sessionUserRequests","sessionUserFollowers","follow_requests","userRequestedFollow","requests","requested","request","searchedRequestedFollow","searchedFollowing","userFollowing","sendRequest","addRequest","toUser","PlaylistCard","favorited","saved","favorite","handleFavorite","ArtistCard","showSongs","tracks","handleClick","marginLeft","items","SearchListCard","renderSong","renderArtist","artistNames","songLength","SearchList","searchList","users","SearchScreen","searchQuery","searchResults","searchType","fetchData","last","searchRes","searchUsers","searchPlaylists","fetchPlaylists","fetchUsers","fetchSpotify","track","componentDidUpdate","paddingBotton","Follower","removeFollower","updateFollowers","Followers","getFollowers","FollowingUser","unFollow","updateFollowing","Following","getFollowing","followings","Request","acceptRequest","updateRequests","addFollower","Requests","getRequests","FollowingPage","showFollowers","showFollowing","showRequests","getAccountCreationDate","Update","original","new","handleChange","UpdatePassword","handlePassChange","handleConfChange","AccountSetting","getAll","updateProfileImg","AdvancedSetting","PrivacyToggles","playlist_privacy","default_public_playlist","verify_request","verify_requests","updatePlaylist","onPrivacyChange","updateVerify","PrivacySetting","Setting","showAccount","showPrivacy","showAdvanced","content","toolbar","classname","wrapper","col","settingsOptionsButton","settingsContent","mixins","paddingTop","sidebarHeader","marginBottom","settingsConent","HeaderNavbar","mobileMoreAnchorEl","handleProfileMenuOpen","handleMobileMenuClose","handleMenuClose","handleMobileMenuOpen","toPlaylists","toFollowers","toSettings","toLogOut","removeItem","renderMenu","anchorOrigin","vertical","horizontal","menuId","transformOrigin","Boolean","MenuItem","renderMobileMenu","mobileMenuId","aria-controls","aria-haspopup","handleKeyPress","searchEl","grow","handleDrawerOpen","clsx","hide","noWrap","search","searchIcon","InputBase","inputRoot","inputInput","inputProps","onKeyPress","FormControl","div","selectMenu","Select","sectionDesktop","sectionMobile","marginRight","breakpoints","up","shape","fade","common","white","pointerEvents","transition","transitions","create","appBar","zIndex","drawer","easing","sharp","leavingScreen","appBarShift","enteringScreen","PlaylistNavbar","handleCallback","isPlaying","shuffle","onShuffleChange","token","callback","uris","magnifySliderOnHover","showSaveIcon","offset","styles","activeColor","bgColor","errorColor","loaderColor","sliderColor","trackArtistColor","trackNameColor","Menu","toMyPlaylists","toSavedPlaylists","toFollowing","toRequests","toSetting","handleDrawerClose","Drawer","drawerOpen","drawerClose","Divider","List","ListItem","ListItemIcon","ListItemText","primary","bottomAppBar","shufflePlaylist","needsUpdate","updated","flexShrink","whiteSpace","overflowX","top","bottom","App","getAccesstoken","s","temporaryValue","randomIndex","currentIndex","onSearchResults","results","atHome","notAtHome","getItem","render","pdated","exact","path","ResetPasswordScreen","hostname","ReactDOM","StrictMode","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0c7822e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n//import {Link} from 'react-router-dom';\r\n\r\n\r\nconst useStyles = theme => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: 'blue',\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n      \"&:hover\": {\r\n        backgroundColor: \"#004CB2\"\r\n      },\r\n      \"&:focus\" :{\r\n        backgroundColor: \"#004CB2\"\r\n      }\r\n    },\r\n    input: {\r\n      paddingLeft: \"10px\",\r\n      paddingRight: \"10px\"\r\n    }\r\n\r\n  });\r\n  \r\n\r\nclass SignIn extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.emailEl = React.createRef();\r\n        this.passwordEl = React.createRef();\r\n        \r\n        this.username = ''\r\n        this.onUsernameChange = this.props.onUsernameChange\r\n        this.toHome = this.props.toHome\r\n    }\r\n\r\n    state = {\r\n        error : null\r\n    }\r\n    \r\n    setErrmess = (err) => {\r\n        this.setState({errorMess : err})\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        console.log(this.props)\r\n        if (this.props.username)\r\n            this.props.toHome()\r\n    }\r\n\r\n    handleSignIn = async (event) => {\r\n        event.preventDefault();\r\n        const email = this.emailEl.current.children[1].children[0].value.toLowerCase();\r\n        const password = this.passwordEl.current.children[1].children[0].value;\r\n\r\n        if (email.trim().length === 0 || password.trim().length === 0)\r\n            return;\r\n\r\n        // Request backened \r\n        let requestBody = {\r\n            query: `\r\n              query {\r\n                login(email: \"${email}\", password: \"${password}\") {\r\n                  _id\r\n                  username\r\n                  token\r\n                  token_expiration\r\n                }\r\n              }\r\n            `\r\n          };\r\n\r\n        fetch('https://easytunes.herokuapp.com/graphql', {\r\n                                    method: 'POST',\r\n                                    body: JSON.stringify(requestBody),\r\n                                    headers: {\r\n                                    'content-type': 'application/json'\r\n                                    }\r\n                                })\r\n                                .then(res => {\r\n                                    if (res.status !== 200 && res.status !== 201) \r\n                                        throw new Error('Email and password do not match');\r\n                                    return res.json()\r\n                                })\r\n                                .then(result => {\r\n                                    console.log(result.data.login.username)\r\n                                    // Load the data in \r\n                                    this.username = result.data.login.username\r\n\r\n                                    this.onUsernameChange(this.username)\r\n                                    localStorage.setItem(\"username\", this.username);\r\n                                   // console.log(localStorage.getItem(\"username\"))\r\n                                    fetch('https://easytunes.herokuapp.com/authorization', {\r\n                                        method: 'POST',\r\n                        \r\n                                        headers: {\r\n                                            'content-type': 'application/json'\r\n                                        }\r\n                                        })\r\n                                        .then(res => {\r\n                                            if (res.status !== 200 && res.status !== 201) \r\n                                                throw new Error('Authorization Failed');\r\n                                            return res.json()\r\n                                        })\r\n                                        .then(data => {\r\n                                            console.log(data)\r\n                                            window.location.replace(data)\r\n                                        })\r\n                                        .catch(err => {\r\n                                            console.log(err);\r\n                                        });\r\n                                  //  this.toHome()\r\n                                })\r\n                                .catch(err => {\r\n                                    this.setState({error: err.message})\r\n                                    console.log(err.message);\r\n                                });\r\n    }\r\n\r\n    render() { \r\n        const {classes}  = this.props; \r\n\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n              <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n              </Avatar>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Sign in\r\n              </Typography>\r\n              {this.state.error !== null ? \r\n              <Typography>\r\n              {this.state.error}\r\n            </Typography> : null\r\n              }\r\n              <form className={classes.form} noValidate>\r\n                <TextField\r\n                  InputProps={{\r\n                    className: classes.input,\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  autoFocus\r\n                  ref = {this.emailEl}\r\n                />\r\n                <TextField\r\n                  InputProps={{\r\n                    className: classes.input,\r\n                  }}  \r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  ref = {this.passwordEl}\r\n                />\r\n                <Button\r\n                type = 'submit'\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  onClick = {this.handleSignIn}\r\n                >\r\n                  Sign In\r\n                </Button>\r\n                \r\n                <Grid container>\r\n                  <Grid item xs>\r\n                    <Link href=\"/forgotpassword\" variant=\"body2\">\r\n                      Forgot password?\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n            </div>\r\n          </Container>\r\n        );\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyles)(SignIn);","import React, { Component } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {MuiThemeProvider} from \"@material-ui/core/styles\";\r\n//import theme from '../../Theme.js';\r\n\r\n\r\nconst useStyles= theme => ({\r\n  \r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n    \"&:hover\": {\r\n      backgroundColor: \"#004CB2\"\r\n    },\r\n    \"&:focus\" :{\r\n      backgroundColor: \"#004CB2\"\r\n    }\r\n  },\r\n  input: {\r\n    paddingLeft: \"10px\",\r\n    paddingRight: \"10px\"\r\n  }\r\n});\r\n\r\n\r\nclass SignUp extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.emailEl = React.createRef();\r\n        this.passwordEl = React.createRef();\r\n        this.usernameEl = React.createRef();\r\n        this.confirmEl = React.createRef()\r\n        this.username = ''\r\n        this.onUsernameChange = this.props.onUsernameChange\r\n        this.toHome = this.props.toHome\r\n    }\r\n\r\n    state = {\r\n        errorMess : null\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if (this.props.username)\r\n            this.props.toHome()\r\n    }\r\n    setErrmess = (err) => {\r\n        this.setState({errorMess : err})\r\n    }\r\n        handleSignUp = async (event) =>{\r\n            event.preventDefault();\r\n            const email = this.emailEl.current.children[1].children[0].value.toLowerCase();\r\n            const password = this.passwordEl.current.children[1].children[0].value;\r\n            const username = this.usernameEl.current.children[1].children[0].value;\r\n            const confirm = this.confirmEl.current.children[1].children[0].value;\r\n            const userUrl = \"easytunes.herokuapp.com\" + username;\r\n            console.log(email, password, username, confirm, userUrl)\r\n            if (email.trim().length === 0 || password.trim().length === 0 || username.trim().length === 0 || confirm.trim().length === 0){\r\n                console.log(\"Fill out all inputs\")\r\n                this.setErrmess(\"Fill out all inputs\")\r\n                return;\r\n            }\r\n                \r\n    \r\n            \r\n            if (password !== confirm){\r\n                this.setErrmess(\"Passwords do not match\")\r\n                return;\r\n            }\r\n            \r\n            const pattern = /.*@.*\\.com/i\r\n            console.log(pattern.test(email))\r\n            if (!pattern.test(email)){\r\n                this.setErrmess(\"Input a valid email\")\r\n                return \r\n            }\r\n                \r\n            // Request backened \r\n            let requestBody = {\r\n                query: `\r\n                mutation{\r\n                    createUser(userInput: {email: \"${email}\", password:\"${password}\", username:\"${username}\", url:\"${userUrl}\" })  {\r\n                                      email\r\n                                      password\r\n                                      username\r\n                                      url\r\n                    }\r\n                  }\r\n                `\r\n              };\r\n    \r\n            await  fetch('https://easytunes.herokuapp.com/graphql', {\r\n                                        method: 'POST',\r\n                                        body: JSON.stringify(requestBody),\r\n                                        headers: {\r\n                                        'content-type': 'application/json'\r\n                                        }\r\n                                    })\r\n                                    .then(res => {\r\n                                  \r\n                                        // if (res.status !== 200 && res.status !== 201) \r\n                                        //     throw new Error('Failed!');\r\n                                        \r\n                                        return res.json();\r\n                                    })\r\n                                    .then(result => {\r\n                                      console.log(result)\r\n                                        if (result.errors) {\r\n                                            if (/.*email.*/.test(result.errors[0].message))\r\n                                                throw new Error('Email already in use')\r\n                                            if (/.*username.*/.test(result.errors[0].message))\r\n                                                throw new Error('Username already in use')\r\n                                        }\r\n                                        else {\r\n                                          // Load the data in \r\n                                         this.state.username = result.data.createUser.username\r\n                                          console.log(result)\r\n                                          this.onUsernameChange(this.state.username)\r\n                                          localStorage.setItem(\"username\", this.state.username);\r\n                                          fetch('https://easytunes.herokuapp.com/authorization', {\r\n                                              method: 'POST',\r\n                              \r\n                                              headers: {\r\n                                                  'content-type': 'application/json'\r\n                                              }\r\n                                              })\r\n                                              .then(res => {\r\n                                                  if (res.status !== 200 && res.status !== 201) \r\n                                                      throw new Error('Playlist not found');\r\n                                                  return res.json()\r\n                                              })\r\n                                              .then(data => {\r\n                                                  console.log(data)\r\n                                                  window.location.replace(data)\r\n                                              })\r\n                                              .catch(err => {\r\n                                                  console.log(err);\r\n                                              });\r\n                                          } \r\n                                        \r\n                                   \r\n                                    })\r\n                                    .catch(err => {\r\n                                        console.log(err);\r\n                                        this.setErrmess(err.message)\r\n                                    });\r\n            \r\n        }\r\n\r\n    render() { \r\n      \r\n        const {classes}  = this.props; \r\n        console.log(this.state.errorMess)\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon/>\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\" >\r\n          Sign up\r\n        </Typography>\r\n        {this.state.errorMess !== null ? \r\n        <Typography> {this.state.errorMess}</Typography> : null\r\n        }\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                InputProps={{\r\n                    className: classes.input,\r\n                  }}\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                ref = {this.emailEl}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                InputProps={{\r\n                    className: classes.input,\r\n                  }}\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"userName\"\r\n                label=\"Username\"\r\n                name=\"userName\"\r\n                ref = {this.usernameEl}\r\n                autoFocus\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                InputProps={{\r\n                    className: classes.input,\r\n                  }}\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                ref = {this.passwordEl}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n            <TextField\r\n                InputProps={{\r\n                    className: classes.input,\r\n                  }}\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                id=\"confirm-password\"\r\n                ref = {this.confirmEl}\r\n              />\r\n              \r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n          type = 'submit'\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick = {this.handleSignUp}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyles)(SignUp);","import React from \"react\";\r\nimport {makeStyles } from '@material-ui/styles';\r\nimport { AppBar, Icon, Toolbar } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  appbar: {\r\n    background: \"black\",\r\n  },\r\n  icon: {\r\n    fontSize: \"large\", \r\n  },\r\n  appbarWrapper: {\r\n    width: '80%',\r\n    margin: '0 auto'\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n\r\n}));\r\n\r\nfunction Navbar() {\r\n  const classes = useStyles();\r\n\r\n\r\n    \r\n  return (\r\n\r\n  <div className={classes.root}>\r\n    <AppBar className={classes.appbar} elevation={0}>\r\n      <Toolbar className={classes.appbarWrapper}>\r\n      <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            < MusicNoteIcon/>\r\n          </IconButton>\r\n      <Typography variant=\"h6\" className={classes.title}>\r\n            EasyTunes\r\n      </Typography>\r\n      <Link to=\"/register\">\r\n      <Button color=\"inherit\" onClick={() => { console.log('onClick'); }}>\r\n      Sign Up\r\n      </Button>\r\n      </Link>\r\n      <Link to=\"/login\">\r\n      <Button color=\"inherit\">Login</Button>\r\n      </Link>\r\n      </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","/** LOGIN SCREEN\r\n * Handles signing in and signing up \r\n */\r\n\r\nimport React, { Component } from 'react';\r\n\r\n// Import css \r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport \"./LoginScreen.css\";\r\nimport SignIn from './SignIn'\r\nimport SignUp from './SignUp'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        loginVisible: this.props.login,\r\n        signUpVisible: !this.props.login,\r\n   }\r\n\r\n    componentDidMount = () => {\r\n        if (this.props.username)\r\n            this.props.history.push('/home')\r\n        if (this.props.login){\r\n            document.getElementsByClassName(\"to-signin-btn\")[0].style.borderBottom = \"none\"\r\n            document.getElementsByClassName(\"to-signup-btn\")[0].style.borderBottom = \"1px solid lightgray\";\r\n            document.getElementsByClassName(\"to-signin-btn\")[0].style.borderRight = \"1px solid lightgray\"\r\n        }\r\n        else {\r\n            document.getElementsByClassName(\"to-signup-btn\")[0].style.borderBottom = \"none\"\r\n            document.getElementsByClassName(\"to-signin-btn\")[0].style.borderBottom = \"1px solid lightgray\";\r\n            document.getElementsByClassName(\"to-signin-btn\")[0].style.borderRight = \"1px solid lightgray\"\r\n        }\r\n\r\n   }\r\n   // Handle rendering sign in or sign up \r\n    changeView = (event) => {\r\n        const visible = event.target.className\r\n        \r\n        let invisible;\r\n        if (visible === \"to-signin-btn\"){\r\n            this.setState({\r\n                loginVisible : true,\r\n                signUpVisible : false\r\n            })\r\n            invisible = \"to-signup-btn\"\r\n            this.props.history.push('/login')\r\n        }\r\n        else {\r\n            this.setState({\r\n                loginVisible : false,\r\n                signUpVisible : true\r\n            })\r\n            invisible = \"to-signin-btn\"\r\n            this.props.history.push('/register')\r\n        }\r\n\r\n        document.getElementsByClassName(visible)[0].style.borderBottom = \"none\"\r\n        document.getElementsByClassName(invisible)[0].style.borderBottom = \"1px solid lightgray\";\r\n    }\r\n\r\n    element = (id) => {\r\n        return document.getElementById(id)\r\n    }\r\n\r\n    // Go to home page after logging in \r\n    toHome = () => {\r\n        const url = '/home'\r\n        const {history} = this.props;\r\n        history.push(url)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <h1>EasyTunes</h1>\r\n                </div>\r\n\r\n                <div className=\"container login-container\">\r\n                    <div className=\"row justify-content-center login-btns\">  \r\n                            <button className=\"to-signin-btn\" onClick = {this.changeView} >Sign In</button>\r\n                            <button className=\"to-signup-btn\" onClick = {this.changeView}> Sign Up</button>\r\n                    </div>\r\n\r\n                    {this.state.loginVisible ? <SignIn onUsernameChange = {this.props.onUsernameChange} toHome = {this.toHome} username = {this.props.username}/> : null}\r\n                    {this.state.signUpVisible ? <SignUp onUsernameChange = {this.props.onUsernameChange} toHome = {this.toHome} username = {this.props.username}/> : null}\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Login;\r\n\r\n","import React, { Component } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n  \r\n// Import css \r\nimport \"./ResetPasswordScreen.css\";\r\n//import {Link} from 'react-router-dom';\r\n\r\n\r\nconst useStyle = theme => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: 'blue',\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n      \"&:hover\": {\r\n        backgroundColor: \"#004CB2\"\r\n      },\r\n      \"&:focus\" :{\r\n        backgroundColor: \"#004CB2\"\r\n      }\r\n    },\r\n    input: {\r\n      paddingLeft: \"10px\",\r\n      paddingRight: \"10px\"\r\n    }\r\n\r\n  });\r\n\r\n\r\n\r\n\r\nclass Reset extends Component {\r\n    constructor() {\r\n        super()\r\n        this.emailR = React.createRef();\r\n    } \r\n    state = { \r\n        sent : false,\r\n        errorMess : null\r\n    }\r\n    \r\n    element = (id) => {\r\n        return document.getElementById(id)\r\n    }\r\n\r\n    handleReset = () => {\r\n        const email = this.emailR.current.children[1].children[0].value.toLowerCase()\r\n        console.log(this.emailR.current.children[1].children[0].value.toLowerCase())\r\n        const password = Math.floor(Math.random() * (99999999 - 10000000) + 10000000)\r\n        console.log(password)\r\n\r\n        if (email.trim().length === 0)\r\n            return;\r\n\r\n        let requestBody = {\r\n            query: `\r\n              mutation {\r\n                resetPassword(email: \"${email}\", new_password: \"${password}\") {\r\n                  _id\r\n                }\r\n              }\r\n            `\r\n          };\r\n\r\n        fetch('https://easytunes.herokuapp.com/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) {\r\n                    throw new Error('post error')\r\n                }\r\n                if (res.err) {\r\n                    \r\n                }\r\n                this.setState({errorMess : \"Email has been sent\"})\r\n                this.setState({sent : true})\r\n                return res.json()\r\n            })\r\n            .catch(err => {\r\n                this.setState({errorMess : err.message})\r\n                console.log(err);\r\n            });\r\n    }\r\n    render() { \r\n        const {classes}  = this.props; \r\n\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <h1>EasyTunes</h1>\r\n                </div>\r\n                <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n \r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Reset Your Password\r\n                    </Typography>\r\n\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Please enter your email\r\n                    </Typography>\r\n                    {this.state.errorMess !== null ? <div> {this.state.errorMess}</div> : null}\r\n                    <form className={classes.form} noValidate>\r\n                        <TextField\r\n                        InputProps={{\r\n                            className: classes.input,\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                        ref = {this.emailR}\r\n                        />\r\n                \r\n                        <Button\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick = {this.handleReset}\r\n                        >\r\n                        Reset Password\r\n                        </Button>\r\n                \r\n                <Grid container>\r\n                  <Grid item xs>\r\n                   \r\n                    <Link href=\"/login\" variant=\"body2\">\r\n                      Back\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n            </div>\r\n          </Container>\r\n          </div>\r\n        );\r\n    }\r\n    // render() { \r\n    //     return ( \r\n    //         <div>\r\n\r\n    //             <div className=\"container login-container\">\r\n\r\n    //                 <div className=\"row justify-content-center forgot-banner-row\">\r\n    //                     <div className=\"col-sm-12 text-center align-self-center forgot-banner\"> Reset Your Password</div>\r\n    //                 </div>\r\n\r\n    //                 <div className=\"row justify-content-center\">\r\n    //                     <div className=\"col-sm-12 cred\">        \r\n    //                         Please enter your email address.\r\n    //                         <div className=\"error-message-reset\">\r\n    //                             {this.state.errorMess}\r\n    //                         </div>\r\n    //                         <div className=\"input-group\">\r\n    //                             <input className=\"input\" id=\"email\" type=\"text\" ref={this.emailR} required/>\r\n    //                             <label className=\"label\">Email</label>\r\n    //                         </div>    \r\n    //                     </div>\r\n    //                 </div>\r\n\r\n    //                 <div className=\"row justify-content-center next\">\r\n    //                     <div className=\"col-sm-12 text-center align-self-center login-col\">\r\n    //                         <button onClick = {this.handleReset}> Reset Password</button>\r\n    //                     </div>\r\n    //                     <Link to=\"/login\" className=\"login\">\r\n    //                             Cancel\r\n    //                     </Link>\r\n    //                 </div>\r\n    //             </div>\r\n    //         </div>\r\n    //     );\r\n    // }\r\n}\r\n \r\n\r\nexport default withStyles(useStyle)(Reset);","/** PLAYLIST BUTTON\r\n * Component used within playlist and saved playlists\r\n * Handles one playlist in the playlists page \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport {AiFillHeart, AiFillEyeInvisible, AiFillEye} from 'react-icons/ai'\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport {RiPlayListLine} from 'react-icons/ri'\r\nimport {AiOutlineDelete, AiOutlineCheckCircle, AiOutlineCloseCircle} from 'react-icons/ai'\r\n// FaRegPauseCircle\r\nimport {FaRegPlayCircle, FaRegPauseCircle} from 'react-icons/fa'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport Button from '@material-ui/core/Button'\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt'\r\nconst useStyle = theme => ({\r\n    deleteBtn :{\r\n        '&:focus':{\r\n            outline:\"none\"\r\n        }\r\n    }\r\n})\r\nclass PlaylistButton extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.setPlaylists = this.props.setPlaylists;\r\n    }\r\n    \r\n    state = { \r\n        playlist: this.props.playlist,\r\n        username: this.props.username,\r\n        deleteConfirmVisible: false,\r\n        history: this.props.history\r\n    }\r\n\r\n    // Set delete confirmation box to visible\r\n    setVisible = () => {\r\n        this.setState({deleteConfirmVisible : true})\r\n    }\r\n\r\n    // Set delete confirmation box to invisible \r\n    setInvisible = () => {\r\n        this.setState({deleteConfirmVisible: false})\r\n    }\r\n\r\n    // Go to the playlist page \r\n    toPlaylist = () => {\r\n        this.state.history.push('/' + encodeURIComponent(this.state.playlist.username) + '/mixtape='+ this.state.playlist._id)\r\n    }\r\n\r\n    // Delete the playlist \r\n    deletePlaylist = () => {\r\n        this.setInvisible()\r\n        // Delete the playlist \r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    deletePlaylist (id : \"${this.state.playlist._id}\") {\r\n                        _id \r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        // Delete the playlist \r\n        fetch('https://easytunes.herokuapp.com/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('Failed');\r\n                return res.json()\r\n            })\r\n            .then(result => {\r\n                 // Update the playlists on the UI \r\n                requestBody = {\r\n                    query: `\r\n                        query {\r\n                            getUserPlaylists(username: \"${this.state.username}\"){\r\n                                _id\r\n                                name\r\n                                username\r\n                                likes \r\n                                public\r\n                                total_duration\r\n                                playlist_img\r\n                                songs {\r\n                                    song_id\r\n                                    song_uri\r\n                                    name\r\n                                    artists\r\n                                    song_img\r\n                                }\r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n\r\n                fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(requestBody),\r\n                    headers: {\r\n                    'content-type': 'application/json'\r\n                    }})\r\n                .then(res => {\r\n                    if (res.status !== 200 && res.status !== 201) \r\n                        throw new Error('Failed');\r\n                    return res.json()\r\n                })\r\n                .then(result => {\r\n                    this.setPlaylists(result.data.getUserPlaylists)\r\n                    //error here\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    \r\n    render() { \r\n        const playlist = this.state.playlist \r\n        const {classes} = this.props\r\n        return (\r\n            <div className=\"playlist-row\">\r\n                <div className=\"col\">\r\n                    <img alt = \"playlist_img\" src={playlist.playlist_img} class=\"song_picture\"></img>\r\n                </div>\r\n\r\n                <div className=\"col text-left\">\r\n                    {playlist.name}\r\n                    {this.state.username === playlist.username ? <span>  {playlist.public ? <AiFillEye/> : < AiFillEyeInvisible/>} </span> : null}\r\n                </div>\r\n\r\n                <div className=\"col text-left\">\r\n                    {playlist.songs.length} {playlist.songs.length === 1 ? \"Song\" : \"Songs\"} - {playlist.total_duration < 3600 ? \"0 hr \" + (playlist.total_duration < 600 ? \"0\" + Math.floor(playlist.total_duration/60) + \" min\": Math.floor(playlist.total_duration/60) + \" min\") :\r\n                (Math.floor(playlist.total_duration/3600) + \" hr \" + (playlist.total_duration%3600 < 600 ? \"0\" + Math.floor(playlist.total_duration/60) + \" min\": Math.floor(playlist.total_duration/60) + \" min\"))}\r\n                </div>\r\n\r\n                <div className=\"col text-left\">\r\n                    {this.state.username === playlist.username ? <><ThumbUpAltIcon id={playlist._id} size = {24}/> {playlist.likes} </>:\r\n                    <>{playlist.username}</>}\r\n                </div>\r\n\r\n                <button className=\"playlist-btn\" id={playlist.playlist_id} onClick = {this.toPlaylist}/>\r\n                \r\n                <button className=\"play-btn\">\r\n                    { this.props.playlist.songs.length > 0 ?\r\n                    <>\r\n                        { this.props.play && this.props.current_playlist.name === this.state.playlist.name? \r\n                            <FaRegPauseCircle onClick = {this.handlePlay} size = {30}/>\r\n                            : <FaRegPlayCircle onClick = {this.handlePlay} size = {30}/>\r\n                        }\r\n                    </>\r\n                        : <FaRegPlayCircle disabled={true} style={{color : \"gray\"}}size = {30}/>\r\n                    }\r\n                    \r\n                    \r\n                </button>\r\n\r\n                {\r\n                    this.props.sessionUser === playlist.username ? \r\n                        <IconButton className = {classes.deleteBtn} onClick={this.setVisible} >\r\n                            <DeleteIcon fontSize=\"large\"/>\r\n                        </IconButton>\r\n                     : null\r\n\r\n                }\r\n\r\n                {this.state.deleteConfirmVisible ?\r\n\r\n                    <>\r\n                        <Dialog\r\n                            open={this.state.deleteConfirmVisible}\r\n                            keepMounted\r\n                            onClose={this.setInvisible}\r\n                            aria-labelledby=\"alert-dialog-slide-title\"\r\n                            aria-describedby=\"alert-dialog-slide-description\"\r\n                            fullWidth={true}\r\n                            maxWidth = {'xs'}\r\n                        >\r\n                    <DialogTitle id=\"alert-dialog-slide-title\">{\"Delete Playlist: \" + this.state.playlist.name + \"?\"}</DialogTitle>\r\n                    <DialogActions>\r\n                    <Button  onClick={this.deletePlaylist} color=\"primary\">\r\n                        Delete\r\n                    </Button>\r\n                    <Button onClick={this.setInvisible} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n                </Dialog>\r\n\r\n                    </>\r\n \r\n                : null }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handlePlay = async () => {\r\n        // If pausing current playlist \r\n        if (this.props.current_playlist !== null && this.props.current_playlist.name === this.state.playlist.name)\r\n            this.props.onPlayChange(!this.props.play) \r\n        // If changing playlist \r\n        else {\r\n            console.log(\"Change playlist\")\r\n            this.props.onPlaylistChange(this.state.playlist, this.state.playlist.songs[0])\r\n        }\r\n            \r\n    }\r\n}\r\n \r\nexport default withStyles(useStyle)(PlaylistButton);","/** NEW PLAYLIST BUTTON  \r\n * Component within Playlists \r\n * Handles creating a new playlist \r\n*/\r\n\r\nimport React, { Component } from 'react'\r\nimport {AiOutlineCheckCircle, AiOutlineCloseCircle} from 'react-icons/ai'\r\nimport {IoMdAddCircleOutline}from 'react-icons/io'\r\nimport PlaylistAddIcon from '@material-ui/icons/PlaylistAdd'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport Button from '@material-ui/core/Button'\r\nconst useStyle = theme => ({\r\n    dialog :{\r\n        minWidth: \"300px\"\r\n    },\r\n    addButton : {\r\n        '&:focus': {\r\n            outline: 'none',\r\n          },\r\n          float: 'right'\r\n    }\r\n})\r\nclass NewPlaylistButton extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.setPlaylists = this.props.setPlaylists\r\n        this.nameEl = React.createRef()\r\n    }\r\n\r\n    state = { \r\n        popupVisible: false,\r\n        username : this.props.username,\r\n        user_id : this.props.user_id,\r\n        error: \"\"\r\n     }\r\n\r\n    // Set new playlist box to visible \r\n    setVisible = () => {\r\n        this.setState({popupVisible : true})\r\n    }\r\n\r\n    // Set new playlist box to invisible \r\n    setInvisible = () => {\r\n        this.setState({popupVisible : false})\r\n    }\r\n\r\n    // Create a new playlist \r\n    createNewPlaylist = () =>{\r\n        let name =this.nameEl.current.children[1].children[0].value.trim()\r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    createPlaylist (username : \"${this.state.username}\", name : \"${name}\", user_id: \"${this.state.user_id}\") {\r\n                        _id \r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        // Create the playlist \r\n        fetch('https://easytunes.herokuapp.com/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('Failed');\r\n                return res.json()\r\n            })\r\n            .then(result => {\r\n                 // Update the playlists on the UI \r\n\r\n                if (result.errors)\r\n                    this.setState({error: result.errors[0].message})\r\n                else {\r\n                    requestBody = {\r\n                        query: `\r\n                            query {\r\n                                getUserPlaylists(username: \"${this.state.username}\"){\r\n                                    _id\r\n                                    name\r\n                                    username\r\n                                    likes\r\n                                    total_duration \r\n                                    playlist_img\r\n                                    public\r\n                                    songs {\r\n                                        song_id\r\n                                        name\r\n                                    }\r\n                                }\r\n                            }\r\n                        `\r\n                    }\r\n\r\n                    fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n                        method: 'POST',\r\n                        body: JSON.stringify(requestBody),\r\n                        headers: {\r\n                        'content-type': 'application/json'\r\n                        }})\r\n                    .then(res => {\r\n                        if (res.status !== 200 && res.status !== 201) \r\n                            throw new Error('Failed');\r\n                        return res.json()\r\n                    })\r\n                    .then(result => {\r\n                        console.log(result)\r\n                        this.nameEl = \"\"\r\n                        this.setInvisible()\r\n                        this.setPlaylists(result.data.getUserPlaylists)\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n\r\n       \r\n    }\r\n\r\n    \r\n    render() { \r\n        const {classes} = this.props\r\n        return (  \r\n            <>\r\n                <IconButton className = {classes.addButton} onClick = {this.setVisible}> \r\n                    <PlaylistAddIcon  fontSize=\"large\"/>\r\n                </IconButton>\r\n\r\n                <Dialog\r\n                    open={this.state.popupVisible}\r\n                    keepMounted\r\n                    onClose={this.setInvisible}\r\n                    aria-labelledby=\"alert-dialog-slide-title\"\r\n                    aria-describedby=\"alert-dialog-slide-description\"\r\n                    className = {classes.dialog}\r\n                    fullWidth={true}\r\n                    maxWidth = {'sm'}\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-slide-title\">{\"Create New Playlist\"}</DialogTitle>\r\n                    <DialogContent>\r\n                    {this.state.error ?\r\n                        <DialogContentText> {this.state.error} </DialogContentText> : null\r\n                    }\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Playlist Name\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        ref = {this.nameEl}\r\n                    />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                    <Button  onClick={this.createNewPlaylist} color=\"primary\">\r\n                        Create \r\n                    </Button>\r\n                    <Button onClick={this.setInvisible} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n                </Dialog>\r\n\r\n                </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyle)(NewPlaylistButton);","/** PLAYLISTS\r\n * Component within profile\r\n * Handles displaying the user's playlists \r\n */\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport PlaylistButton from './PlaylistButton'\r\nimport NewPlaylistButton from './NewPlaylistButton'\r\n\r\nclass Playlists extends Component {\r\n \r\n    state = { \r\n        playlists: this.props.playlists,\r\n        sessionUser: this.props.sessionUser,\r\n        user: this.props.user,\r\n        history: this.props.history\r\n    }\r\n\r\n    // Updates playlists \r\n    setPlaylists = (playlists) => {\r\n        this.setState({playlists : playlists})\r\n    }\r\n\r\n\r\n    render() { \r\n\r\n        let playlists = this.state.playlists.map(function(playlist) {\r\n            \r\n            return (\r\n                <PlaylistButton \r\n                    playlist = {playlist} \r\n                    key = {playlist._id} \r\n                    username = {this.state.user.username} \r\n                    setPlaylists = {this.setPlaylists} \r\n                    sessionUser = {this.state.sessionUser}  \r\n                    editing={this.props.editing} \r\n                    history = {this.props.history} \r\n                    play = {this.props.play} \r\n                    onPlayChange = {this.props.onPlayChange}\r\n                    onPlaylistChange = {this.props.onPlaylistChange}\r\n                    current_playlist = {this.props.current_playlist}\r\n                />\r\n            )\r\n        }, this)\r\n        return (\r\n            <>\r\n            {playlists}\r\n            { this.state.sessionUser === this.state.user.username ?\r\n                <div className=\"add-new\">\r\n                    <NewPlaylistButton text = {\"Playlist Name\"} username = {this.state.user.username} user_id = {this.state.user._id} setPlaylists = {this.setPlaylists}/>\r\n                </div>  : null\r\n            }\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Playlists;","/** SAVED PLAYLISTS BUTTON\r\n * Component within Saved Playlists \r\n * Handles one saved playlist in the playlists page \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport {AiFillHeart, AiFillEyeInvisible, AiFillEye} from 'react-icons/ai'\r\n\r\nimport {RiPlayListLine} from 'react-icons/ri'\r\nimport {AiOutlineDelete, AiOutlineCheckCircle, AiOutlineCloseCircle} from 'react-icons/ai'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport Button from '@material-ui/core/Button'\r\n// FaRegPauseCircle\r\nimport {FaRegPlayCircle,FaRegPauseCircle} from 'react-icons/fa'\r\nclass SavedPlaylistButton extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.setPlaylists = this.props.setPlaylists;\r\n\r\n    }\r\n    \r\n    state = { \r\n        playlist: this.props.playlist,\r\n        username: this.props.username,\r\n        deleteConfirmVisible: false,\r\n        history: this.props.history,\r\n        loading: true\r\n    }\r\n\r\n    componentDidMount = () =>{\r\n        this.setState({loading: true})\r\n        \r\n        let requestBody = {\r\n            query: `\r\n                query{\r\n                    getPlaylistByID(id : \"${this.props.playlist.playlist_id}\") {\r\n                        _id\r\n                        name\r\n                        username\r\n                        playlist_img\r\n                        likes \r\n                        songs {\r\n                            song_id\r\n                            name\r\n                            song_uri\r\n                            artists\r\n                            song_img\r\n                        }\r\n                            username\r\n                            likes\r\n                            total_duration\r\n                            playlist_img \r\n                            songs {\r\n                                song_id\r\n                                name\r\n                                song_uri\r\n                                artists\r\n                                song_img\r\n                            }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch ('https://easytunes.herokuapp.com/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n                // console.log(res)\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n\r\n               this.setState({\r\n                   playlist: data.data.getPlaylistByID,\r\n                   loading:false\r\n               })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    setVisible = () => {\r\n        this.setState({deleteConfirmVisible : true})\r\n    }\r\n\r\n    setInvisible = () => {\r\n        this.setState({deleteConfirmVisible: false})\r\n    }\r\n\r\n    toPlaylist = () => {\r\n        this.state.history.push('/' + encodeURIComponent(this.state.playlist.username) + '/mixtape='+ this.state.playlist._id)\r\n    }\r\n\r\n    deletePlaylist = () => {\r\n        this.setInvisible()\r\n        // Delete the playlist \r\n        // console.log(this.state.playlist)\r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    deleteFavorite (username: \"${this.props.sessionUser}\", playlist_id : \"${this.state.playlist._id}\") {\r\n                        _id \r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        // Delete the playlist \r\n        fetch('https://easytunes.herokuapp.com/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('Failed');\r\n                return res.json()\r\n            })\r\n            .then(result => {\r\n                 // Update the playlists on the UI \r\n                //  console.log(this.props.sessionUser)\r\n                requestBody = {\r\n                    query: `\r\n                        query {\r\n                            getUserByUsername(username: \"${this.props.sessionUser}\"){\r\n                                user {\r\n                                    saved_playlists {\r\n                                    playlist_id\r\n                                    name\r\n                                }\r\n                            }\r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n\r\n                fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(requestBody),\r\n                    headers: {\r\n                    'content-type': 'application/json'\r\n                    }})\r\n                .then(res => {\r\n                    if (res.status !== 200 && res.status !== 201) \r\n                        throw new Error('Failed');\r\n                    return res.json()\r\n                })\r\n                .then(result => {\r\n                    this.setPlaylists(result.data.getUserByUsername.user.saved_playlists)\r\n                    //error here\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    render() { \r\n        if (this.state.loading)\r\n            return(<> </>)\r\n        const playlist = this.state.playlist \r\n        // console.log(playlist)\r\n        if (playlist == null) {\r\n            return(<> </>)\r\n        }\r\n        console.log(playlist)\r\n        console.log(this.props)\r\n        return (\r\n            <div className=\"playlist-row\">\r\n                <div className=\"col\">\r\n                    <img alt = \"playlist_img\" src={playlist.playlist_img} class=\"song_picture\"></img>\r\n                </div>\r\n\r\n                <div className=\"col text-left\">\r\n                    {playlist.name}\r\n                    {this.state.username === playlist.username ? <span>  {playlist.public ? <AiFillEye/> : < AiFillEyeInvisible/>} </span> : null}\r\n                </div>\r\n\r\n                <div className=\"col text-left\">\r\n                <div className=\"col text-left\">\r\n                    {playlist.songs.length} {playlist.songs.length === 1 ? \"Song\" : \"Songs\"} - {playlist.total_duration < 3600 ? \"0 hr \" + (playlist.total_duration < 600 ? \"0\" + Math.floor(playlist.total_duration/60) + \" min\": Math.floor(playlist.total_duration/60) + \" min\") :\r\n                (Math.floor(playlist.total_duration/3600) + \" hr \" + (playlist.total_duration%3600 < 600 ? \"0\" + Math.floor(playlist.total_duration/60) + \" min\": Math.floor(playlist.total_duration/60) + \" min\"))}\r\n                </div>\r\n                </div>\r\n\r\n                <div className=\"col text-left\">\r\n                    {this.state.username === playlist.username ? <><AiFillHeart id={playlist._id} size = {24}/> {playlist.likes} </>:\r\n                    <>{playlist.username}</>}\r\n                </div>\r\n\r\n                <button className=\"playlist-btn\" id={playlist.playlist_id} onClick = {this.toPlaylist}/>\r\n                \r\n                <button className=\"play-btn\">\r\n                { playlist.songs.length > 0 ?\r\n                        <>\r\n                        { this.props.play && this.props.current_playlist.name === playlist.name? \r\n                            <FaRegPauseCircle onClick = {this.handlePlay} size = {30}/>\r\n                            : <FaRegPlayCircle onClick = {this.handlePlay} size = {30}/>\r\n                        }\r\n                    </>\r\n                        : null\r\n                    }\r\n\r\n                   \r\n                </button>\r\n\r\n                {\r\n                    this.props.sessionUser === this.state.username ? \r\n                        <IconButton onClick={this.setVisible} >\r\n                            <DeleteIcon fontSize=\"large\"/>\r\n                        </IconButton>\r\n                     : null\r\n\r\n                }\r\n\r\n                {this.state.deleteConfirmVisible ?\r\n                    <Dialog\r\n                    open={this.state.deleteConfirmVisible}\r\n                    keepMounted\r\n                    onClose={this.setInvisible}\r\n                    aria-labelledby=\"alert-dialog-slide-title\"\r\n                    aria-describedby=\"alert-dialog-slide-description\"\r\n                    fullWidth={true}\r\n                    maxWidth = {'xs'}\r\n                    >\r\n                    <DialogTitle id=\"alert-dialog-slide-title\">{\"Delete Saved Mixtape: \" + this.state.playlist.name + \"?\"}</DialogTitle>\r\n                    <DialogActions>\r\n                    <Button  onClick={this.deletePlaylist} color=\"primary\">\r\n                        Delete\r\n                    </Button>\r\n                    <Button onClick={this.setInvisible} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n                </Dialog>\r\n\r\n                : null }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handlePlay = async () => {\r\n        // If pausing current playlist \r\n        if (this.props.current_playlist !== null && this.props.current_playlist.name === this.state.playlist.name)\r\n            this.props.onPlayChange(!this.props.play) \r\n        // If changing playlist \r\n        else {\r\n            console.log(\"Change playlist\")\r\n            this.props.onPlaylistChange(this.state.playlist)\r\n        }\r\n            \r\n    }\r\n}\r\n \r\nexport default SavedPlaylistButton;","/** SAVED PLAYLISTS \r\n * Component within profile\r\n * Handles displaying the user's saved playlists \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport SavedPlaylistButton from './SavedPlaylistButton'\r\n\r\nclass SavedPlaylists extends Component {\r\n    state = { \r\n        playlists: this.props.playlists,\r\n        sessionUser: this.props.sessionUser,\r\n        user: this.props.user,\r\n        history: this.props.history\r\n    }\r\n    setPlaylists = (playlists) => {\r\n        this.setState({playlists : playlists})\r\n    }\r\n\r\n    render() { \r\n      \r\n        let playlists = this.state.playlists.map(function(playlist) {\r\n            \r\n            return (\r\n                <SavedPlaylistButton key = {playlist.playlist_id} \r\n                    playlist = {playlist} \r\n                    username = {this.state.user.username} \r\n                    setPlaylists = {this.setPlaylists}\r\n                    sessionUser = {this.state.sessionUser}  \r\n                    editing={this.props.editing} \r\n                    history = {this.props.history}\r\n                    play = {this.props.play} \r\n                    onPlayChange = {this.props.onPlayChange}\r\n                    onPlaylistChange = {this.props.onPlaylistChange}\r\n                    current_playlist = {this.props.current_playlist}\r\n                />\r\n            )\r\n        }, this)\r\n        return (\r\n            <>\r\n            {playlists}\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default SavedPlaylists;","/** PROFILE\r\n * Handles the displaying the user's playlists, saved playlists, and uploaded songs \r\n */\r\n\r\nimport React, { Component} from 'react'\r\n\r\nimport {RiUserFollowLine, RiUserAddLine} from 'react-icons/ri'\r\nimport Playlists from './Playlists/Playlists'\r\n// import UploadedSongs from './UploadedSongs/UploadedSongs'\r\nimport SavedPlaylists from './Playlists/SavedPlaylists'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Container from '@material-ui/core/Container'\r\nimport Button from '@material-ui/core/Button'\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport './Profile.css'\r\n\r\n\r\nconst useStyle = theme => ({\r\n    buttonFocus : {\r\n        borderRadius: \"0\",\r\n        width: \"100%\",\r\n        strokeLinecap: \"round\",\r\n        border: \"none\",\r\n        '&:focus' :{\r\n            outline: \"none\"\r\n        },\r\n        borderBottom : \"2px solid #004CB2\",\r\n        fontWeight: \"bold\"\r\n    },\r\n    buttonNotFocus :{\r\n        width: \"100%\",\r\n        border: \"none\",\r\n        '&:focus' :{\r\n            outline: \"none\"\r\n        },\r\n    },\r\n    container: {\r\n        padding : theme.spacing(0,0,0,0)\r\n    }\r\n})\r\nclass Profile extends Component {\r\n    state = { \r\n        showSavedPlaylists: false,\r\n        showMyPlaylists: true,\r\n        showUploadedSongs: false,\r\n        profileUsername: this.props.match.params.username,\r\n        profileUserInfo: null,\r\n        profileAccountCreationDate: null,\r\n        profileFollowers: null, \r\n        profilePlaylists: null,\r\n        profileSavedPlaylists: null,\r\n        loading: true,\r\n    }\r\n\r\n    // Get the user information and their playlists \r\n    componentDidMount = () => {\r\n\r\n        if (!this.props.username)\r\n            this.props.history.push('/login')\r\n\r\n        this.setState({loading : true})\r\n        const username = this.state.profileUsername\r\n\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${username}\"){\r\n                        user {\r\n                            _id\r\n                            username\r\n                            profile_img\r\n                            joined\r\n                            followers {\r\n                                user_id\r\n                                username\r\n                            }\r\n\r\n                            saved_playlists {\r\n                                playlist_id \r\n                                name\r\n                            }\r\n                        }\r\n                        playlists {\r\n                            _id\r\n                            name\r\n                            username\r\n                            public\r\n                            likes\r\n                            total_duration\r\n                            playlist_img \r\n                            songs {\r\n                                song_id\r\n                                song_uri\r\n                                name\r\n                                artists\r\n                                song_img\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch ('https://easytunes.herokuapp.com/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n             \r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error (\"Failed\")\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                \r\n                data = data.data.getUserByUsername\r\n                const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n                const date = new Date(parseInt(data.user.joined))\r\n                const showMyPlaylists = this.props.history.location.pathname.split('/').length === 2 ? true : false\r\n                \r\n                this.setState({\r\n                    profileUserInfo: data.user,\r\n                    profileFollowers: data.user.followers, \r\n                    profilePlaylists: data.playlists,\r\n                    profileSavedPlaylists: data.user.saved_playlists,\r\n                    profileAccountCreationDate: months[date.getMonth()] + \" \" + date.getDate() + \", \" + date.getFullYear(),\r\n                    loading: false,\r\n                    showMyPlaylists: showMyPlaylists,\r\n                    showSavedPlaylists: !showMyPlaylists\r\n                })        \r\n            \r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n        \r\n    }\r\n    \r\n    render() { \r\n        const {classes} = this.props\r\n\r\n        if (this.state.loading)\r\n            return (<> </>);\r\n            \r\n        return ( \r\n            \r\n            <div className=\"container-fluid playlist-container\">\r\n\r\n                <div className=\"container-fluid playlist-data-container\">\r\n                    {/* Information Bar about the user */}\r\n                    <div className=\"information-row\">\r\n                        <div className=\"col text-center\">\r\n                            <div className=\"\">\r\n                                <img alt=\"playlist_img\" src={this.state.profileUserInfo.profile_img} class=\"user_picture\"></img>\r\n                            </div>\r\n                            <h2>{this.state.profileUsername}                            \r\n                             \r\n                             {this.state.profileUsername !== this.props.username ?\r\n                                !this.isFollowing() ? \r\n                                <button> <RiUserAddLine size= {24}/> </button> :\r\n                                <span> <RiUserFollowLine size={24}/></span>\r\n                            : null}\r\n\r\n                            </h2>\r\n                             <h5> User Since: {this.state.profileAccountCreationDate}</h5>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    {/* Navigation bar between \"My Playlist\" and \"Saved Playlists\" */}\r\n                    <div className=\"navigation-row\">\r\n        \r\n                        <Container className = {classes.container}> \r\n                            <Grid container>\r\n                                <Grid xs item align=\"center\">\r\n                                    <Button id = \"playlists-btn\" onClick = {this.changeView} className = {this.state.showMyPlaylists ? classes.buttonFocus : classes.buttonNotFocus}> \r\n                                        { this.state.profileUsername === this.props.username ? \r\n                                            \"My Mixtapes\" :\r\n                                            \"Mixtapes\"\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid xs item align=\"center\">\r\n                                    <Button id = \"saved-playlists-btn\" onClick = {this.changeView} className = {this.state.showSavedPlaylists ? classes.buttonFocus : classes.buttonNotFocus}> Saved Mixtapes </Button>\r\n                                </Grid>\r\n   \r\n                            </Grid>\r\n                        </Container>\r\n\r\n                    </div>\r\n\r\n                    {/* Renders \"My Playlist\" and \"Saved Playlists\" */}\r\n                    {this.state.showSavedPlaylists ? <SavedPlaylists \r\n                        playlists = {this.state.profileSavedPlaylists} \r\n                        user = {this.state.profileUserInfo} \r\n                        sessionUser = {this.props.username} \r\n                        history = {this.props.history}\r\n                        play = {this.props.play} \r\n                        onPlayChange = {this.props.onPlayChange}\r\n                        onPlaylistChange = {this.props.onPlaylistChange}\r\n                        current_playlist = {this.props.current_playlist} /> : null}\r\n                    {this.state.showMyPlaylists ?  \r\n                        <Playlists playlists = {this.state.profilePlaylists} \r\n                                user = {this.state.profileUserInfo} \r\n                                sessionUser = {this.props.username} \r\n                                history = {this.props.history} \r\n                                play = {this.props.play} \r\n                                onPlayChange = {this.props.onPlayChange}\r\n                                onPlaylistChange = {this.props.onPlaylistChange}\r\n                                current_playlist = {this.props.current_playlist}\r\n                        /> : null}\r\n                    {/* {this.state.showUploadedSongs ? <UploadedSongs user = {this.state.profileUserInfo} sessionUser = {this.props.username}/> : null} */}\r\n                    <div className = \"row blank-space\"> </div>\r\n                </div>\r\n                \r\n                {/* <PlaylistNavbar/> */}\r\n            </div>\r\n                    \r\n                \r\n      \r\n         );\r\n    }\r\n\r\n    // Check if the logged in user is following \r\n    isFollowing = () =>{\r\n        let followers = this.state.profileFollowers\r\n        let following = false \r\n        followers.forEach(follower => {\r\n            if (follower.username === this.props.username)\r\n                following = true \r\n        })\r\n        \r\n        return following\r\n    }\r\n\r\n    // Handle displaying playlists, saved playlists, or uploaded songs \r\n    changeView = (event) => {\r\n\r\n        if (event.currentTarget.id === 'playlists-btn'){\r\n            this.setState({showMyPlaylists : true, showSavedPlaylists:false})\r\n            this.props.history.push('/' + this.state.profileUsername)\r\n        }\r\n        else {\r\n            this.setState({showMyPlaylists : false, showSavedPlaylists:true})\r\n            this.props.history.push('/' + this.state.profileUsername + '/saved-mixtapes')\r\n        }\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyle)(Profile);","/** SONG\r\n * Component within Song List \r\n * Handles displaying one song \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport {AiOutlineDelete, AiOutlineArrowUp, AiOutlineArrowDown} from 'react-icons/ai'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport Button from '@material-ui/core/Button'\r\n// FaRegPauseCircle\r\nimport {FaRegPlayCircle, FaRegPauseCircle} from 'react-icons/fa'\r\nclass Song extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.removeSong = this.props.removeSong\r\n        this.handleMoveUp = this.props.handleMoveUp\r\n        this.handleMoveDown = this.props.handleMoveDown\r\n    }\r\n    state = { \r\n        song: this.props.song, \r\n        editing: this.props.editing,\r\n        deleteConfirmVisible : false,\r\n        playlistId: this.props.playlist_id\r\n    }\r\n\r\n    // Sets delete confirmation box to visible \r\n    setVisible = () => {\r\n        this.setState({deleteConfirmVisible : true})\r\n    }\r\n\r\n    // Sets delete confirmation box to invisible \r\n    setInvisible = () => {\r\n        this.setState({deleteConfirmVisible: false})\r\n    }\r\n    \r\n    // Remove song from the playlist (Edit Mode)\r\n    // NOTE: Does not delete the song from the database \r\n    handleDelete = () => {\r\n        this.removeSong(this.state.song, this.props.index)\r\n    }\r\n\r\n    moveUp = () => {\r\n        console.log(\"move up\")\r\n        this.handleMoveUp(this.state.song, this.props.index)\r\n    }\r\n     \r\n    moveDown = () => {\r\n        console.log(\"move down\")\r\n        this.handleMoveDown(this.state.song, this.props.index)\r\n    }\r\n\r\n    handlePlay = async () => {\r\n        // No songs playing \r\n        if (!this.props.current_playlist || !this.props.current_song || this.props.current_playlist._id !== this.props.playlist_id){\r\n            console.log(\"Play Playlist\")\r\n            let requestBody = {\r\n                query : `\r\n                    query {\r\n                        getPlaylistByID(id : \"${this.state.playlistId}\") {\r\n                            likes \r\n                            name \r\n                            public \r\n                            songs {\r\n                                name \r\n                                song_id \r\n                                song_uri\r\n                                song_img\r\n                            }\r\n                            total_duration \r\n                            username \r\n                            _id \r\n                        }\r\n                    }\r\n                `\r\n            }\r\n\r\n            fetch('https://easytunes.herokuapp.com/graphql',{\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }})\r\n                .then (res => {\r\n                    if (res.status !== 200 && res.status !== 201)\r\n                        throw new Error(\"Playlist not found\")\r\n                    return res.json()\r\n                })\r\n                .then(data => {\r\n                    console.log(data.data.getPlaylistByID)\r\n                    this.props.onPlaylistChange(data.data.getPlaylistByID, this.state.song)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n        // Same playlist and pause the song \r\n        else if (this.props.current_playlist._id === this.props.playlist_id && this.props.current_song.song_id === this.state.song.song_id)\r\n            this.props.onPlayChange(!this.props.play)\r\n        // Different Song \r\n        else {\r\n            console.log(\"SONG ON SONG CHANGE\")\r\n            this.props.onSongChange(this.state.song.song_id)\r\n        }\r\n            \r\n           // console.log(\"Change songs\")\r\n    }\r\n\r\n    render() { \r\n        console.log(this.props.current_song,  this.props.current_playlist )\r\n\r\n        return (  \r\n            <div className=\"row song-row\">\r\n            <div className=\"col song-col text-left\">\r\n                {this.props.index+1}\r\n            </div>\r\n            <div className=\"col song-col text-left\">\r\n            <button className=\"play-btn\" onClick = {this.handlePlayClick}>\r\n                {this.props.play && this.props.current_playlist._id === this.state.playlistId && this.props.current_song.song_id === this.state.song.song_id ?\r\n                    <FaRegPauseCircle onClick = {this.handlePlay} size= {24}/>\r\n                 : \r\n                    <FaRegPlayCircle onClick = {this.handlePlay} size= {24}/>\r\n                }\r\n                \r\n            </button>\r\n            </div>\r\n            <div className=\"col song-col\">\r\n                <img alt = \"\" src={this.state.song.song_img} class=\"song_picture\"></img>\r\n            </div>\r\n            <div className=\"col song-col text-left\">\r\n                {this.state.song.name}\r\n            </div>\r\n\r\n            <div className=\"col song-col text-left\">\r\n                {this.state.song.artists}\r\n            </div>\r\n            <div className=\"col song-col text-center\">\r\n                {this.state.song.duration < 60 ? \"0:\" + (this.state.song.duration < 10 ? \"0\" + this.state.song.duration: this.state.song.duration) :\r\n                (Math.floor(this.state.song.duration/60) + \":\" + (this.state.song.duration%60 < 10 ? \"0\" + this.state.song.duration%60 : this.state.song.duration%60))}\r\n            </div>\r\n            <div className=\"col song-col text-center\">\r\n                {this.state.editing ? \r\n                    <div>\r\n                        {(this.props.index > 0) ? <AiOutlineArrowUp size={34} className=\"upbtn\" onClick={this.moveUp}/> : <AiOutlineArrowUp size={34} disabled color=\"#cccccc\"/>}\r\n                        {(this.props.index === this.props.playlist_length - 1) ? <AiOutlineArrowDown size={34} disabled color=\"#cccccc\"/> : <AiOutlineArrowDown size={34} class=\"downbtn\" onClick={this.moveDown}/>}\r\n                    </div> \r\n                :null}\r\n            </div>\r\n            <div className=\"col song-col text-center\">\r\n                {this.state.editing ? <button className = 'delete-btn' onClick={this.handleDelete}> <AiOutlineDelete size = {24}/></button>: null}\r\n            </div>\r\n\r\n       \r\n      </div>  \r\n        );\r\n    }\r\n}\r\n \r\nexport default Song;","/** SONG LIST\r\n * Component within Playlist\r\n * Handles displaying the list of songs in a playlist \r\n */\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport './Songlist.css'\r\nimport Song from './Song'\r\nclass Songlist extends Component {\r\n    state = {\r\n        songs : this.props.songs,\r\n        playlist_id: this.props.playlist_id,\r\n        editing: this.props.editing,\r\n    }\r\n\r\n    // Handles when the user clicks play \r\n    handlePlayClick = (event) =>{\r\n        console.log(event)\r\n    }\r\n\r\n    // Remove song from the playlist \r\n    removeSong = (song, index) => {\r\n        console.log(song, index)\r\n        let songs = this.state.songs\r\n        songs.splice(index, 1)\r\n        this.setState({songs : songs})\r\n    }\r\n    \r\n    handleMoveUp = (song, index) => {\r\n        console.log(song, index)\r\n        let songs = this.state.songs\r\n\r\n        let temp = songs[index]\r\n        songs[index] = songs[index-1]\r\n        songs[index-1] = temp\r\n\r\n        this.setState({songs : songs})\r\n    }\r\n    \r\n    handleMoveDown = (song, index) => {\r\n        console.log(song, index)\r\n        let songs = this.state.songs\r\n\r\n        let temp = songs[index]\r\n        songs[index] = songs[index+1]\r\n        songs[index+1] = temp\r\n\r\n\r\n        this.setState({songs : songs})\r\n    }\r\n\r\n    render() {\r\n        let songs = this.state.songs.map(function(song, i){\r\n            return (\r\n                <Song  key = {song.name + song.song_id} \r\n                    song={song} \r\n                    index={i}\r\n                    editing={this.state.editing} \r\n                    playlist_id = {this.state.playlist_id} \r\n                    removeSong={this.removeSong} \r\n                    handleMoveUp={this.handleMoveUp} \r\n                    handleMoveDown={this.handleMoveDown} \r\n                    playlist_length={this.props.songs.length}\r\n                    play = {this.props.play}\r\n                    onPlayChange = {this.props.onPlayChange}\r\n                    onPlaylistChange = {this.props.onPlaylistChange}\r\n                    onSongChange = {this.props.onSongChange}\r\n                    current_playlist = {this.props.current_playlist}\r\n                    current_song = {this.props.current_song}\r\n                />\r\n            );\r\n        }, this)\r\n\r\n        return (\r\n            <>\r\n                {songs}\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n \r\nexport default Songlist;","import React, { Component } from 'react'\r\n\r\nclass Comment extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.commentEl = React.createRef()\r\n    }\r\n    state = {  \r\n        buttonsVisible: false,\r\n    }\r\n\r\n\r\n    setVisible = () => {\r\n        console.log(\"BUTTONS VISIBLE\")\r\n        this.setState({buttonsVisible : true})\r\n    }\r\n\r\n    handleBlur = () => {\r\n        if (this.state.text === \"\")\r\n            this.setState({buttonsVisible: false})\r\n    }\r\n\r\n    handleCancel = () => {\r\n        document.getElementById(\"comment-input\").value = \"\"\r\n        this.setState({text : \"\", buttonsVisible: false})\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        console.log(this.commentEl.current.value)\r\n        let requestBody = {\r\n            query: `\r\n            mutation {\r\n                addComment(playlist_id: \"${this.props.playlist_id}\", username : \"${this.props.username}\", comment: \"${this.commentEl.current.value}\"){\r\n                    comments {\r\n                        _id\r\n                        user_id\r\n                        message \r\n                        date\r\n                        replies {\r\n                            user_id\r\n                            message\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        }\r\n\r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error('Failed');\r\n            return res.json()\r\n        })\r\n        .then (data => {\r\n          //  this.props.setState({comments : data.data.addComment.comments})\r\n          console.log(data)\r\n          this.props.stateChange(data.data.addComment.comments)\r\n          this.commentEl.current.value = \"\"\r\n          this.setState({buttonsVisible: false}, function () {console.log(this.state)})\r\n            \r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    render() { \r\n        return (  \r\n            <>\r\n            <textarea id = \"comment-input\" className=\"comment-text\" type=\"text\" ref = {this.commentEl} placeholder=\"Add a Comment\" onFocus = {this.setVisible} onBlur = {this.handleBlur}/>\r\n            {\r\n                this.state.buttonsVisible === true ? \r\n                <>\r\n                     <button className = \"comment-button\" onClick ={this.handleSubmit}> COMMENT </button>\r\n                     <button className = \"comment-button\" onClick = {this.handleCancel} style = {{color: \"black\", backgroundColor: \"white\", border:\"none\"}}> CANCEL </button>\r\n                     </>\r\n                : null \r\n            }\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Comment;","import React, { Component } from 'react'\r\n\r\nclass Reply extends Component {\r\n    state = { \r\n        visibility: false,\r\n        text : \"\"\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({text: event.target.value})\r\n    }\r\n\r\n    setVisible = () => {\r\n        this.setState({visibility: true})\r\n    }\r\n\r\n    setInvisible = () => {\r\n        this.setState({visibility: false})\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.setInvisible()\r\n        document.getElementById(\"comment-input\").value = \"\"\r\n        this.setState({text : \"\"})\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        let requestBody = {\r\n            query: `\r\n            mutation {\r\n                addReply(user_id:\"${this.props.user_id}\", message: \"${this.state.text}\", playlist_id: \"${this.props.playlist_id}\", comment_index: ${this.props.commentIndex}){\r\n\r\n                    comments {\r\n                        _id\r\n                        user_id\r\n                        message \r\n                        date \r\n                        replies {\r\n                            _id\r\n                            user_id\r\n                            message\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        `\r\n        }\r\n\r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error('Failed');\r\n            return res.json()\r\n        })\r\n        .then(data => {\r\n            this.setInvisible()\r\n            this.props.stateChange(data.data.addReply.comments)\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    render() { \r\n        return (  \r\n            <>\r\n        \r\n        {\r\n            this.state.visibility ? \r\n            <>\r\n                <textarea id = \"comment-input\" className=\"comment-text\" type=\"text\" placeholder=\"Add a Comment\" onChange = {this.onChange}/>\r\n                 <button className = \"comment-button\" onClick ={this.handleSubmit}> REPLY </button>\r\n                 <button className = \"comment-button\" onClick = {this.handleCancel} style = {{color: \"black\", backgroundColor: \"white\", border:\"none\"}}> CANCEL </button>\r\n                 </>\r\n            : \r\n            <button className = \"reply-button\" onClick = {this.setVisible}> REPLY </button>  \r\n        }\r\n        \r\n        </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Reply;\r\n","import React, { Component } from 'react'\r\n\r\nclass ShowReplyCard extends Component {\r\n    state = {  \r\n        loading: true,\r\n        username : null\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserById (user_id : \"${this.props.user_id}\"){\r\n                        username\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error('Playlist not found');\r\n            return res.json()\r\n        })\r\n        .then(data => {\r\n            console.log(data.data.getUserById)\r\n            this.setState({username : data.data.getUserById.username, loading: false})\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n\r\n        return (  \r\n            <>\r\n            <div className=\"username-row\">{this.state.username}</div>\r\n                    <div className=\"comment-row\">{this.props.message}</div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default ShowReplyCard;","import React, { Component } from 'react'\r\nimport { BsFillCaretUpFill, BsFillCaretDownFill} from 'react-icons/bs'\r\nimport ShowReplyCard from './ShowReplyCard'\r\n\r\nclass ShowReplies extends Component {\r\n    state = {  \r\n        repliesVisible: false \r\n    }\r\n\r\n    toggleVisibility = () => {\r\n        this.setState({repliesVisible : !this.state.repliesVisible})\r\n    }\r\n\r\n    \r\n    render() { \r\n        let res = this.props.replies.map(function(reply, j){\r\n            return (\r\n                <li key = {reply.user_id + j}>\r\n                    <ShowReplyCard user_id = {reply.user_id} message = {reply.message} />\r\n                </li>\r\n            )\r\n        }, this)\r\n\r\n        return (  \r\n            <div>\r\n            \r\n            {\r\n                !this.state.repliesVisible ? \r\n                <>\r\n                <button className = \"view-replies-btn\" onClick={this.toggleVisibility}> \r\n                        <BsFillCaretDownFill/> \r\n                        Show Replies \r\n                </button>\r\n                {/* {document.getElementById(id).style.display = \"none\"} */}\r\n                </>\r\n                :\r\n                <>\r\n                <button className = \"view-replies-btn\" onClick={this.toggleVisibility}> \r\n                        <BsFillCaretUpFill/> \r\n                        Hide Replies \r\n                </button>\r\n                 \r\n                    <div className=\"container replies-container\"  >\r\n                        <ul>\r\n                            {res}\r\n                        </ul>\r\n                    </div> \r\n                    \r\n              \r\n                </>\r\n            }\r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default ShowReplies;","import React, { Component } from 'react'\r\nimport Reply from './Reply.js'\r\nimport ShowReplies from './ShowReplies'\r\n\r\nclass UserComment extends Component {\r\n    state = {  \r\n        editVisible: false,\r\n        text : this.props.message,\r\n        username : null,\r\n        loading: true\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserById (user_id : \"${this.props.user_id}\"){\r\n                        username\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error('Playlist not found');\r\n            return res.json()\r\n        })\r\n        .then(data => {\r\n            console.log(data.data.getUserById)\r\n            this.setState({username : data.data.getUserById.username, loading: false})\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n\r\n    }\r\n    handleUpdate = (event) => {\r\n        this.setState({text : event.target.value, loading:false})\r\n    }\r\n\r\n    handleEditVisibility = () => {\r\n        console.log(\"HERE\")\r\n        this.setState({editVisible : !this.state.editVisible})\r\n    }\r\n\r\n    handleDelete = () => {\r\n        this.props.comments.splice(this.props.index, 1)\r\n        let requestBody = {\r\n            query : `\r\n                mutation {\r\n                    deleteComment(playlist_id: \"${this.props.playlist_id}\", user_id: \"${this.props.user_id}\", index: ${this.props.index}) {\r\n                        comments {\r\n                            _id\r\n                            user_id\r\n                            message\r\n                            replies {\r\n                                message\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n                `\r\n        }\r\n\r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error('Playlist not found');\r\n            return res.json()\r\n        })\r\n        .then(data => {\r\n            this.props.updateComments(data.data.deleteComment.comments)\r\n            //this.setState({comments:data.data.deleteComment.comments})\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n\r\n    }\r\n\r\n    handleEditSubmit = () => {\r\n        console.log(this.state.text)\r\n        let requestBody = {\r\n            query: `\r\n            mutation {\r\n                editComment(user_id: \"${this.props.user_id}\", message: \"${this.state.text}\", playlist_id: \"${this.props.playlist_id}\", comment_index : ${this.props.index}){\r\n                    comments {\r\n                        _id\r\n                        user_id\r\n                        message \r\n                        date\r\n                        replies {\r\n                            user_id\r\n                            message\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        }\r\n\r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error(res);\r\n            return res.json()\r\n        })\r\n        .then(data => {\r\n            console.log(data)\r\n            this.handleEditVisibility()\r\n            this.props.updateComments(data.data.editComment.comments)\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n\r\n    }\r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n        return (  \r\n            <>\r\n            {/* Username */}\r\n            <div className=\"row username-row\">\r\n                {/* <div className=\"\">\r\n                    <img alt = \"playlist_img\" src={this.props.profile_img} class=\"user_picture\"></img>\r\n                </div> */}\r\n                {this.state.username}\r\n                {this.state.username === this.props.sessionUser ?\r\n                    <button onClick ={this.handleEditVisibility} className = \"delete-button\"> Edit </button>\r\n                    : null\r\n                }\r\n            </div>\r\n\r\n            {/* Comment */}\r\n            <div className=\"row comment-row\">\r\n                {!this.state.editVisible ? <>{this.props.message} </>\r\n                    : \r\n                    <>\r\n                        <textarea id = \"comment-input\" className=\"comment-text\" type=\"text\" placeholder = {this.props.message} onChange = {this.handleUpdate}/>\r\n                        <button className = \"comment-button\" onClick = {this.handleEditSubmit}> EDIT </button>\r\n                        <button className = \"comment-button\" onClick = {this.handleEditVisibility} style = {{color: \"black\", backgroundColor: \"white\", border:\"none\"}}> CANCEL </button>\r\n                        <button className = \"comment-button\" onClick = {this.handleDelete}> DELETE </button>\r\n                    </>\r\n                }\r\n                \r\n            </div>\r\n        \r\n            {/* Reply Button */}\r\n            <div className=\"row replies-row\">\r\n                <Reply commentIndex = {this.props.index} user_id = {this.props.user_id}  playlist_id = {this.props.playlist_id} stateChange = {this.props.stateChange}/>\r\n\r\n            </div>\r\n            <div className=\"row replies-row\">\r\n\r\n                {this.props.replies.length > 0 ? \r\n                <ShowReplies replies = {this.props.replies}/> : null\r\n                }\r\n            </div>\r\n        </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default UserComment;","/** COMMENTS\r\n * Component within Playlist\r\n * Handles displaying comments \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport Comment from './Comment.js'\r\nimport UserComment from './UserComment.js'\r\nimport './Comments.css'\r\n\r\nclass Comments extends Component {\r\n    state = {\r\n        comments : this.props.comments,\r\n        editCommentVisible : false,\r\n    }  \r\n\r\n    stateChange = (comment) => {\r\n\r\n        this.setState({comments : comment}, function () {\r\n            console.log(this.state.comments)\r\n        })\r\n    }\r\n\r\n    render() {\r\n    \r\n        let comments = this.state.comments.map(function(elem, i){\r\n            // One comment, i is index \r\n\r\n            return (\r\n                    <div key = {elem.user_id + \" \" + i.toString()}  className=\"container result-container\">\r\n                        <UserComment user_id = {elem.user_id} \r\n                            message = {elem.message} \r\n                            index = {i} \r\n                            replies = {elem.replies} \r\n                            sessionUser = {this.props.username} \r\n                            playlist_id = {this.props.playlist_id} \r\n                            stateChange = {this.stateChange}\r\n                            updateComments = {this.updateComments}\r\n                            comments = {this.state.comments}\r\n                        />\r\n                    </div>\r\n            )\r\n        }, this)\r\n        return (\r\n            <>\r\n                <div className=\"container comments-container\">\r\n                    <div className=\"row\">\r\n                    <Comment playlist_id = {this.props.playlist_id} username = {this.props.username} stateChange = {this.stateChange}/>\r\n                    </div>\r\n                    \r\n                    {comments}\r\n                </div>\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateComments = (comments) => {\r\n        this.setState({comments:comments})\r\n    } \r\n}\r\n \r\nexport default Comments;","/** PLAYLIST SETTING\r\n * Component within Playlist \r\n * Used to handle editing the playlist \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport './PlaylistSetting.css'\r\nimport Button from '@material-ui/core/Button'\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\n// For Rendering the Settings section of a playlist\r\n\r\nconst useStyle = theme => ({\r\n    privacyButton :{\r\n        background: \"#696969\",\r\n        '&:focus': {\r\n            outline: \"none\"\r\n        },\r\n\r\n        backgroundColor: '#FFF',\r\n        color: '#FFF',\r\n        \"&:hover\": {\r\n            backgroundColor: \"#696969\"\r\n          }\r\n    },\r\n    editSaveButton :{\r\n        '&:focus': {\r\n            outline: \"none\"\r\n        },\r\n\r\n        \"&:hover\": {\r\n            backgroundColor: \"#696969\"\r\n          }\r\n    },\r\n})\r\nclass PlaylistSetting extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.onChange=  this.props.onChange\r\n    }\r\n    state = { \r\n        playlist : this.props.playlist,\r\n        save : false,\r\n        edit: this.props.editing,\r\n        public:this.props.playlist.public,\r\n        playlist_img: this.props.playlist.playlist_img,\r\n        deleteConfirmVisible: false\r\n    }\r\n\r\n    // Changes the edit status \r\n    handleEditClick = () => {\r\n        this.setState({edit: !this.state.edit}, () =>{\r\n            this.onChange(\"edit-status\" , this.state.edit)\r\n        })\r\n\r\n        // this.changeEdit()\r\n        \r\n    }\r\n\r\n    // Save Changes \r\n    handleSave = () => {\r\n        this.setState({edit: !this.state.edit}, () =>{\r\n            this.onChange(\"edit-status\" , this.state.edit)\r\n            this.onChange(\"save\", null)\r\n        })\r\n    }\r\n\r\n    // Cancel changes \r\n    handleCancel = () => {\r\n        this.setState({edit: !this.state.edit}, () =>{\r\n            this.onChange(\"edit-status\" , this.state.edit)\r\n            this.onChange(\"revert\", null)\r\n        })\r\n        \r\n    }\r\n    // Change privacy setting of the playlist (Edit mode)\r\n    // NOTE: Does not update privacy setting in the database \r\n    changePrivacy = () => {\r\n        let playlist = this.state.playlist\r\n        playlist.public = !this.state.public \r\n        this.setState({public: !this.state.public})\r\n    }\r\n\r\n    changeName = (event) => {\r\n        let playlist = this.state.playlist\r\n        playlist.name = event.target.value \r\n        this.setState({playlist: playlist})\r\n    }\r\n    confirmDelete = () => {\r\n        this.setState({deleteConfirmVisible: true})\r\n    }\r\n    deleteConfirmVisibleClose = () => {\r\n        this.setState({deleteConfirmVisible: false})\r\n    }\r\n    handleDelete = () => {\r\n        // this.setInvisible()\r\n        // Delete the playlist \r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    deletePlaylist (id : \"${this.props.playlist_id}\") {\r\n                        _id \r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        // Delete the playlist \r\n        fetch('https://easytunes.herokuapp.com/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('Failed');\r\n                return res.json()\r\n            })\r\n            .then(result => {\r\n               this.props.history.push('/' + this.props.username)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    Post = (e) => {\r\n        e.preventDefault();\r\n        const file = document.getElementById(\"photo-input\").files;\r\n        const formData = new FormData();\r\n\r\n        formData.append(\"img\", file[0]);\r\n\r\n        fetch(\"https://easytunes.herokuapp.com/\", {\r\n            method: \"POST\",\r\n            body: formData\r\n            }).then(r => {\r\n            console.log(r);\r\n        });\r\n        let playlist = this.state.playlist\r\n        playlist.playlist_img = `https://easytunes.herokuapp.com/image_file/${file[0].name}`\r\n        this.setState({playlist : playlist})\r\n        console.log(file[0]);\r\n    }\r\n\r\n    render(){\r\n        const {classes} = this.props\r\n  \r\n        return (\r\n            <>\r\n                <div className=\"settings-row\">\r\n                    {this.state.edit ? \r\n                    <Button onClick={this.changePrivacy} className = {classes.privacyButton}> {this.state.public ? \"Public\" : \"Private\"} </Button>\r\n               \r\n                    : \r\n                    null\r\n                    }\r\n                    \r\n                    \r\n                </div>\r\n                <div className=\"settings-row\">\r\n                    Mixtape Name \r\n                    <input type=\"text\" disabled = {!this.state.edit} defaultValue={this.state.playlist.name} required onChange={this.changeName}/>\r\n                </div>\r\n                {this.state.edit ?\r\n                <div className='photo_input'>\r\n                    Upload Mixtape Photo\r\n                    <div className=\"\">\r\n                        <div className=\"custom-file\">\r\n                            <input\r\n                                type=\"file\"\r\n                                id=\"photo-input\"\r\n                                accept=\"image/*\"\r\n                            />\r\n                        </div>    \r\n                        </div>\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={this.Post}>\r\n                                Upload\r\n                            </button>\r\n                            <img\r\n                                id=\"img\"\r\n                                style={{\r\n                                    display: \"block\",\r\n                                    height: \"200px\",\r\n                                    width: \"200px\",\r\n                                    \"margin-top\": \"5px\",\r\n                                }}\r\n                                src={this.state.playlist.playlist_img}\r\n                            >\r\n                            </img>\r\n                        </div>\r\n                : null\r\n                }\r\n\r\n                <div className=\"settings-row\">\r\n                    {this.state.edit? \r\n                        <>\r\n                        <button className =\"save-btn\" onClick={this.handleSave}> Save </button>\r\n                        <button className =\"cancel-btn\" onClick={this.handleCancel}> Cancel </button>\r\n                        </>\r\n                        :\r\n                        <button className =\"save-btn\" onClick = {this.handleEditClick}>Edit </button>\r\n                    }\r\n                    <button className=\"delete-btn\" onClick = {this.confirmDelete}>Delete</button>\r\n                </div>\r\n\r\n                {this.state.deleteConfirmVisible ? \r\n                    <Dialog\r\n                    open={this.state.deleteConfirmVisible}\r\n                    keepMounted\r\n                    onClose={this.deleteConfirmVisibleClose}\r\n                    aria-labelledby=\"alert-dialog-slide-title\"\r\n                    aria-describedby=\"alert-dialog-slide-description\"\r\n                    fullWidth={true}\r\n                    maxWidth = {'sm'}\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-slide-title\">{\"Delete Mixtape: \" + this.state.playlist.name + \"?\"}</DialogTitle>\r\n\r\n                    <DialogActions>\r\n                    <Button  onClick={this.handleDelete} color=\"primary\">\r\n                        Delete\r\n                    </Button>\r\n                    <Button onClick={this.deleteConfirmVisibleClose} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n                </Dialog>\r\n                : null\r\n\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyle)(PlaylistSetting);","/** PLAYLIST\r\n * Handles the page for a playlist \r\n */\r\n\r\nimport React, { Component} from 'react'\r\nimport { AiFillHeart, AiFillEyeInvisible, AiFillEye} from 'react-icons/ai'\r\nimport { BiGitRepoForked } from 'react-icons/bi'\r\nimport Songlist from './Songlist/Songlist'\r\nimport Comments from './Comments/Comments'\r\nimport PlaylistSetting from './PlaylistSetting/PlaylistSetting'\r\nimport {AiOutlineCheckCircle, AiOutlineCloseCircle} from 'react-icons/ai'\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt'\r\nimport ThumbUpAltOutlinedIcon from '@material-ui/icons/ThumbUpAltOutlined'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Container from '@material-ui/core/Container'\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport './Playlist.css'\r\nimport {FaRegPauseCircle, FaRegPlayCircle} from 'react-icons/fa'\r\nimport { FaShare } from 'react-icons/fa'\r\n\r\n\r\nconst useStyle = theme => ({\r\n    buttonFocus : {\r\n        borderRadius: \"0\",\r\n        width: \"100%\",\r\n        strokeLinecap: \"round\",\r\n        border: \"none\",\r\n        '&:focus' :{\r\n            outline: \"none\"\r\n        },\r\n        borderBottom : \"2px solid #004CB2\",\r\n        fontWeight: \"bold\"\r\n    },\r\n    buttonNotFocus :{\r\n        width: \"100%\",\r\n        border: \"none\",\r\n        '&:focus' :{\r\n            outline: \"none\"\r\n        },\r\n    },\r\n    container: {\r\n        padding : theme.spacing(0,0,0,0)\r\n    }\r\n})\r\nclass Playlist extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.nameEl = React.createRef()\r\n    }\r\n    state = {\r\n        songsVisible : true,\r\n        commentsVisible : false,\r\n        settingsVisible : false,\r\n        playlistInfo : null,\r\n        playlistId : this.props.match.params.playlistid,\r\n        username : this.props.match.params.username,\r\n        loading: true,\r\n        editing: false,\r\n        forkPopupVisible: false,\r\n        error : \"\",\r\n        liked: false \r\n    }\r\n\r\n    // Get the playlist \r\n    getPlaylist = () => {\r\n        this.setState({loading : true})\r\n        console.log(this.state.playlistId)\r\n        let requestBody = {\r\n            query : `\r\n                query {\r\n                    getPlaylistByID (id : \"${this.state.playlistId}\"){\r\n                        name \r\n                        username \r\n                        date_created\r\n                        total_duration \r\n                        playlist_img\r\n                        likes \r\n                        public \r\n                        comments {\r\n                            _id\r\n                            user_id\r\n                            date\r\n                            message\r\n                            replies {\r\n                                _id\r\n                                user_id\r\n                                date\r\n                                message\r\n                            }\r\n                        }\r\n                        songs {\r\n                            song_id \r\n                            song_uri\r\n                            name \r\n                            artists\r\n                            duration\r\n                            song_img\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch('https://easytunes.herokuapp.com/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('Playlist not found');\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                const playlist = data.data.getPlaylistByID\r\n                console.log(data)\r\n                let requestBody = {\r\n                    query: `\r\n                        query {\r\n                            getUserByUsername (username : \"${this.props.username}\") {\r\n                                user {\r\n                                    liked_playlists{ \r\n                                        playlist_id\r\n                                        name\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n                \r\n                fetch('https://easytunes.herokuapp.com/graphql', {\r\n                            method: 'POST',\r\n                            body: JSON.stringify(requestBody),\r\n                            headers: {\r\n                                'content-type': 'application/json'\r\n                            }\r\n                            })\r\n                            .then(res => {\r\n                                if (res.status !== 200 && res.status !== 201) \r\n                                    throw new Error('Failed');\r\n                                return res.json()\r\n                            })\r\n                            .then(data => {\r\n                                data = data.data.getUserByUsername.user\r\n                                console.log(data.liked_playlists)\r\n                                let liked = false \r\n                                data.liked_playlists.forEach(playlist => {\r\n                                    if (playlist.playlist_id === this.state.playlistId)\r\n                                        liked = true \r\n                                    \r\n                                })\r\n\r\n                                this.setState({\r\n                                    playlistInfo: playlist,\r\n                                    loading: false,\r\n                                    liked: liked\r\n                                })\r\n        \r\n                            })\r\n                            .catch(err => {\r\n                                console.log(err);\r\n                            });\r\n\r\n                \r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if (!this.props.username)\r\n            this.props.history.push('/login')\r\n        this.getPlaylist()\r\n    }\r\n\r\n    forkPlaylist = () => {\r\n        console.log(this.state.username)\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername (username : \"${this.state.username}\") {\r\n                        user {\r\n                            _id\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        //find user id\r\n        fetch('https://easytunes.herokuapp.com/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('Failed');\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                data = data.data.getUserByUsername.user._id\r\n                let songs = []\r\n                this.state.playlistInfo.songs.forEach(song => {\r\n                    songs.push(JSON.stringify({\r\n                        song_id: song.song_id,\r\n                        name: song.name,\r\n                        uploaded: song.uploaded,\r\n                        artists: song.artists, \r\n                        duration: song.duration,\r\n                        song_img: song.song_img\r\n                    }))\r\n                })\r\n                let name =this.nameEl.current.children[1].children[0].value.trim()\r\n                requestBody = {\r\n                    query: `\r\n                        mutation {\r\n                            forkPlaylist (username : \"${this.props.username}\", playlist_id : \"${this.state.playlistId}\", name: \"${name}\") {\r\n                                _id \r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n                console.log(\"requesting\")\r\n                // Create the playlist \r\n                fetch('https://easytunes.herokuapp.com/graphql', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(requestBody),\r\n                    headers: {\r\n                        'content-type': 'application/json'\r\n                    }\r\n                    })\r\n                    .then(res => {\r\n                        if (res.status !== 200 && res.status !== 201) \r\n                            throw new Error('Failed');\r\n                        return res.json()\r\n                    })\r\n                    .then (data => {\r\n                        console.log(data)\r\n                        if (data.errors)\r\n                            this.setState({error: data.errors[0].message})\r\n                        else {\r\n                            this.setForkInvisible()\r\n                    }\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                    });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    setForkVisible = () => {\r\n        this.setState({forkPopupVisible : true})\r\n    }\r\n\r\n    setForkInvisible = () => {\r\n        this.setState({forkPopupVisible : false})\r\n    }\r\n\r\n\r\n    handleLike = () => {\r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    like_unlikePlaylist(username: \"${this.props.username}\", playlist_id: \"${this.state.playlistId}\", playlist_name: \"${this.state.playlistInfo.name}\"){\r\n                        _id\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch('https://easytunes.herokuapp.com/graphql', {\r\n                            method: 'POST',\r\n                            body: JSON.stringify(requestBody),\r\n                            headers: {\r\n                                'content-type': 'application/json'\r\n                            }\r\n                            })\r\n                            .then(res => {\r\n                                if (res.status !== 200 && res.status !== 201) \r\n                                    throw new Error('Failed');\r\n                                return res.json()\r\n                            })\r\n                            .then(data => {\r\n                                let playlist = this.state.playlistInfo\r\n                                if (this.state.liked)\r\n                                    playlist.likes -= 1\r\n                                else \r\n                                    playlist.likes += 1\r\n                                \r\n                                this.setState({liked: !this.state.liked, playlist: playlist})\r\n        \r\n                            })\r\n                            .catch(err => {\r\n                                console.log(err);\r\n                            });\r\n    }\r\n\r\n    render() { \r\n\r\n            if (this.state.loading)\r\n                return (<> </>);\r\n                const {classes} = this.props\r\n            function User ({username, history}){\r\n                function toUserProfile(){\r\n                    history.history.push('/' + username)\r\n                }\r\n\r\n                return (\r\n                    <button className=\"user-btn\" onClick = {toUserProfile}> {username} </button>\r\n                )\r\n            }\r\n            return ( \r\n                <div className=\"container-fluid playlist-container playlist\">\r\n\r\n\r\n                    <div className=\"container-fluid playlist-data-container\">\r\n                        {/* Information about the Playlist */}\r\n                        <div className=\"information-row\">\r\n                            <div className=\"col text-center align-self-center playlist-col\">\r\n                                <div className=\"likes\">\r\n                                    {this.state.liked ? \r\n                                        <ThumbUpAltIcon fontSize =\"large\" onClick = {this.handleLike}/>\r\n                                     : \r\n                                        <ThumbUpAltOutlinedIcon onClick = {this.handleLike} fontSize =\"large\" />} \r\n                                    \r\n                                    {this.state.playlistInfo.likes} \r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col text-center align-self-left playlist-col\">\r\n                                <div className=\"col\">\r\n                                    <img alt=\"playlist_img\" src={this.state.playlistInfo.playlist_img} class=\"song_picture\"></img>\r\n                                </div>\r\n                                <h2>{this.state.playlistInfo.name} {this.state.playlistInfo.public ? <AiFillEye size={24}/> : <AiFillEyeInvisible size={24}/>}</h2>\r\n\r\n                                <h5> Mixtape By: <User username = {this.state.playlistInfo.username} history = {this.props} /> </h5>\r\n                                <div>{this.state.playlistInfo.total_duration < 3600 ? \"0 hr \" + (this.state.playlistInfo.total_duration < 600 ? \"0\" + Math.floor(this.state.playlistInfo.total_duration/60) + \" min\": Math.floor(this.state.playlistInfo.total_duration/60) + \" min\") :\r\n                (Math.floor(this.state.playlistInfo.total_duration/3600) + \" hr \" + (this.state.playlistInfo.total_duration%3600 < 600 ? \"0\" + Math.floor(this.state.playlistInfo.total_duration/60) + \" min\": Math.floor(this.state.playlistInfo.total_duration/60) + \" min\"))}</div>\r\n                            \r\n                            </div>\r\n                            {/* { this.state.playlistInfo.songs.length > 0 ?\r\n                                <>\r\n                                    { this.props.play && this.props.current_playlist.name === this.state.playlistInfo.name? \r\n                                        <FaRegPauseCircle onClick = {this.handlePlay} size = {30}/>\r\n                                        : <FaRegPlayCircle onClick = {this.handlePlay} size = {30}/>\r\n                                    }\r\n                                </>\r\n                        : null\r\n                    } */}\r\n                            <div className=\"col text-center align-self-center playlist-col\">\r\n                                <div>\r\n                                     { this.state.playlistInfo.songs.length > 0 ?\r\n                                <>\r\n                                    { this.props.play && this.props.current_playlist.name === this.state.playlistInfo.name? \r\n                                        <FaRegPauseCircle className = \"playlist-play-btn text-center align-self-center\" onClick = {this.handlePlay} size = {34}/>\r\n                                        : <FaRegPlayCircle className = \"playlist-play-btn text-center align-self-center\" onClick = {this.handlePlay} size = {34}/>\r\n                                    }\r\n                                </>\r\n                                : null\r\n                                }\r\n                                {/* <FaRegPauseCircle className = \"playlist-play-btn\" onClick = {this.handlePlay} size = {30}/> */}\r\n                                    <FaShare size={34} className=\"share\" onClick={() => {navigator.clipboard.writeText(window.location.href)}}/> \r\n\r\n                                    \r\n                                    <BiGitRepoForked size={34} className=\"fork\" onClick={this.setForkVisible}/>\r\n                                </div>\r\n                            </div>\r\n                            {this.state.forkPopupVisible ? \r\n                 <Dialog\r\n                 open={this.state.forkPopupVisible}\r\n                 keepMounted\r\n                 onClose={this.setForkInvisible}\r\n                 aria-labelledby=\"alert-dialog-slide-title\"\r\n                 aria-describedby=\"alert-dialog-slide-description\"\r\n                 fullWidth={true}\r\n                 maxWidth = {'sm'}\r\n             >\r\n                 <DialogTitle id=\"alert-dialog-slide-title\">{\"Fork Mixtape: \" + this.state.playlistInfo.name}</DialogTitle>\r\n                 <DialogContent>\r\n                 {this.state.error ?\r\n                     <DialogContentText> {this.state.error} </DialogContentText> : null\r\n                 }\r\n                 <TextField\r\n                     autoFocus\r\n                     margin=\"dense\"\r\n                     id=\"name\"\r\n                     label=\"Mixtape Name\"\r\n                     type=\"text\"\r\n                     fullWidth\r\n                     ref = {this.nameEl}\r\n                 />\r\n                 </DialogContent>\r\n                 <DialogActions>\r\n                 <Button  onClick={this.forkPlaylist} color=\"primary\">\r\n                     Fork\r\n                 </Button>\r\n                 <Button onClick={this.setForkInvisible} color=\"primary\">\r\n                     Close\r\n                 </Button>\r\n             </DialogActions>\r\n             </Dialog>\r\n\r\n                                :\r\n                                null\r\n                                }\r\n   \r\n                        </div>\r\n\r\n                        {/* Songs, Likes and Comments, Settings Navbar */}\r\n                        {this.state.playlistInfo.username === this.props.username ? \r\n                            <div className=\"navigation-row\">\r\n                                <Container className = {classes.container}> \r\n                                <Grid container>\r\n                                    <Grid xs item align=\"center\">\r\n                                        <Button id = \"songs-btn\" onClick = {this.changeView} className = {this.state.songsVisible ? classes.buttonFocus : classes.buttonNotFocus}> \r\n                                            Songs\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid xs item align=\"center\">\r\n                                        <Button id = \"comments-btn\" onClick = {this.changeView} className = {this.state.commentsVisible? classes.buttonFocus : classes.buttonNotFocus}> \r\n                                            Comments\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid xs item align=\"center\">\r\n                                        <Button id = \"settings-btn\" onClick = {this.changeView} className = {this.state.settingsVisible ? classes.buttonFocus : classes.buttonNotFocus}> \r\n                                           Settings\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Container>\r\n                            </div> : \r\n                            <div className=\"navigation-row\">\r\n                            <Container className = {classes.container}> \r\n                            <Grid container>\r\n                                <Grid xs item align=\"center\">\r\n                                    <Button id = \"songs-btn\" onClick = {this.changeView} className = {this.state.songsVisible ? classes.buttonFocus : classes.buttonNotFocus}> \r\n                                        Songs\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid xs item align=\"center\">\r\n                                    <Button id = \"comments-btn\" onClick = {this.changeView} className = {this.state.commentsVisible? classes.buttonFocus : classes.buttonNotFocus}> \r\n                                        Comments\r\n                                    </Button>\r\n                                </Grid>\r\n    \r\n                            </Grid>\r\n                        </Container>\r\n                        </div> \r\n    \r\n                        }\r\n\r\n                        {/* Render \"Songs\", \"Comments\", \"Settings\" */}\r\n                        {this.state.songsVisible ? <Songlist \r\n                                                        playlist_id = {this.state.playlistId} \r\n                                                        songs = {this.state.playlistInfo.songs} \r\n                                                        editing= {this.state.editing}\r\n                                                        play = {this.props.play}\r\n                                                        onPlayChange = {this.props.onPlayChange}\r\n                                                        onPlaylistChange = {this.props.onPlaylistChange}\r\n                                                        onSongChange = {this.props.onSongChange}\r\n                                                        current_playlist = {this.props.current_playlist}\r\n                                                        current_song = {this.props.current_song}\r\n                                                    /> \r\n                        : null}\r\n                        {this.state.commentsVisible ? <Comments comments = {this.state.playlistInfo.comments} username = {this.props.username} playlist_id = {this.state.playlistId}  /> : null}\r\n                        {this.state.settingsVisible ? \r\n                            <PlaylistSetting username = {this.props.username} \r\n                                    history = {this.props.history}\r\n                                    playlist_id = {this.state.playlistId} \r\n                                    playlist = {this.state.playlistInfo} \r\n                                    editing= {this.state.editing} \r\n                                    onChange = {this.onChange}/> : null}\r\n                        <div className = \"row blank-space\"> </div>\r\n                    </div>\r\n  \r\n                </div>\r\n                \r\n            );\r\n        }\r\n        handlePlay = async () => {\r\n            // If pausing current playlist \r\n            if (this.props.current_playlist !== null && this.props.current_playlist.name === this.state.playlistInfo.name)\r\n                this.props.onPlayChange(!this.props.play) \r\n            // If changing playlist \r\n            else {\r\n                console.log(\"Change playlist\")\r\n                let playlists = this.state.playlistInfo\r\n                playlists[\"_id\"] = this.state.playlistId\r\n                this.props.onPlaylistChange(playlists, this.state.playlistInfo.songs[0])\r\n            }\r\n                \r\n        }\r\n        // Update the playlist after edit \r\n        onChange = async (type, obj) => {\r\n            if (type === \"playlist\") {\r\n                this.setState({playlist: obj})\r\n            }\r\n            else if (type === \"revert\"){\r\n                this.setState({\r\n                    songsVisible : true,\r\n                    commentsVisible : false,\r\n                    settingsVisible : false,\r\n                })\r\n               this.getPlaylist()\r\n            }\r\n            else if (type === \"save\"){\r\n                this.updatePrivacy()\r\n                this.updateName()\r\n                this.updateImg()\r\n                console.log(this.state.playlistId)\r\n                await this.removeSongs()\r\n                console.log(this.state.playlistInfo.songs)\r\n                for(let i = 0; i < this.state.playlistInfo.songs.length; i++)\r\n                    await this.addSong(this.state.playlistInfo.songs[i])\r\n            }\r\n            else{\r\n                this.setState({editing: obj})\r\n            }\r\n\r\n\r\n       \r\n        }\r\n\r\n        updatePrivacy = () => {\r\n            // Set Public/Private status \r\n            let playlist = this.state.playlistInfo\r\n            let requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changePlaylistPrivacy(id: \"${this.state.playlistId}\", privacy: ${playlist.public}){\r\n                            _id \r\n                        }\r\n                    }\r\n                `\r\n            }\r\n            this.fetch(requestBody)\r\n        }\r\n\r\n        updateName = () => {\r\n            let playlist = this.state.playlistInfo\r\n            let requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changePlaylistName(id: \"${this.state.playlistId}\", name: \"${playlist.name}\"){\r\n                            _id \r\n                        }\r\n                    }\r\n                `\r\n            }\r\n\r\n            this.fetch(requestBody)\r\n        }\r\n        updateImg = () => {\r\n            let playlist = this.state.playlistInfo\r\n            let requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changePlaylistImg(id: \"${this.state.playlistId}\", img: \"${playlist.playlist_img}\"){\r\n                            _id \r\n                        }\r\n                    }\r\n                `\r\n            }\r\n\r\n            this.fetch(requestBody)\r\n        }\r\n\r\n        removeSongs = () => {\r\n            return new Promise((resolve, reject) => {\r\n                let requestBody = {\r\n                    query: `\r\n                        mutation {\r\n                            removeAllSongs(id: \"${this.state.playlistId}\"){\r\n                                _id \r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n                fetch('https://easytunes.herokuapp.com/graphql', {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }\r\n                })\r\n                .then(res => {\r\n                    if (res.status !== 200 && res.status !== 201) \r\n                        throw new Error('Playlist not found');\r\n                    return res.json()\r\n                })\r\n                .then(data => {\r\n                    resolve(data)\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n             });\r\n        }\r\n\r\n        addSong = (song) => {\r\n            return new Promise((resolve, reject) => {\r\n                let artists = \"\"\r\n                artists += song.artists.map(artist => {\r\n                    return \"\\n\" + artist\r\n                })\r\n    \r\n                let requestBody = {\r\n                    query: `\r\n                        mutation {\r\n                            addSong(songInput: {_id: \"${song.song_id}\", name: \"${song.name}\", artists: \"\"\"${artists}\"\"\", uploaded: false, duration: ${song.duration}, img: \"${song.song_img}\",uri: \"${song.song_uri}\"}, playlist_id: \"${this.state.playlistId}\"){\r\n                                _id\r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n                fetch('https://easytunes.herokuapp.com/graphql', {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }\r\n                })\r\n                .then(res => {\r\n                    if (res.status !== 200 && res.status !== 201) \r\n                        throw new Error('Playlist not found');\r\n                    return res.json()\r\n                })\r\n                .then(data => {\r\n                    resolve(data)\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n             });\r\n        }\r\n        fetch = (requestBody) => {\r\n            fetch('https://easytunes.herokuapp.com/graphql', {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }\r\n                })\r\n                .then(res => {\r\n                    if (res.status !== 200 && res.status !== 201) \r\n                        throw new Error('Playlist not found');\r\n                    return res.json()\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n\r\n        }\r\n\r\n        changeView = (event) => {\r\n            console.log(event.target)\r\n            if (event.currentTarget.id === 'songs-btn'){\r\n                this.setState({songsVisible : true, commentsVisible:false, settingsVisible:false})\r\n               // this.props.history.push('/' + this.state.user.username+ \"/followers\")\r\n            }\r\n            else if (event.currentTarget.id === 'comments-btn'){\r\n                this.setState({songsVisible : false, commentsVisible:true, settingsVisible:false})\r\n               // this.props.history.push('/' + this.state.user.username + \"/following\")\r\n            }\r\n            else {\r\n                this.setState({songsVisible : false, commentsVisible:false, settingsVisible:true})\r\n               // this.props.history.push('/' + this.state.user.username + \"/requests\")\r\n            }       \r\n        }\r\n\r\n}\r\n \r\nexport default withStyles(useStyle)(Playlist);","import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nconst useStyles = theme => ({\r\n  root: {\r\n    minHeight: '100vh',\r\n    backgroundImage: `url(${process.env.PUBLIC_URL + '../../assets/home.jpg' })`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: 'cover',\r\n    flexGrow: 1,\r\n    justifyContent: 'center'\r\n  },\r\n  \r\n  hero: {\r\n    height: \"100vh\",\r\n    background: \"none\",\r\n    position: \"relative\",\r\n    display: 'flex',\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    color: \"black\",\r\n    fontSize: \"3rem\",\r\n    \r\n  },\r\n\r\n  title: {\r\n    fontSize: \"3rem\",\r\n    color: \"black\",\r\n    display: 'flex',\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  \r\n});\r\n\r\nclass Home extends Component {\r\n  state = {  }\r\n  componentDidMount = () => {\r\n    if (this.props.username)\r\n      this.props.history.push('/home')\r\n  }\r\n  render() { \r\n    const {classes} = this.props\r\n    return (  \r\n      <div className={classes.root}>\r\n      <Navbar />\r\n      <Box className={classes.hero}>\r\n        <Box textAlign='center'>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          Follow Music Mixtapes\r\n        </Typography>\r\n        <Typography className={classes.title} color=\"textSecondary\">\r\n          Join Conversations\r\n        </Typography>\r\n        <Link to=\"/register\">\r\n        <Button variant=\"contained\" color=\"secondary\" >\r\n          Get Started\r\n        </Button>\r\n        </Link>\r\n        </Box>\r\n      </Box>\r\n      \r\n\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(Home);","/** PLAYLIST BUTTON\r\n * Component used within playlist and saved playlists\r\n * Handles one playlist in the playlists page \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport {AiFillHeart, AiFillEyeInvisible, AiFillEye} from 'react-icons/ai'\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport {RiPlayListLine} from 'react-icons/ri'\r\nimport {AiOutlineDelete, AiOutlineCheckCircle, AiOutlineCloseCircle} from 'react-icons/ai'\r\n// FaRegPauseCircle\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt'\r\nimport './HomeScreen.css'\r\n\r\nconst useStyle = theme => ({\r\n    deleteBtn :{\r\n        '&:focus':{\r\n            outline:\"none\"\r\n        }\r\n    }\r\n})\r\nclass Home_Playlist_Button extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.setPlaylists = this.props.setPlaylists;\r\n    }\r\n    \r\n    state = { \r\n        playlist: this.props.playlist,\r\n        history: this.props.history\r\n    }\r\n\r\n    // Go to the playlist page \r\n    toPlaylist = () => {\r\n        this.state.history.push('/' + encodeURIComponent(this.state.playlist.username) + '/mixtape='+ this.state.playlist._id)\r\n    }\r\n       \r\n    render() { \r\n        const playlist = this.state.playlist \r\n        const {classes} = this.props\r\n        return (\r\n            <div className=\"playlist-row playlist-button\" onClick={this.toPlaylist}>\r\n<div className=\"card-content col s1\" >\r\n                        <img alt = \"playlist_img\" src={this.state.playlist.playlist_img} class=\"song_picture\"></img>\r\n                    </div>\r\n                    <div className='card-content col s3' onClick={this.toPlaylist}>\r\n                        <button><span className='card-title'>{this.state.playlist.name}</span></button>\r\n                        </div>\r\n                    <div className='card-content col s3' onClick={this.toPlaylist}> \r\n                        <span className='card-title'>{this.state.playlist.username}</span>\r\n                    </div>\r\n                    <div className='card-content col s1' onClick={this.toPlaylist}>\r\n                        <span className='card-title'>{this.state.playlist.likes}</span>\r\n                    </div>\r\n                    <div className='card-content col s3'>\r\n                        <span className='card-title'>\r\n                            {this.state.playlist.songs.length} {this.state.playlist.songs.length === 1 ? \"Song \" : \"Songs \"}\r\n                        </span>\r\n                        {\"- \"}\r\n                        <span className='card-title'>\r\n                            {this.state.playlist.total_duration < 3600 ? \"0 hr \" + (this.state.playlist.total_duration < 600 ? \"0\" + Math.floor(this.state.playlist.total_duration/60) + \" min\": Math.floor(this.state.playlist.total_duration/60) + \" min\") :\r\n                            (Math.floor(this.state.playlist.total_duration/3600) + \" hr \" + (this.state.playlist.total_duration%3600 < 600 ? \"0\" + Math.floor(this.state.playlist.total_duration/60) + \" min\": Math.floor(this.state.playlist.total_duration/60) + \" min\"))}\r\n                        </span>\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyle)(Home_Playlist_Button);","/** PLAYLISTS\r\n * Component within profile\r\n * Handles displaying the user's playlists \r\n */\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport Home_Playlist_Button from './Home_Playlist_Button'\r\nimport './HomeScreen.css'\r\n\r\n\r\nclass Home_Playlists extends Component {\r\n \r\n    state = { \r\n        playlists: this.props.playlists,\r\n    }\r\n\r\n    // Updates playlists \r\n    setPlaylists = (playlists) => {\r\n        this.setState({playlists : playlists})\r\n    }\r\n\r\n\r\n    render() { \r\n        let playlists = this.state.playlists.map(function(playlist) {\r\n            return (\r\n                <Home_Playlist_Button \r\n                    playlist = {playlist} \r\n                    key = {playlist._id} \r\n                    history = {this.props.history} \r\n                />\r\n            )\r\n        }, this)\r\n        return (\r\n            <>\r\n            {playlists}\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Home_Playlists;","/** HOME SCREEN\r\n * Handles displaying the home screen after logging in \r\n */\r\n\r\nimport React, {Component } from 'react'\r\nimport '../Navbar/Navbar.css';\r\nimport \"./HomeScreen.css\"\r\nimport Home_Playlists from './Home_Playlists.js'\r\n\r\nclass HomeScreen extends Component {\r\n\r\n    state = {\r\n      loading: true,\r\n      current_playlist: null,\r\n      current_song: null,\r\n      index: -1,\r\n      top_five: null\r\n    }\r\n\r\n    componentDidMount = () => {\r\n      if (!this.props.username)\r\n        this.props.history.push('/login')\r\n\r\n      this.setState({loading : true})\r\n      let current_song = null\r\n        let requestBody = {\r\n            query : `\r\n                query {\r\n                  getUserByUsername(username: \"${this.props.username}\"){\r\n                      user{\r\n                      current_song_id\r\n                      current_playlist_id\r\n                      }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch('https://easytunes.herokuapp.com/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('Playlist not found');\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                data = data.data.getUserByUsername.user\r\n\r\n                if (data.current_playlist_id == null){\r\n                  this.setState({\r\n                    loading: false\r\n                  })\r\n                }\r\n\r\n                else{\r\n                  requestBody = {\r\n                    query : `\r\n                        query {\r\n                          getPlaylistByID(id : \"${data.current_playlist_id}\"){\r\n                            _id\r\n                            name\r\n                            playlist_img\r\n                            total_duration\r\n                            songs {\r\n                              song_id\r\n                              name\r\n                              artists\r\n                              uploaded\r\n                              duration\r\n                              song_img\r\n                            }\r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n\r\n                current_song = data.current_song_id\r\n\r\n                fetch('https://easytunes.herokuapp.com/graphql', {\r\n                  method: 'POST',\r\n                  body: JSON.stringify(requestBody),\r\n                  headers: {\r\n                      'content-type': 'application/json'\r\n                  }\r\n                  })\r\n                  .then(res => {\r\n                      if (res.status !== 200 && res.status !== 201) \r\n                          throw new Error('Playlist not found');\r\n                      return res.json()\r\n                  })\r\n                  .then(data => {\r\n                      data = data.data.getPlaylistByID\r\n                      let index = -1\r\n                      data.songs.forEach((song,i) => {\r\n                        if (song.song_id === current_song)\r\n                          index = i\r\n                      })\r\n                      \r\n                      this.setState({\r\n                        current_playlist: data,\r\n                        current_song: current_song,\r\n                        index: index,\r\n                        loading: false\r\n                      })\r\n                  })\r\n                  .catch(err => {\r\n                      console.log(err);\r\n                  });\r\n                }\r\n        \r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n            console.log(\"loading top five\")\r\n            this.loadTopFive()\r\n    }\r\n\r\n    loadTopFive = () => {\r\n      console.log(\"loading top five 2\")\r\n      let requestBody = {\r\n        query : `\r\n            query {\r\n              topFivePlaylists{\r\n                _id \r\n                name \r\n                username\r\n                likes\r\n                total_duration \r\n                playlist_img\r\n                songs {\r\n                  song_id\r\n                  song_uri\r\n                  name\r\n                  artists\r\n                  song_img\r\n                }\r\n              }\r\n            }\r\n        `\r\n    }\r\n    fetch('https://easytunes.herokuapp.com/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }\r\n        })\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error('Playlist not found');\r\n            return res.json()\r\n        })\r\n        .then(data => {\r\n          console.log(\"loading top five 3\")\r\n          data = data.data.topFivePlaylists\r\n          console.log(data)\r\n          \r\n          this.setState({\r\n            top_five : data\r\n          })\r\n      })\r\n      .catch(err => {\r\n          console.log(err);\r\n      });\r\n    }\r\n    // Redirect to Home when home button is pressed \r\n    handleHome = () => {\r\n        const {history } = this.props;\r\n        history.replace('/home')\r\n    }\r\n    \r\n    getArtists = () => {\r\n      let artists = \"\"\r\n\r\n      this.props.current_song.artists.forEach((artist,i) => {\r\n          if (i === 0)\r\n            artists = artist \r\n          else \r\n            artists = artists + \", \" + artist\r\n      })\r\n      console.log(artists)\r\n      return artists\r\n    }\r\n    render() { \r\n\r\n      if (this.state.loading)\r\n        return (<></>)\r\n        console.log(this.props.access_token)\r\n    \r\n        return ( \r\n                \r\n                <div className=\"container-fluid  user-home-container\" ref={this.container}>\r\n                    {/* Home Button and Account Icon */}\r\n                        <div className=\"container-child\" style={{width: \"50%\", \"margin-left\": \"10px\"}}>\r\n                          <div className=\"row\">\r\n                              <h3 className=\"current-playlist\">Top Mixtapes</h3>\r\n                          </div>\r\n                          <div className='row'>\r\n                              <div className='col s1'></div>\r\n                              <div className='col s3'>Name</div>\r\n                              <div className='col s3'>Username</div>\r\n                              <div className='col s1'>Likes</div>\r\n                              <div className='col s3'>Songs</div>\r\n                              <div className='col s3'></div>\r\n                          </div>\r\n                          {this.state.top_five ?\r\n                          <Home_Playlists playlists = {this.state.top_five} \r\n                                history = {this.props.history}/>\r\n                                :\r\n                          null }\r\n                        \r\n                    </div>\r\n                    <div className=\"container-child\" style={{width: \"50%\"}}>\r\n                      <div className=\"container-fluid text-center\">\r\n                                <div className=\"current-playlist\">\r\n                                  CURRENT MIXTAPE\r\n                                </div>\r\n                                <div className=\"current-playlist-name\">\r\n                                  {this.props.current_playlist ? this.props.current_playlist.name : \"N/A\"}\r\n                                </div>\r\n                          </div>\r\n\r\n                      <div className=\"image-container\">\r\n                          <img src={this.props.current_playlist ? this.props.current_playlist.playlist_img : 'https://community.spotify.com/t5/image/serverpage/image-id/25294i2836BD1C1A31BDF2?v=1.0'}  alt=\"\" class=\"home_card\"/>\r\n                      </div>\r\n                      \r\n                      <div className=\"container-fluid text-center song-info-row\">\r\n                          <div className=\"song-name\">\r\n                              {this.props.current_playlist ? this.props.current_song.name : \"Song Name\"}\r\n                          </div>\r\n                          <div className=\"song-artist\">\r\n                              {this.props.current_playlist ? this.getArtists() : \"Artist\"}\r\n                          </div>\r\n                      </div>\r\n                    </div>\r\n                    {/* <SpotifyPlayer\r\n                      token= {this.props.access_token}\r\n                      uris={[\"spotify:track:2r6OAV3WsYtXuXjvJ1lIDi\", \"spotify:track:7qwt4xUIqQWCu1DJf96g2k\"]}\r\n                      style = {{width: \"100%\"}}\r\n                    /> */}\r\n                  \r\n                    \r\n                </div>\r\n          \r\n         );\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default HomeScreen;\r\n\r\n\r\n","/** ADD SONG\r\n * Component within Search List \r\n * Used to add a song into a playlist \r\n**/\r\n\r\nimport React, { Component } from 'react'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport TextField from '@material-ui/core/TextField'\r\nconst useStyles = theme => ({\r\n    dialog :{\r\n        minWidth: \"300px\"\r\n    },\r\n  dialogButton : {\r\n        width: \"100%\",\r\n        background: \"transparent\",\r\n        '&:focus' :{\r\n            outline: \"none\"\r\n        }\r\n  },\r\n  iconButton :{\r\n    width: \"100%\",\r\n    background: \"transparent\",\r\n    '&:focus' :{\r\n        outline: \"none\"\r\n    }\r\n  },\r\n  button : {\r\n    '&:focus' :{\r\n        outline: \"none\"\r\n    }\r\n  }\r\n})\r\nclass AddSong extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.anchorEl = null\r\n        this.nameEl = React.createRef()\r\n    }\r\n    state = { \r\n        playlists: null, \r\n        song: this.props.song,\r\n        username: this.props.username, \r\n        loading: true,\r\n        open: false,\r\n        createNew: false,\r\n        error : null\r\n    }\r\n\r\n    // Fetch the user's playlist \r\n    componentDidMount = () => {\r\n        this.setState({loading: true})\r\n\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.props.username}\"){\r\n                        playlists {\r\n                            _id\r\n                            name\r\n                            songs {\r\n                                song_id\r\n                                name\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch ('https://easytunes.herokuapp.com/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                this.setState({playlists : data.data.getUserByUsername.playlists, loading: false})\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    // Handle the visibility state of the user's playlists \r\n    changeVisible = () => {\r\n        this.setState({visible : !this.state.visible})\r\n    }\r\n    millisToSeconds(millis) {\r\n        const seconds = Math.floor(millis/1000);\r\n        return seconds\r\n    }\r\n\r\n    // Handle adding the song to a playlist \r\n    handleAdd = (event) => {\r\n        let artists = \"\"\r\n\r\n        artists += this.state.song.artists.map(artist => {\r\n            return \"\\n\" + artist.name\r\n        })\r\n        let songlength = this.millisToSeconds(this.state.song.duration_ms)\r\n        console.log(event.currentTarget)\r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    addSong(songInput: {_id: \"${this.state.song.id}\", name: \"${this.state.song.name}\", artists: \"\"\"${artists}\"\"\", uploaded: false, duration: ${songlength}, img: \"${this.state.song.album.images[0].url}\" , uri: \"${this.state.song.uri}\"}, playlist_id: \"${event.currentTarget.id}\"){\r\n                        _id\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch ('https://easytunes.herokuapp.com/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                this.handleClose()\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n    \r\n    createAndAdd = () => {\r\n        console.log(\"HERE\")\r\n        const name = this.nameEl.current.children[1].children[0].value.trim()\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.props.username}\"){\r\n                        user{\r\n                            _id\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch ('https://easytunes.herokuapp.com/graphql', {\r\n                        method: 'POST',\r\n                        body: JSON.stringify(requestBody),\r\n                        headers: {\r\n                            'content-type': 'application/json'\r\n                        }})\r\n                        .then(res => {\r\n                            if (res.status !== 200 && res.status !== 201)\r\n                                throw new Error ('Failed')\r\n                            return res.json()\r\n                        })\r\n                        .then(data => {\r\n                        \r\n                            requestBody = {\r\n                                    query: `\r\n                                        mutation {\r\n                                            createPlaylist (username : \"${this.props.username}\", name : \"${name}\", user_id: \"${data.data.getUserByUsername.user._id}\") {\r\n                                                _id \r\n                                            }\r\n                                        }\r\n                                    `\r\n                                }\r\n                            \r\n                                // Create the playlist \r\n                            fetch('https://easytunes.herokuapp.com/graphql', {\r\n                                        method: 'POST',\r\n                                        body: JSON.stringify(requestBody),\r\n                                        headers: {\r\n                                            'content-type': 'application/json'\r\n                                        }\r\n                                        })\r\n                                    .then(res => {\r\n                                        // if (res.status !== 200 && res.status !== 201) \r\n                                        //     throw new Error('Failed');\r\n                                        return res.json()\r\n                                    })\r\n                                    .then(result => {\r\n                                        // Update the playlists on the UI \r\n                              \r\n                                        if (result.errors)\r\n                                            this.setState({error: result.errors[0].message})\r\n                                        else {\r\n                                            let artists = \"\"\r\n\r\n                                            artists += this.state.song.artists.map(artist => {\r\n                                                return \"\\n\" + artist.name\r\n                                            })\r\n                                            let songlength = this.millisToSeconds(this.state.song.duration_ms)\r\n                                            let requestBody = {\r\n                                                query: `\r\n                                                    mutation {\r\n                                                        addSong(songInput: {_id: \"${this.state.song.id}\", \r\n                                                            name: \"${this.state.song.name}\", \r\n                                                            artists: \"\"\"${artists}\"\"\", \r\n                                                            uploaded: false, \r\n                                                            duration: ${songlength}, \r\n                                                            img: \"${this.state.song.album.images[0].url}\" , \r\n                                                            uri: \"${this.state.song.uri}\"}, \r\n                                                            playlist_id: \"${result.data.createPlaylist._id}\"){\r\n\r\n                                                            _id\r\n                                                            name \r\n                                                            songs {\r\n                                                                name \r\n                                                                song_id\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                `\r\n                                            }\r\n\r\n                                            fetch ('https://easytunes.herokuapp.com/graphql', {\r\n                                                method: 'POST',\r\n                                                body: JSON.stringify(requestBody),\r\n                                                headers: {\r\n                                                    'content-type': 'application/json'\r\n                                                }})\r\n                                                .then(res => {\r\n                                                    if (res.status !== 200 && res.status !== 201)\r\n                                                        throw new Error ('Failed')\r\n                                                    return res.json()\r\n                                                })\r\n                                                .then(data => {\r\n                                                    // Add playlistname \r\n                                                    console.log(data.data.addSong)\r\n                                                    let playlists = this.state.playlists \r\n                                                    playlists.push(data.data.addSong)\r\n                                                    this.setState({playlists: playlists, error: \"\", open:false, createNew:false})\r\n                                                    console.log(playlists)\r\n\r\n                                                })\r\n                                                .catch(error => {\r\n                                                    console.log(error)\r\n                                                })\r\n                                            }\r\n                                        })\r\n                                    .catch(err => {\r\n                                        console.log(err);\r\n                                    });\r\n                                })\r\n                        .catch(error => {\r\n                            console.log(error)\r\n                        })\r\n    }\r\n\r\n    handleClickOpen = () => {\r\n        this.setState({open:true})\r\n\r\n    };\r\n    \r\n    handleClose = () => {\r\n        this.setState({open:false, createNew:false})\r\n    }\r\n\r\n    openNew = () => {\r\n        this.setState({createNew : true})\r\n    }\r\n    closeNew = () =>{\r\n        this.setState({createNew : false })\r\n    }\r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n\r\n        const {classes} = this.props\r\n\r\n        return ( \r\n            <div>\r\n                <IconButton onClick={this.handleClickOpen} className = {classes.iconButton}> \r\n                    <AddCircleIcon  variant=\"outlined\" color=\"primary\"  fontSize=\"large\"/>\r\n                </IconButton>\r\n\r\n  \r\n\r\n      <Dialog\r\n        open={this.state.open}\r\n        keepMounted\r\n        onClose={this.handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n        className = {classes.dialog}\r\n        fullWidth={true}\r\n        maxWidth = {'sm'}\r\n      >\r\n        \r\n        {!this.state.createNew ?\r\n            <>\r\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"Add Song to Playlist\"}</DialogTitle>\r\n                {\r\n                    this.state.playlists.map(playlist => {\r\n                        return (\r\n                            <DialogContent>\r\n                                <Button className = {classes.dialogButton} id={playlist._id} onClick = {this.handleAdd}>\r\n                                    {playlist.name}\r\n                                </Button>\r\n                            </DialogContent>\r\n                        )\r\n                    })\r\n                }\r\n        \r\n                <DialogActions>\r\n                    <Button  onClick={this.openNew} color=\"primary\">\r\n                        New Playlist\r\n                    </Button>\r\n                    <Button onClick={this.handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                </DialogActions>\r\n            \r\n            </>\r\n            :\r\n            <>\r\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"Add Song to New Playlist\"}</DialogTitle>\r\n                <DialogContent>\r\n                    {this.state.error ?\r\n                        <DialogContentText> {this.state.error} </DialogContentText> : null\r\n\r\n                    }\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Playlist Name\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        ref = {this.nameEl}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button  onClick={this.createAndAdd} color=\"primary\" className = {classes.button}> \r\n                        Create and Add\r\n                    </Button>\r\n                    <Button onClick={this.closeNew} color=\"primary\" className = {classes.button}>\r\n                        Back\r\n                    </Button>\r\n                </DialogActions>\r\n            </>\r\n        }\r\n       </Dialog>\r\n    </div>\r\n\r\n        );\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyles)(AddSong);\r\n","/** USER CARD\r\n * Component within Search List Card\r\n * Used to display a user in the search results \r\n */\r\n\r\nimport React, { Component } from 'react'\r\n// Received for Pending request from user. Shared for pending request to user ## RiUserUnfollowLine\r\nimport {RiUserFollowLine, RiUserAddLine,RiUserReceivedLine,RiUserSharedLine} from 'react-icons/ri'\r\n\r\nclass UserCard extends Component {\r\n    state = { \r\n        user: this.props.user,\r\n        sessionUserRequests: null,\r\n        sessionUserFollowers: null,\r\n        loading: true,\r\n    }\r\n\r\n    // Get the user \r\n    componentDidMount = () => {\r\n        this.setState({loading: true})\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.props.sessionUser}\"){\r\n                        user {\r\n                            _id\r\n                            follow_requests {\r\n                                user_id\r\n                                username\r\n                                profile_img\r\n                            }\r\n                            followers {\r\n                                user_id \r\n                                username\r\n                                profile_img\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                this.setState({\r\n                    sessionUserRequests : data.data.getUserByUsername.user.follow_requests,\r\n                    sessionUserFollowers : data.data.getUserByUsername.user.followers,\r\n                    loading: false \r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    // If the session user has made a follow request \r\n    userRequestedFollow = () => {\r\n        const requests = this.state.user.user.follow_requests\r\n\r\n        let requested = false\r\n        requests.forEach(request => {\r\n            if (request.username === this.props.sessionUser)\r\n                requested = true \r\n          \r\n        })\r\n        return requested\r\n    }\r\n\r\n    // If the searched user has made a follow request \r\n    searchedRequestedFollow = () => {\r\n        let requested = false \r\n        this.state.sessionUserRequests.forEach(request => {\r\n            if (request.username === this.state.user.user.username)\r\n                requested = true\r\n        })\r\n        return requested\r\n    }\r\n\r\n    // If the searched user is following \r\n    searchedFollowing = () => {\r\n        let following = false \r\n        this.state.sessionUserFollowers.forEach(follower => {\r\n            if (follower.username === this.state.user.user.username)\r\n                following = true\r\n        })\r\n        return following \r\n    }\r\n\r\n    // If the session user is following searched user \r\n    userFollowing = () => {\r\n        let following = false \r\n        this.state.user.user.followers.forEach(follower => {\r\n            if (follower.username === this.props.sessionUser)\r\n                following = true\r\n        })\r\n        return following \r\n    }\r\n\r\n    // Send a follow request \r\n    sendRequest = () => {\r\n        console.log(this.state.user.user._id)\r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    addRequest(id: \"${this.state.user.user._id}\", requested_username: \"${this.props.sessionUser}\", profile_img: \"${this.state.user.user.profile_img}\"){\r\n                            _id\r\n                            username\r\n                            profile_img\r\n                            followers {\r\n                                user_id\r\n                                username\r\n                                profile_img\r\n                            }\r\n                            follow_requests {\r\n                                user_id \r\n                                username\r\n                                profile_img\r\n                            }\r\n\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n            console.log(data)\r\n                let user = this.state.user \r\n                user.user = data.data.addRequest\r\n       \r\n               this.setState({user: user})\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n    }\r\n\r\n    // Go to the user's profile page \r\n    toUser = () => {\r\n        console.log(this.props)\r\n        this.props.history.push('/' +  this.state.user.user.username)\r\n    }\r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>);\r\n        // Do not show in the search results if it's the user that's logged in \r\n        // if (this.props.sessionUser === this.state.user.user.username)\r\n        //     return (<> </>);\r\n        return(\r\n            <div>\r\n                <div className='card z-depth-0 text search_card'>\r\n                    <div className=\"col s1\" onClick = {this.toUser}>\r\n                        <img alt = \"user_img\" src={this.state.user.user.profile_img} class=\"user_picture\"></img>\r\n                    </div>\r\n                    <div className='card-content col s3 user-button' onClick = {this.toUser}>\r\n                        <button><span className='card-title'>{this.state.user.user.username}</span> </button>\r\n                    </div>\r\n                    <div className='card-content col s3' onClick = {this.toUser}>\r\n                        <span className='card-title'>{this.state.user.user.followers.length}</span>\r\n                    </div>\r\n                    <div className='card-content col s3' onClick = {this.toUser}> \r\n                        <span className='card-title'>{this.state.user.playlists.length}</span>\r\n                    </div>\r\n\r\n                    <div className='card-content col s3 user-follow-info'>\r\n                        {this.state.user.user.username !== this.props.sessionUser ?\r\n                                <>\r\n                                {this.userRequestedFollow() ?  <RiUserSharedLine size= {24}/> : \r\n                         this.userFollowing() ? <RiUserFollowLine size= {24}/> : \r\n                         this.searchedRequestedFollow() ? <RiUserReceivedLine size= {24}/>:\r\n                         <button onClick={this.sendRequest}> <RiUserAddLine size= {24}/> </button>\r\n                        }\r\n                                </>\r\n                                : null\r\n                        }\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default UserCard;","/** PLAYLIST CARD  \r\n * Component withing Search List Card \r\n * Used to display a playlist in the search results \r\n*/\r\n\r\nimport React, { Component } from 'react'\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite'\r\nimport IconButton from '@material-ui/core/IconButton'\r\n\r\nclass PlaylistCard extends Component {\r\n    state = { \r\n        playlist: this.props.playlist,\r\n        loading: true,\r\n        favorited: false,\r\n     }\r\n    \r\n     componentDidMount = () => {\r\n         let requestBody = {\r\n             query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.props.sessionUser}\"){\r\n                        user {\r\n                            saved_playlists {\r\n                                playlist_id\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n             `\r\n         }\r\n\r\n         fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error('Failed');\r\n            return res.json()\r\n        })\r\n        .then(result => {\r\n            const saved = result.data.getUserByUsername.user.saved_playlists\r\n            let favorite = false \r\n            saved.forEach(playlist => {\r\n                if (playlist.playlist_id === this.state.playlist._id)\r\n                   favorite = true \r\n            })\r\n\r\n            this.setState({favorited : favorite, loading: false })\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n     }\r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n        return (\r\n            <div>\r\n                <div className='card z-depth-0 text search_card'  >\r\n                    <div className=\"card-content col s1\" onClick={this.toPlaylist}>\r\n                        <img alt = \"playlist_img\" src={this.state.playlist.playlist_img} class=\"song_picture\"></img>\r\n                    </div>\r\n                    <div className='card-content col s3 playlist-button' onClick={this.toPlaylist}>\r\n                        <button><span className='card-title'>{this.state.playlist.name}</span></button>\r\n                        </div>\r\n                    <div className='card-content col s3' onClick={this.toPlaylist}> \r\n                        <span className='card-title'>{this.state.playlist.username}</span>\r\n                    </div>\r\n                    <div className='card-content col s1' onClick={this.toPlaylist}>\r\n                        <span className='card-title'>{this.state.playlist.likes}</span>\r\n                    </div>\r\n                    <div className='card-content col s3'>\r\n                        <span className='card-title'>\r\n                            {this.state.playlist.songs.length} {this.state.playlist.songs.length === 1 ? \"Song\" : \"Songs\"}\r\n                        </span>\r\n                        <span className='card-title'>\r\n                            {this.state.playlist.total_duration < 3600 ? \"0 hr \" + (this.state.playlist.total_duration < 600 ? \"0\" + Math.floor(this.state.playlist.total_duration/60) + \" min\": Math.floor(this.state.playlist.total_duration/60) + \" min\") :\r\n                            (Math.floor(this.state.playlist.total_duration/3600) + \" hr \" + (this.state.playlist.total_duration%3600 < 600 ? \"0\" + Math.floor(this.state.playlist.total_duration/60) + \" min\": Math.floor(this.state.playlist.total_duration/60) + \" min\"))}\r\n                        </span>\r\n                    </div>\r\n                    \r\n                {\r\n                    this.props.sessionUser !== this.state.playlist.username ? \r\n                    <>\r\n                    {!this.state.favorited?\r\n                        <div className='card-content col s2 '>\r\n                            <IconButton onClick = {this.handleFavorite}>\r\n                                <FavoriteBorderIcon fontSize=\"large\" />\r\n                            </IconButton>\r\n                            {/* <button className=\"btn-floating red button\" onClick={this.handleFavorite}><i className='material-icons'>favorite</i></button> */}\r\n                        </div>\r\n                        : \r\n                        <div className='card-content col s2 '>\r\n                            <IconButton >\r\n                                <FavoriteIcon fontSize=\"large\" />\r\n                            </IconButton>\r\n                            {/* <button onClick={this.handleFavorite}><i className='material-icons'>favorite</i></button> */}\r\n                        </div>\r\n\r\n                    }\r\n                        </>\r\n                    : <div className='card-content col s3 '>\r\n                        \r\n                        </div>\r\n                }\r\n                    \r\n                  \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Go to the playlist \r\n    toPlaylist = () => {\r\n        this.props.history.push('/' +  this.state.playlist.username + \"/mixtape=\" + this.state.playlist._id)\r\n    }\r\n\r\n    // Add the playlist into the user's saved playlist \r\n    handleFavorite = () => {\r\n        let requestBody = {\r\n            query: `\r\n                mutation { \r\n                    addSavedPlaylist(username: \"${this.props.sessionUser}\", playlist_id: \"${this.state.playlist._id}\", name: \"${this.state.playlist.name}\"){\r\n                            _id\r\n                            name\r\n                            username\r\n                            songs {\r\n                                song_id\r\n                                name\r\n                            }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n            console.log(data)\r\n                this.setState({favorited:true})\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n    }\r\n}\r\n \r\nexport default PlaylistCard;","import React, { Component } from 'react'\r\nimport { BsChevronDown } from 'react-icons/bs'\r\nimport SearchListCard from './SearchListCard'\r\n\r\nclass ArtistCard extends Component {\r\n    state = {  \r\n        loading: true,\r\n        songs: null,\r\n        showSongs:false\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let requestBody = { artist: this.props.item.name}\r\n        fetch(\"https://easytunes.herokuapp.com/v1/artist-tracks/\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n\r\n                this.setState({loading: false, songs: data.tracks})\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n    handleClick = () => {\r\n\r\n        this.setState({showSongs : !this.state.showSongs}, function() {console.log(this.state)})\r\n    }\r\n    render() { \r\n       \r\n        return (  \r\n            <div>\r\n            <div className='card z-depth-0 text search_card' onClick = {this.handleClick}>\r\n                <div className='card-content col s3'>\r\n                    {this.props.item.images[0] ? <img alt = \"\" src={this.props.item.images[0].url} class=\"artist_picture\"></img> : <img alt = \"\" src='https://cdn3.iconfinder.com/data/icons/social-media-circle-flat-1/1024/itunes-01-01-512.png' class=\"artist_picture\"></img>}\r\n                </div>\r\n                <div className='card-content col s3'>\r\n                    <span className='card-title'>{this.props.item.name}</span>\r\n                </div>\r\n                \r\n                <div className='card-content col s3'>\r\n                    <BsChevronDown  size={24}/>\r\n                </div>\r\n                \r\n            </div>\r\n            {this.state.showSongs ? \r\n                <div style={{marginLeft: \"30px\"}}>\r\n                    {\r\n                    this.state.songs.items.map(song => {\r\n                        return <SearchListCard  key = {song.id} item={song} type=\"track\"  username={this.props.username} history = {this.props.history} />\r\n                    })\r\n                }\r\n                </div>\r\n                : \r\n                null\r\n            }\r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default ArtistCard;","/** SEARCH LIST CARD \r\n * Component withing Search List \r\n * Handles displaying one search result \r\n**/\r\n\r\nimport React, { Component } from 'react'\r\nimport './Search.css'\r\nimport AddSong from './AddSongs'\r\nimport UserCard from './UserCard'\r\nimport PlaylistCard from './PlaylistCard'\r\nimport ArtistCard from './ArtistCard'\r\nclass SearchListCard extends Component {\r\n    state = {\r\n        item : this.props.item,\r\n        type : this.props.type,\r\n    }\r\n\r\n    // Converts length og song into minutes \r\n    millisToSeconds(millis) {\r\n        const seconds = Math.floor(millis/1000);\r\n        return seconds\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n            {this.state.type === \"track\" ? this.renderSong() : \r\n            this.state.type === \"artist\" ? this.renderArtist(): \r\n            this.state.type === \"playlist\" ? <PlaylistCard playlist = {this.state.item} sessionUser = {this.props.username} history = {this.props.history}/>:\r\n            <UserCard user = {this.state.item} sessionUser = {this.props.username} history = {this.props.history}/>}\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    renderArtist(){\r\n        \r\n        return(\r\n            <ArtistCard item = {this.state.item}  username={this.props.username} history = {this.props.history}/>\r\n        );\r\n    }\r\n\r\n    renderSong(){\r\n        const artists = this.state.item.artists\r\n\r\n        let artistNames = \"\"\r\n        artists.forEach(artist => {\r\n            artistNames = artistNames + artist.name + \" \"\r\n\r\n        })\r\n\r\n        const songLength = this.millisToSeconds(this.state.item.duration_ms)\r\n\r\n        return (\r\n            <div>\r\n                <div className='row card z-depth-0 text search_card'>\r\n                <div className='card-content col s1'>\r\n                        {this.state.item.album.images[0] ? <img alt = \"song_image\" src={this.state.item.album.images[0].url} class=\"song_picture\"></img> : <img alt = \"song_image\" src='https://cdn3.iconfinder.com/data/icons/social-media-circle-flat-1/1024/itunes-01-01-512.png' class=\"song_picture\"></img>}\r\n                    </div>\r\n                    <div className='card-content col s5'>\r\n                        <span className='card-title'>{this.state.item.name}</span>\r\n                    </div>\r\n                    <div className='card-content col s4'>\r\n                        <span className='card-title'>{artistNames}</span>\r\n                    </div>\r\n                    <div className='card-content col s1'>\r\n                        <span className='card-title'>{songLength < 60 ? \"0:\" + (songLength < 10 ? \"0\" + songLength: songLength) :\r\n                (Math.floor(songLength/60) + \":\" + (songLength%60 < 10 ? \"0\" + songLength%60 : songLength%60))}</span>\r\n                    </div>\r\n                    <div className='card-content col s1 '>\r\n                        {/* <button className=\"btn-floating red button\" onClick={this.handleFavorite}><i className='material-icons'>favorite</i></button> */}\r\n                        <AddSong username ={this.props.username} song = {this.state.item}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default SearchListCard;","/** SEARCH LIST \r\n * Component used within Search Screen \r\n * Used to handle display the list of search results \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport SearchListCard from './SearchListCard.js'\r\n\r\n\r\nclass SearchList extends Component {\r\n\r\n    \r\n    render() {\r\n\r\n        const items = this.props.searchList;\r\n        const tracks = items.songs\r\n        const artists = items.artists\r\n        const users = items.users\r\n        const playlists = items.playlists\r\n\r\n        return (\r\n            <div className='section'>\r\n                {/* Display the tracks */}\r\n                {tracks ? \r\n                    <>\r\n                    <div className=\"row\">\r\n                        <h3 className=\"col s1\">Songs</h3>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='col s3'></div>\r\n                        <div className='col s3'>Song</div>\r\n                        <div className='col s3'>Artist</div>\r\n                        <div className='col s3'>Duration</div>\r\n                        <div className='col s3'></div>\r\n                    </div>\r\n                    {tracks && tracks.map(function(item) {\r\n                        return (\r\n                            <SearchListCard key = {item.id} item={item} type=\"track\" username = {this.props.username} history = {this.props.history}/>\r\n                        );}, this)\r\n                    }\r\n                    </>\r\n                    : null\r\n                }\r\n\r\n                {/* Display the artists */}\r\n                {artists ? \r\n                <>\r\n                <div className='row'>\r\n                        <div className='col s3'>Artists</div>\r\n                    </div>\r\n                    {artists && artists.map(function(item) {\r\n                    return (\r\n                        <SearchListCard key = {item.id} item={item} type=\"artist\" username = {this.props.username} history = {this.props.history}/>\r\n                    );} ,this)\r\n                     }\r\n                \r\n                </>\r\n                :\r\n                null\r\n                }\r\n\r\n                {/* Display the playlists */}\r\n                {\r\n                    playlists ? \r\n                    <>\r\n                    <div className=\"row\">\r\n                        <h3 className=\"col s1\">Mixtapes</h3>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='col s1'></div>\r\n                        <div className='col s3'>Name</div>\r\n                        <div className='col s3'>Username</div>\r\n                        <div className='col s1'>Likes</div>\r\n                        <div className='col s3'>Songs</div>\r\n                        <div className='col s3'></div>\r\n                    </div>\r\n                    {playlists && playlists.map(function(item) {\r\n                        console.log(item)\r\n                    return (\r\n                        <SearchListCard key = {item._id} item={item} type=\"playlist\" username = {this.props.username} history = {this.props.history}/>\r\n                    );},this)\r\n                    }\r\n                    </> : \r\n                    null\r\n                }\r\n\r\n                {/* Display the Users */}\r\n                {users ? \r\n                <>\r\n                <div className=\"row\">\r\n                        <h3 className=\"col s1\">Users</h3>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='col s3'></div>\r\n                        <div className='col s3'>User</div>\r\n                        <div className='col s3'>Followers</div>\r\n                        <div className='col s3'>Playlists</div>\r\n                        <div className='col s3'></div>\r\n                    </div>\r\n                    {users && users.map(function(item) {\r\n                    return (\r\n                        <SearchListCard key = {item.user._id} item={item} type=\"user\" username = {this.props.username} history = {this.props.history}/>\r\n                    );},this)\r\n                    }\r\n                </>\r\n                :\r\n                null\r\n                }\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// const mapStateToProps = (state, ownProps) => {\r\n//     const searchList = ownProps.searchList;\r\n//     return {\r\n\r\n//     };\r\n// }\r\nexport default SearchList;","/** SEARCH SCREEN \r\n * Handles retrieving and getting search results   \r\n **/\r\n\r\nimport React, { Component } from 'react'\r\nimport SearchList from './SearchList.js'\r\nclass SearchScreen extends Component {\r\n\r\n    state = {\r\n        searchQuery : this.props.match.params.query,\r\n        searchResults : {},\r\n        searchType : this.props.match.params.type,\r\n        username: this.props.username,\r\n        loading : false,\r\n    }\r\n\r\n    // Fetch Search Results from database \r\n    fetchData = (requestBody, type, url, last) => {\r\n        fetch(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                console.log(data)\r\n                let searchRes = this.state.searchResults \r\n                if (type === 'artists')\r\n                    searchRes[type] = data.artists.items \r\n                else if (type === 'songs')\r\n                    searchRes[type] = data.tracks.items \r\n                else if (type === 'users')\r\n                    searchRes[type] = data.data.searchUsers\r\n                else if (type === 'playlists')\r\n                    searchRes[type] = data.data.searchPlaylists\r\n                this.setState({searchResults : searchRes})\r\n\r\n                if (last)\r\n                    this.setState({loading: false})\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    // Handle getting search results for players \r\n    fetchPlaylists = (last, query) => {\r\n        const requestBody = {\r\n            query: `\r\n                query {\r\n                    searchPlaylists(name :\"${query}\"){\r\n                        _id \r\n                        name \r\n                        username\r\n                        likes\r\n                        total_duration \r\n                        playlist_img\r\n                        songs {\r\n                            song_id \r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        this.fetchData(requestBody, 'playlists', 'https://easytunes.herokuapp.com/graphql', last)\r\n    }\r\n\r\n    // Handle getting search results for users \r\n    fetchUsers = (last, query) => {\r\n        console.log(query)\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    searchUsers(username: \"${query}\"){\r\n                        user {\r\n                            _id\r\n                            username\r\n                            profile_img\r\n                            followers {\r\n                                user_id\r\n                                username\r\n                            }\r\n                            follow_requests {\r\n                                user_id \r\n                                username\r\n                                profile_img\r\n                            }\r\n                        }\r\n                        playlists {\r\n                            _id\r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n                `\r\n            }\r\n        this.fetchData(requestBody, 'users', 'https://easytunes.herokuapp.com/graphql', last)\r\n    }\r\n\r\n    // Handle getting songs and artists search results \r\n    fetchSpotify = (type, query, last) => {\r\n   \r\n        let requestBody;\r\n        if (type === 'artists')\r\n            requestBody = { artist: query}\r\n        else \r\n            requestBody = { track: query}\r\n            \r\n        this.fetchData(requestBody, type, 'https://easytunes.herokuapp.com/v1/search?', last)\r\n    }\r\n\r\n    // Updates the search page if the user searches for something else \r\n    componentDidUpdate = () => {   \r\n        // Update if there is a change in search \r\n        if (this.state.searchType !== this.props.match.params.type || this.state.searchQuery !== this.props.match.params.query){\r\n            this.setState({\r\n                searchType : this.props.match.params.type,\r\n                searchQuery : this.props.match.params.query,\r\n                loading: true,\r\n                searchResults: {}\r\n            }, () => {\r\n                const type = this.state.searchType;\r\n                const query = this.state.searchQuery;\r\n                // console.log(type, query, this.state.loading, this.props.match.params.type, this.props.match.params.query)\r\n                if (type === 'artists' || type === 'songs')\r\n                this.fetchSpotify(type,query, true)    \r\n                else if (type === 'users')\r\n                    this.fetchUsers(true, query)\r\n                else if (type === 'mixtapes')\r\n                    this.fetchPlaylists(true, query)\r\n                else if (type === 'all' ){\r\n                    this.fetchSpotify('artists',query, false) \r\n                    this.fetchSpotify('songs',query, false)\r\n                    this.fetchUsers(false, query)\r\n                    this.fetchPlaylists(true, query)   \r\n                }\r\n            })\r\n\r\n            \r\n        }\r\n    }\r\n\r\n    // Handles the search page when the user first enters \r\n    componentDidMount = () => {\r\n\r\n        if (!this.props.username)\r\n            this.props.history.push('/login')\r\n        if (!this.state.loading){\r\n           \r\n            this.setState({loading: true})\r\n            const type = this.state.searchType;\r\n            const query = this.state.searchQuery;\r\n            console.log(type)\r\n            if (type === 'artists' || type === 'songs')\r\n            this.fetchSpotify(type, query, true)    \r\n            else if (type === 'users')\r\n                this.fetchUsers(true, query)\r\n            else if (type === 'mixtapes')\r\n                this.fetchPlaylists(true, query)\r\n            else if (type === 'all' ){\r\n                this.fetchSpotify('artists', query, false) \r\n                this.fetchSpotify('songs', query, false)\r\n                this.fetchUsers(false, query)\r\n                this.fetchPlaylists(true, query)   \r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        \r\n            \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n\r\n        return (\r\n            <>\r\n\r\n            <div className=\"container navy search-results-container\" style={{paddingBotton: \"50px\"}}>\r\n                <div className=\"row\">\r\n                    <h2 className=\"col s1\">Results</h2>\r\n                </div>\r\n                <SearchList searchList={this.state.searchResults} username={this.state.username} history = {this.props.history}/>\r\n                <div className = \"row blank-space\"> </div>\r\n            </div> \r\n            {/* <PlaylistNavbar/> */}\r\n            </>\r\n        );\r\n    }\r\n}\r\n// const mapStateToProps = (state, ownProps) => {\r\n//     const searchList = ownProps.searchList;\r\n//     return {\r\n\r\n//     };\r\n//}\r\nexport default SearchScreen;","/** FOLLOWER\r\n * Handles displaing one follower\r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport {RiUserUnfollowLine} from 'react-icons/ri'\r\nclass Follower extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.updateFollowers= this.props.updateFollowers\r\n    }\r\n    state = { follower : this.props.follower, username : this.props.username , history: this.props.history}\r\n    render() { \r\n        if (this.state.loading)\r\n        return (<> </>)\r\n    function User ({username, history}){\r\n\r\n        function toUser(){\r\n            history.push('/' + username)\r\n        }\r\n        \r\n        return (\r\n            <button className = \"user-btn\" onClick = {toUser}>{username}</button>\r\n        )\r\n    }\r\n        return (  \r\n            <div className=\"follower-row\">\r\n                    <div className=\"col\">\r\n                        <img alt=\"\" src={this.state.follower.profile_img} class=\"user_icon\"></img>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        {/* <button onClick = {toUser}>{follower.username}</button> */}\r\n                        <User username = {this.state.follower.username} history = {this.state.history}/>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button className=\"unfollow-btn\" onClick = {this.removeFollower}> Unfollow  <RiUserUnfollowLine/></button>\r\n                    </div>\r\n                    \r\n            </div>\r\n        );\r\n    }\r\n\r\n    removeFollower = () =>{\r\n        console.log(this.state.followers)\r\n        let requestBody = {\r\n            query: `\r\n                mutation{\r\n                    removeFollower(username: \"${this.state.username}\", follower_id: \"${this.state.follower.user_id}\"){\r\n                   \r\n                            _id\r\n                            followers {\r\n                                user_id\r\n                                username\r\n                            }\r\n                        \r\n                    }\r\n                }\r\n            `\r\n        }\r\n        \r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                console.log(data)\r\n                this.updateFollowers(data.data.removeFollower.followers)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n}\r\n \r\nexport default Follower;","/** FOLLOWERS \r\n * Handles displaying the list of followers \r\n */\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport Follower from './Follower'\r\nclass Followers extends Component {\r\n    state = { \r\n        followers: null,\r\n        username: this.props.username,\r\n        loading: true\r\n     }\r\n     getFollowers = () => {\r\n        this.setState({loading: true})\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.state.username}\"){\r\n                        user {\r\n                            _id\r\n                            followers {\r\n                                user_id\r\n                                username\r\n                                profile_img\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n\r\n                this.setState({\r\n                    followers: data.data.getUserByUsername.user.followers,\r\n                    loading: false\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    componentDidMount = () => {\r\n       this.getFollowers()\r\n    }\r\n\r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n        let followers = this.state.followers.map(function(follower) {\r\n            return (\r\n                <Follower key = {follower.user_id} follower= {follower} username = {this.state.username} history = {this.props.history} updateFollowers = {this.updateFollowers}/>\r\n            )\r\n        }, this)\r\n\r\n        return (\r\n            <>\r\n            {followers}\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateFollowers = (followers) => {\r\n        this.setState({followers : followers})\r\n    }\r\n}\r\n \r\nexport default Followers;","/** FOLLOWING USER\r\n * Handles displaying one user that's being followed\r\n*/\r\nimport React, { Component } from 'react'\r\nimport {RiUserUnfollowLine} from 'react-icons/ri'\r\nclass FollowingUser extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.updateFollowing= this.props.updateFollowing\r\n    }\r\n    state = { following : this.props.following, username : this.props.username , history: this.props.history}\r\n    render() { \r\n        function User ({username, history}){\r\n\r\n            function toUser(){\r\n                history.push('/' + username)\r\n            }\r\n            \r\n            return (\r\n                <button className = \"user-btn\" onClick = {toUser}>{username}</button>\r\n            )\r\n        }\r\n        return (  \r\n            <div className=\"follower-row\">\r\n                    <div className=\"col\">\r\n                        <img alt=\"\" src={this.state.following.profile_img} class=\"user_icon\"></img>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                      <User username = {this.state.following.username} history ={this.props.history} />\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button className=\"unfollow-btn\" onClick = {this.unFollow}> Unfollow  <RiUserUnfollowLine/></button>\r\n                    </div>\r\n                    \r\n                </div>\r\n        );\r\n    }\r\n\r\n    unFollow = () =>{\r\n        console.log(this.state.following)\r\n        let requestBody = {\r\n            query: `\r\n                mutation{\r\n                    unFollow(username: \"${this.state.username}\", following_id: \"${this.state.following.user_id}\"){\r\n                   \r\n                            _id\r\n                            following {\r\n                                user_id\r\n                                username\r\n                            }\r\n                        \r\n                    }\r\n                }\r\n            `\r\n        }\r\n        \r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                console.log(data)\r\n                this.updateFollowing(data.data.unFollow.following)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n}\r\n \r\nexport default FollowingUser;","/** FOLLOWING\r\n * Handles displaying the list of following \r\n */\r\n\r\nimport React, { Component } from 'react'\r\n\r\n// import {RiUserUnfollowLine} from 'react-icons/ri'\r\nimport FollowingUser from './FollowingUser'\r\nclass Following extends Component {\r\n    state = { \r\n        following: null,\r\n        username: this.props.username,\r\n        loading: true\r\n     }\r\n     getFollowing = () => {\r\n\r\n        this.setState({loading: true})\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.state.username}\"){\r\n                        user {\r\n                            _id\r\n                            following {\r\n                                user_id\r\n                                username\r\n                                profile_img\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                this.setState({\r\n                    following: data.data.getUserByUsername.user.following,\r\n                    loading: false\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    componentDidMount = () => {\r\n       this.getFollowing()\r\n    }\r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n\r\n        let followings = this.state.following.map(function(following) {\r\n            return (\r\n                <FollowingUser key = {following.user_id} following= {following} username = {this.state.username} history = {this.props.history} updateFollowing = {this.updateFollowing}/>\r\n            )\r\n        }, this)\r\n\r\n        return (\r\n            <>\r\n            {followings}\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateFollowing = (following)=>{\r\n        this.setState({following: following})\r\n    }\r\n}\r\n \r\nexport default Following;","/** REQUEST\r\n * Handles one user request\r\n */\r\nimport React, { Component } from 'react'\r\nimport {RiUserAddLine} from 'react-icons/ri'\r\n\r\nclass Request extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.updateRequests = this.props.updateRequests\r\n    }\r\n    state = { request : this.props.request, username : this.props.username , history: this.props.history}\r\n    render() { \r\n\r\n        function User ({username, history}){\r\n\r\n            function toUser(){\r\n                console.log(history)\r\n                history.push('/' + username)\r\n            }\r\n            \r\n            return (\r\n                <button className = \"user-btn\" onClick = {toUser}> {username}</button>\r\n            )\r\n        }\r\n        console.log(this.props)\r\n        return (  \r\n            <div className=\"follower-row\">\r\n                <div className=\"col\">\r\n                    <img alt=\"\" src={this.state.request.profile_img} class=\"user_icon\"></img>\r\n                </div>\r\n                <div className=\"col\">\r\n                <User username = {this.state.request.username} history = {this.state.history}/>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <button className=\"unfollow-btn\" onClick = {this.acceptRequest}> Accept <RiUserAddLine/></button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    acceptRequest = () =>{\r\n        console.log(this.state.request)\r\n        let requestBody = {\r\n            query: `\r\n                mutation{\r\n                    addFollower(username: \"${this.state.username}\", request_id: \"${this.state.request.user_id}\", profile_img: \"${this.state.request.profile_img}\"){\r\n                            _id\r\n                            follow_requests {\r\n                                user_id\r\n                                username\r\n                                profile_img\r\n                            }\r\n                        \r\n                    }\r\n                }\r\n            `\r\n        }\r\n        \r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                console.log(data)\r\n                this.updateRequests(data.data.addFollower.follow_requests)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n}\r\n \r\nexport default Request;","/** REQUESTS\r\n * Handles displaing list of requests\r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport Request from './Request'\r\n\r\nclass Requests extends Component {\r\n    state = { \r\n        requests: null,\r\n        username: this.props.username,\r\n        loading: true\r\n     }\r\n\r\n     getRequests = () => {\r\n        this.setState({loading: true})\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.state.username}\"){\r\n                        user {\r\n                            _id\r\n                            follow_requests {\r\n                                user_id\r\n                                username\r\n                                profile_img\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                this.setState({\r\n                    requests: data.data.getUserByUsername.user.follow_requests,\r\n                    loading: false\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    componentDidMount = () => {\r\n       this.getRequests()\r\n    }\r\n\r\n    render() { \r\n        if(this.state.loading)\r\n            return(<> </>)\r\n        let requests= this.state.requests.map(function(request) {\r\n            return (\r\n                <Request key = {request.user_id} request= {request} username = {this.state.username} history = {this.props.history} updateRequests = {this.updateRequests}/>\r\n            )\r\n        }, this)\r\n\r\n        return (\r\n            <>\r\n            {requests}\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateRequests = (requests) => {\r\n        this.setState({requests: requests})\r\n    }\r\n}\r\n \r\nexport default Requests;","/** FOLLOWNG PAGE\r\n * Handles displaying Followers, Following, and Requests \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport Followers from './Followers'\r\nimport Following from './Following'\r\nimport Requests from './Requests'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Container from '@material-ui/core/Container'\r\nimport Button from '@material-ui/core/Button'\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport './Follows.css'\r\n\r\nconst useStyle = theme => ({\r\n    buttonFocus : {\r\n        borderRadius: \"0\",\r\n        width: \"100%\",\r\n        strokeLinecap: \"round\",\r\n        border: \"none\",\r\n        '&:focus' :{\r\n            outline: \"none\"\r\n        },\r\n        borderBottom : \"2px solid #004CB2\",\r\n        fontWeight: \"bold\"\r\n    },\r\n    buttonNotFocus :{\r\n        width: \"100%\",\r\n        border: \"none\",\r\n        '&:focus' :{\r\n            outline: \"none\"\r\n        },\r\n    },\r\n    container: {\r\n        padding : theme.spacing(0,0,0,0)\r\n    }\r\n})\r\nclass FollowingPage extends Component {\r\n\r\n    state = {  \r\n        showFollowers: true,\r\n        showFollowing: false,\r\n        showRequests: false,\r\n        user: null,\r\n        loading: true\r\n    }\r\n\r\n    // Gets the user \r\n    componentDidMount =() => {\r\n        if (!this.props.username)\r\n            this.props.history.push('/login')\r\n            \r\n        this.setState({loading: true})\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.props.username}\"){\r\n                        user {\r\n                            _id\r\n                            username\r\n                            profile_img\r\n                            joined\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch(\"https://easytunes.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                const location = this.props.history.location.pathname.split('/')[2]\r\n                const followers = location === \"followers\" \r\n                const following = location === \"following\" \r\n                const requests = location === \"requests\" \r\n                console.log(followers, following, requests)\r\n                this.setState({\r\n                    user : data.data.getUserByUsername.user,\r\n                    showFollowers: followers,\r\n                    showFollowing: following,\r\n                    showRequests: requests,\r\n                    loading: false ,\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    // Handle rendering followers, following, or requests \r\n    changeView = (event) => {\r\n        console.log(event.target)\r\n        if (event.currentTarget.id === 'followers-btn'){\r\n            this.setState({showFollowers : true, showFollowing:false, showRequests:false})\r\n            this.props.history.push('/' + this.state.user.username+ \"/followers\")\r\n        }\r\n        else if (event.currentTarget.id === 'following-btn'){\r\n            this.setState({showFollowers : false, showFollowing:true, showRequests:false})\r\n            this.props.history.push('/' + this.state.user.username + \"/following\")\r\n        }\r\n        else {\r\n            this.setState({showFollowers : false, showFollowing:false, showRequests:true})\r\n            this.props.history.push('/' + this.state.user.username + \"/requests\")\r\n        }       \r\n    }\r\n\r\n    // Get the user's account creation date \r\n    getAccountCreationDate = () => {\r\n        const user = this.state.user\r\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n        const date = new Date(parseInt(user.joined))\r\n        return  months[date.getMonth()] + \" \" + date.getDate() + \", \" + date.getFullYear()\r\n\r\n    }\r\n    \r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n        const {classes} = this.props\r\n        return (  \r\n            <>\r\n                <div className=\"container-fluid followers-container\">\r\n                    {/* Home Button, Username, Account Icon */}\r\n\r\n                    <div className=\"container-fluid follow-data-container\">\r\n                        {/* Information Bar about the user */}\r\n\r\n                        <div className=\"information-row\">\r\n                            \r\n                            <div className=\"col text-center\">\r\n                                <div className=\"col\">\r\n                                    <img alt=\"\" src={this.state.user.profile_img} className=\"user_icon\"></img>\r\n                                </div>\r\n                                <h2>{this.state.user.username}                            \r\n                            \r\n\r\n                                </h2>\r\n                                    <h5> User Since: {this.getAccountCreationDate()}</h5>\r\n                            </div>\r\n                        </div>\r\n                     \r\n                        <div className=\"navigation-row\">\r\n                            <Container className = {classes.container}> \r\n                                <Grid container>\r\n                                    <Grid xs item align=\"center\">\r\n                                        <Button id = \"followers-btn\" onClick = {this.changeView} className = {this.state.showFollowers ? classes.buttonFocus : classes.buttonNotFocus}> \r\n                                            Followers\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid xs item align=\"center\">\r\n                                        <Button id = \"following-btn\" onClick = {this.changeView} className = {this.state.showFollowing? classes.buttonFocus : classes.buttonNotFocus}> \r\n                                            Following\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid xs item align=\"center\">\r\n                                        <Button id = \"requests-btn\" onClick = {this.changeView} className = {this.state.showRequests ? classes.buttonFocus : classes.buttonNotFocus}> \r\n                                            Requests\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Container>\r\n                            {/* <div className=\"col\">\r\n                            <button id = \"followers-btn\" className = \"followers-btn\" onClick = {this.changeView} style = {{borderBottom : \"3px solid #faed26\", fontWeight : \"bold\"}}>  Followers </button>\r\n                            </div>\r\n\r\n                            <div className=\"col\">\r\n                                <button id = \"following-btn\" className = \"following-btn\" onClick = {this.changeView}> Following </button>\r\n                            </div>\r\n                            \r\n                            <div className=\"col\">\r\n                            <button id = \"requests-btn\" className = \"requests-btn\" onClick = {this.changeView}> Requests </button>\r\n                            </div> */}\r\n                        </div>\r\n\r\n                        {this.state.showFollowers ? <Followers username = {this.state.user.username} history = {this.props.history}/>: null}\r\n                        {this.state.showFollowing ? <Following username = {this.state.user.username} history = {this.props.history}/> : null}\r\n                        {this.state.showRequests ?  <Requests username = {this.state.user.username} history = {this.props.history}/> : null}\r\n                    </div>\r\n                    \r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyle)(FollowingPage);","/** UPDATE \r\n * Component within Account Setting \r\n * Used to handle updating email and username \r\n**/\r\n\r\nimport React, { Component } from 'react'\r\nimport {AiOutlineCheckCircle, AiOutlineCloseCircle} from 'react-icons/ai'\r\nclass Update extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.onChange = this.props.onChange\r\n    }\r\n    state = { \r\n        visible: false, \r\n        original: this.props.original,\r\n        new : this.props.original,\r\n        text: this.props.text,\r\n        error: \"\"\r\n     }\r\n\r\n    // Handle setting update box visible \r\n    setVisible = () => {\r\n        this.setState({visible : true})\r\n    }\r\n\r\n    // Handle setting update box invisible \r\n    setInvisible = () => {\r\n        this.setState({visible : false})\r\n    };\r\n\r\n    handleChange = (event) =>{\r\n        this.setState({new : event.target.value})\r\n    }\r\n    handleUpdate = () => {\r\n        let requestBody = \"\"\r\n        if (this.state.text === \"Update Email\"){\r\n            requestBody = {\r\n                query: `\r\n                    mutation{\r\n                        updateEmail(email: \"${this.state.original}\", new_email:\"${this.state.new}\"){\r\n                        _id\r\n                        email\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n        }\r\n        else {\r\n            requestBody = {\r\n                query: `\r\n                    mutation{\r\n                        changeUsername(username: \"${this.state.original}\", new_username:\"${this.state.new}\"){\r\n                        _id\r\n                        email\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n        }\r\n\r\n        fetch ('https://easytunes.herokuapp.com/graphql', {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }})\r\n                .then(res => {\r\n                   \r\n                    if (res.status !== 200 && res.status !== 201)\r\n                        throw new Error (res.body)\r\n                    else \r\n                        return res.json()\r\n                })\r\n                .then(data => {\r\n                    console.log(data)\r\n                    if (data.errors)\r\n                        throw new Error (data.errors[0].message)\r\n                   this.setInvisible()\r\n                   this.onChange(this.state.text, this.state.new)\r\n                   this.setState({original: this.state.new})\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    this.setState({error: error.message})\r\n                })\r\n        \r\n    }\r\n\r\n    render() { \r\n        return (  \r\n            <>\r\n            <button className = \"user-settings-content-btn\" onClick = {this.setVisible}>{this.state.text}</button>   \r\n\r\n            {\r\n                this.state.visible ? \r\n                    <div className=\"update-box\">\r\n                        {this.state.text}\r\n                        <div className=\"error-box\"> {this.state.error} </div>\r\n                        <input type=\"text\" placeholder = {this.state.original} onChange = {this.handleChange}required/>\r\n                        <button className = \"confirm-change-btn\" onClick={this.handleUpdate}> <AiOutlineCheckCircle size = {24}/></button>\r\n                         <button className = \"cancel-change-btn\"  onClick={this.setInvisible}> <AiOutlineCloseCircle size = {24}/></button>\r\n                    </div>\r\n                :\r\n                null\r\n            }    \r\n        </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Update;","/** UPDATE PASSWORD\r\n * Component within Account Setting \r\n * Used to handle changing password\r\n **/\r\n\r\nimport React, { Component } from 'react'\r\nimport {AiOutlineCheckCircle, AiOutlineCloseCircle} from 'react-icons/ai'\r\n\r\n\r\nclass UpdatePassword extends Component {\r\n    state = { \r\n        visible: false,\r\n        password: \"\",\r\n        confirm: \"\",\r\n        error : \"\"    \r\n    }\r\n\r\n    setVisible = () => {\r\n        this.setState({visible : true, password: \"\", confirm: \"\"})\r\n    }\r\n\r\n    setInvisible = () => {\r\n        this.setState({visible : false})\r\n    };\r\n\r\n    handlePassChange = (event) => {\r\n        this.setState({password: event.target.value})\r\n    }\r\n\r\n    handleConfChange = (event) => {\r\n        this.setState({confirm: event.target.value})\r\n    }\r\n\r\n    handleUpdate = () => {\r\n      console.log(this.props.username)\r\n        if (this.state.password !== this.state.confirm ){\r\n            this.setState({error: \"Passwords do not match\"})\r\n        }\r\n        else if (this.state.password === \"\")\r\n        this.setState({error: \"Enter a password\"})\r\n        else {\r\n            let requestBody = {\r\n                    query: `\r\n                        mutation{\r\n                            changePassword(username: \"${this.props.username}\", new_password:\"${this.state.password}\"){\r\n                            _id\r\n    \r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n    \r\n            fetch ('https://easytunes.herokuapp.com/graphql', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(requestBody),\r\n                    headers: {\r\n                        'content-type': 'application/json'\r\n                    }})\r\n                    .then(res => {\r\n                    \r\n                        if (res.status !== 200 && res.status !== 201)\r\n                            throw new Error (res.body)\r\n                        else \r\n                            return res.json()\r\n                    })\r\n                    .then(data => {\r\n                        console.log(data)\r\n                        this.setState({visible: false})\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error)\r\n                        this.setState({error: error.message})\r\n                    })\r\n            }\r\n        \r\n    }\r\n    render() { \r\n        return (  \r\n            <>\r\n            <button className = \"user-settings-content-btn\" onClick = {this.setVisible}> Update Password </button>\r\n            {this.state.visible ? \r\n            <div className=\"update-pass-box\">\r\n                <div className=\"error-box\"> {this.state.error} </div>\r\n                New Password\r\n                <input onChange = {this.handlePassChange} type=\"password\" required/>\r\n                Confirm Password\r\n                <input onChange = {this.handleConfChange} type=\"password\" required/>\r\n                <button className = \"confirm-pass-btn\" onClick={this.handleUpdate}> <AiOutlineCheckCircle size = {24}/></button>\r\n                <button className = \"cancel-pass-btn\"  onClick={this.setInvisible}> <AiOutlineCloseCircle size = {24}/></button>\r\n            </div>\r\n            : null}\r\n        </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default UpdatePassword;","/** ACCOUNT SETTING \r\n * Component within Settings Page\r\n */\r\n\r\n\r\nimport React, { Component } from 'react'\r\nimport Update from '../AccountSetting/Update'\r\nimport UpdatePassword from './UpdatePassword'\r\n\r\nclass AccountSetting extends Component {\r\n    state = { user: this.props.user }\r\n    \r\n    onChange = (type, value) => {\r\n        let user = this.state.user \r\n        if (type === \"Update Email\")\r\n            user.email = value \r\n        else if (type === \"Update Username\") {\r\n            user.username = value \r\n            localStorage.setItem(\"username\", value);\r\n            \r\n            this.props.onUsernameChange(value)\r\n           this.props.history.push(\"/\" + value + \"/settings\")\r\n        }\r\n        this.setState({user : user})\r\n    }\r\n\r\n    Post = (e) => {\r\n        e.preventDefault();\r\n        const file = document.getElementById(\"photo-input\").files;\r\n        const formData = new FormData();\r\n\r\n        formData.append(\"img\", file[0]);\r\n        console.log(file)\r\n        console.log(formData.getAll())\r\n        fetch(\"https://easytunes.herokuapp.com/\", {\r\n            method: \"POST\",\r\n            body: formData\r\n            }).then(r => {\r\n            console.log(r);\r\n        });\r\n        let user = this.state.user\r\n        user.profile_img = `https://easytunes.herokuapp.com/image_file/${file[0].name}`\r\n        this.setState({user : user})\r\n        console.log(file[0]);\r\n    }\r\n\r\n    updateProfileImg = () => {\r\n        let user = this.state.user\r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    changeProfileImg(username: \"${user.username}\", img: \"${user.profile_img}\"){\r\n                        _id\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        this.fetch(requestBody)\r\n    }\r\n\r\n    fetch = (requestBody) => {\r\n        fetch('https://easytunes.herokuapp.com/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('User not found');\r\n                return res.json()\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n\r\n    }\r\n\r\n    render() { \r\n        console.log(this.props.user)\r\n        return (  \r\n            <div className=\"user-settings-container\">\r\n            <div className=\"settings-header\">Account</div>\r\n            <div className=\"user-settings-content\">\r\n                <h5>Profile Picture</h5>\r\n                <h6>This is the picture associated with your profile.</h6>\r\n                <div className='user-setting-info'>\r\n                    <div className='photo_input'>\r\n                        Upload Profile Picture\r\n                        <div className=\"\">\r\n                            <div className=\"custom-file\">\r\n                                <input\r\n                                    type=\"file\"\r\n                                    id=\"photo-input\"\r\n                                    accept=\"image/*\"\r\n                                />\r\n                            </div>    \r\n                        </div>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.Post}>\r\n                            Upload\r\n                        </button>\r\n                        <img\r\n                            id=\"img\"\r\n                            style={{\r\n                                display: \"block\",\r\n                                height: \"10%\",\r\n                                width: \"10%\",\r\n                                \"margin-top\": \"5px\",\r\n                            }}\r\n                            src={this.state.user.profile_img}\r\n                        >\r\n                        </img>\r\n                    </div>\r\n                </div>\r\n                <button className = \"user-settings-content-btn\" onClick={this.updateProfileImg}>Update Image</button>\r\n            </div>\r\n            <div className=\"user-settings-content\">\r\n                <h5>Email</h5>\r\n                <h6> This is the email associated with your account</h6>\r\n                <div className=\"user-setting-info\">\r\n                    {this.state.user.email}\r\n                </div>\r\n                \r\n                <Update text = {\"Update Email\"} original = {this.state.user.email} onChange = {this.onChange} />\r\n            </div>\r\n\r\n            <div className=\"user-settings-content\">\r\n                <h5>Username</h5>\r\n                <h6>This is how you will appear to everyone else</h6>\r\n                <div className=\"user-setting-info\">\r\n                    {this.state.user.username}\r\n                </div>\r\n                <Update text = {\"Update Username\"} original = {this.state.user.username} onChange = {this.onChange}/>\r\n            </div>\r\n\r\n            <div className=\"user-settings-content\"> \r\n                <h5>Change Password</h5>\r\n                <UpdatePassword username = {this.state.user.username}/>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default AccountSetting;","/** ADVANCED SETTING \r\n * Component within Settings Page\r\n */\r\n\r\n\r\nimport React, { Component } from 'react'\r\n\r\nclass AdvancedSetting extends Component {\r\n    state = { user: this.props.user }\r\n\r\n    render() { \r\n        return (  \r\n            <div className=\"user-settings-container\">\r\n            <div className=\"settings-header\">Advanced Settings</div>\r\n\r\n            <div className=\"user-settings-content\">\r\n                <h5>User ID</h5>\r\n                <h6> This is the ID associated with your account</h6>\r\n                <p> {this.state.user._id}</p>\r\n            </div>\r\n\r\n            <div className=\"user-settings-content\">\r\n                <h5>User URL</h5>\r\n                <h6> This is the URL associated with your account </h6>\r\n                <p> {this.state.user.url}</p>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default AdvancedSetting;\r\n\r\n","import React, { Component } from 'react'\r\nimport Switch from 'react-input-switch';\r\nclass PrivacyToggles extends Component {\r\n    state = {  \r\n        // saved_privacy : this.props.default_public_saved_playlist ? 0 : 1\r\n        playlist_privacy : this.props.default_public_playlist ? 0 : 1,\r\n        verify_request : this.props.verify_requests ? 0 : 1\r\n    }\r\n\r\n    fetch(requestBody){\r\n        fetch ('https://easytunes.herokuapp.com/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }})\r\n        .then(res => {\r\n            // console.log(res)\r\n            if (res.status !== 200 && res.status !== 201)\r\n                throw new Error ('Failed')\r\n            return res.json()\r\n        })\r\n        .then(data => {console.log(data)})\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    updatePlaylist = () => {\r\n        let requestBody = \"\"\r\n        if (this.state.playlist_privacy === 0){\r\n            this.setState({playlist_privacy: 1})\r\n            requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changePlaylistPrivacyDef(_id: \"${this.props._id}\", def:${false}){\r\n                            _id\r\n                            default_public_playlist\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n            this.props.onPrivacyChange(\"playlist\", false)\r\n            // this.props.default_public_playlist = false \r\n        }\r\n        else {\r\n            this.setState({playlist_privacy: 0})\r\n            requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changePlaylistPrivacyDef(_id: \"${this.props._id}\", def:${true}){\r\n                            _id\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n            this.props.onPrivacyChange(\"playlist\", true)\r\n            // this.props.default_public_playlist = true\r\n    }\r\n        this.fetch(requestBody)\r\n    }\r\n\r\n\r\n    updateVerify = () => {\r\n        let requestBody = \"\"\r\n        if (this.state.verify_request === 1){\r\n            this.setState({verify_request: 0})\r\n            requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changeVerifyFollowDef(_id: \"${this.props._id}\", def:${true}){\r\n                            _id\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n            this.props.onPrivacyChange(\"verify\", true)\r\n            // this.props.verify_requests = true\r\n        }\r\n        else {\r\n            this.setState({verify_request: 1})\r\n            requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changeVerifyFollowDef(_id: \"${this.props._id}\", def:${false}){\r\n                            _id\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n            this.props.onPrivacyChange(\"verify\", false)\r\n            // this.props.verify_request = false\r\n    }\r\n        this.fetch(requestBody)\r\n    }\r\n    render() { \r\n        return (  \r\n            <>\r\n            <div className=\"user-settings-content\">\r\n                <h5>Default Mixtape Settings</h5>\r\n\r\n                {/* <h6> <Switch value={saved_privacy} onChange={updateSaved}/> Keep saved playlists private</h6> */}\r\n                <h6> <Switch value={this.state.playlist_privacy} onChange={this.updatePlaylist}/> Keep my mixtapes private</h6>\r\n            </div>\r\n\r\n            <div className=\"user-settings-content\">\r\n                <h5>Verify Follow Requests</h5>\r\n                <h6> <Switch value={this.state.verify_request} onChange={this.updateVerify}/> Automatically allow others to follow me</h6>\r\n            </div>\r\n        </>\r\n        );\r\n    }\r\n\r\n    // SAVED PLAYLIST PRIVACY FUNCTIONALITY \r\n    // updateSaved = () => {\r\n    //     let requestBody = \"\"\r\n    //     if (this.state.saved_privacy === 0){\r\n    //         this.setState({saved_value : 1})\r\n    //         requestBody = {\r\n    //             query: `\r\n    //                 mutation {\r\n    //                     changeSavedPlaylistPrivacyDef(_id: \"${this.props._id}\", def:${false}){\r\n    //                         _id\r\n    //                     }\r\n    //                 }\r\n    //             `\r\n    //         }\r\n    //         this.props.default_public_saved_playlist = false \r\n    //     }\r\n    //     else {\r\n    //         this.setState({saved_value : 0})\r\n    //         requestBody = {\r\n    //             query: `\r\n    //                 mutation {\r\n    //                     changeSavedPlaylistPrivacyDef(_id: \"${this.props._id}\", def:${true}){\r\n    //                         _id\r\n    //                     }\r\n    //                 }\r\n    //             `\r\n    //         }\r\n    //         this.props.default_public_saved_playlist = true\r\n    // }\r\n    //     this.fetch(requestBody)\r\n    // }\r\n}\r\n \r\nexport default PrivacyToggles;\r\n\r\n","/** PRIVACY SETTING \r\n * Component within Settings Page\r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport PrivacyToggles from './PrivacyToggles'\r\n\r\nclass PrivacySetting extends Component {\r\n    render() { \r\n\r\n        return (  \r\n            <div className=\"user-settings-container\">\r\n            <div className=\"settings-header\">Privacy Settings</div>\r\n\r\n            <PrivacyToggles \r\n                default_public_playlist = {this.props.user.default_public_playlist} \r\n                verify_requests = {this.props.user.verify_requests}\r\n                _id = {this.props.user._id}\r\n                onPrivacyChange = {this.props.onPrivacyChange}/>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default PrivacySetting;","/** SETTINGS PAGE  **/\r\n\r\nimport React, { Component } from 'react'\r\nimport AccountSetting from './AccountSetting/AccountSetting'\r\nimport AdvancedSetting from './AdvancedSetting/AdvancedSetting'\r\nimport PrivacySetting from './PrivacySetting/PrivacySetting'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport PlayCircleFilledRoundedIcon from '@material-ui/icons/PlayCircleFilledRounded'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport './Setting.css'\r\n\r\nconst useStyles= theme => ({\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: theme.spacing(0, 1),\r\n        marginLeft: \"0px\",\r\n        marginTop: \"10px\",\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n      },\r\n      col : {\r\n          border: \"1px solid\",\r\n          background: \"#f0f0f0\",\r\n          color: \"#fff\",\r\n          paddingTop: \"50px\"\r\n      },\r\n     sidebarHeader : {\r\n        paddingTop: \"10px\",\r\n        marginBottom : \"20px\"\r\n     },\r\n      content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(0),\r\n      },\r\n    wrapper: {\r\n        // padding: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        borderBottom: \"2px solid lightgray\"\r\n    },\r\n    settingsOptionsButton: {    \r\n        width: \"100%\",\r\n        minHeight: \"50px\",\r\n        border: \"none\",\r\n        outline: \"none\",\r\n        textAlign: \"left\",\r\n        paddingLeft: \"20px\",\r\n        background: \"transparent\"\r\n    },\r\n    settingsConent: {\r\n        padding : 0\r\n    }\r\n})\r\nclass Setting extends Component {\r\n    state = { \r\n        showAccount: true,\r\n        showPrivacy: false,\r\n        showAdvanced: false,\r\n        user: null,\r\n        loading: true\r\n    }\r\n\r\n    // Get the User \r\n    componentDidMount = () => {\r\n        if (!this.props.username)\r\n            this.props.history.push('/login')\r\n        this.setState({loading: true})\r\n\r\n        if (this.props.username === this.props.match.params.username){\r\n            let requestBody = {\r\n                query: `\r\n                    query{\r\n                        getUserByUsername(username : \"${this.props.username}\") {\r\n                            user {\r\n                                _id\r\n                            username \r\n                            profile_img\r\n                            default_public_saved_playlist\r\n                            default_public_playlist\r\n                            verify_requests\r\n                            email\r\n                            url\r\n                            }\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n    \r\n            fetch ('https://easytunes.herokuapp.com/graphql', {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }})\r\n                .then(res => {\r\n                    // console.log(res)\r\n                    if (res.status !== 200 && res.status !== 201)\r\n                        throw new Error ('Failed')\r\n                    return res.json()\r\n                })\r\n                .then(data => {\r\n                   this.setState({\r\n                       user: data.data.getUserByUsername.user,\r\n                       loading:false\r\n                   })\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n\r\n    // Render the Settings Page \r\n    render() { \r\n        \r\n            \r\n        // If the data is still loading, do not attempt to render any information \r\n        if (this.state.loading)\r\n            return(<> </>)\r\n        const {classes} = this.props\r\n        return (  \r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n                <Container classname = {classes.wrapper}>\r\n                    <Grid container>\r\n                        <Grid item xs={2} className = {classes.col}>\r\n                            \r\n                        <div className=\"sidebar-header text-left\">\r\n                            <h3 style={{color : \"black\"}}>Settings</h3>\r\n                        </div>\r\n                     <ul >\r\n                         <li>\r\n                            <button className = {classes.settingsOptionsButton} id = \"settings-account-btn\" style = {{background: \"lightgray\"}} onClick={this.changeView}>Account</button>          \r\n                     </li>\r\n                         <li>\r\n                             <button className = {classes.settingsOptionsButton} id = \"settings-privacy-btn\" onClick={this.changeView}>Privacy</button>\r\n                            \r\n                         </li>\r\n                         <li>\r\n                             <button className = {classes.settingsOptionsButton} id = \"settings-advanced-btn\" onClick={this.changeView}>Advanced Settings</button>\r\n                \r\n                         </li>\r\n                     </ul>\r\n                     \r\n                        </Grid>\r\n                        <Grid item xs className ={classes.settingsContent}>\r\n                            {this.state.showAccount ? <AccountSetting user = {this.state.user} onUsernameChange ={this.props.onUsernameChange} history = {this.props.history}/>: null}\r\n                            {this.state.showPrivacy ? <PrivacySetting user ={this.state.user} onPrivacyChange = {this.onPrivacyChange}/> : null}\r\n                            {this.state.showAdvanced ? <AdvancedSetting user={this.state.user}/> : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container> \r\n            </main>\r\n        );\r\n    }\r\n\r\n    onPrivacyChange = (type, value) => {\r\n        let user = this.state.user \r\n        if (type === \"playlist\")\r\n            user.default_public_playlist = value \r\n        else \r\n            user.verify_requests = value \r\n        this.setState({user:user})\r\n    }\r\n    // Handle button clicks to \"Account Setting\", \"Privacy Setting\", and \"Advanced Setting\"\r\n    changeView = (event) => {\r\n        let invisible = [];\r\n        const visible = event.target.id\r\n        \r\n        if (visible === \"settings-account-btn\"){\r\n            this.setState({\r\n                showAccount: true,\r\n                showPrivacy: false,\r\n                showAdvanced: false\r\n            })\r\n            invisible.push(\"settings-privacy-btn\")\r\n            invisible.push(\"settings-advanced-btn\")\r\n        }\r\n        else if (visible === \"settings-privacy-btn\"){\r\n            this.setState({\r\n                showAccount: false,\r\n                showPrivacy: true,\r\n                showAdvanced: false\r\n            })\r\n\r\n            invisible.push(\"settings-account-btn\")\r\n            invisible.push(\"settings-advanced-btn\")\r\n        }\r\n        else {\r\n            this.setState({\r\n                showAccount: false,\r\n                showPrivacy: false,\r\n                showAdvanced: true\r\n            })\r\n            invisible.push(\"settings-privacy-btn\")\r\n            invisible.push(\"settings-account-btn\")\r\n\r\n        }\r\n        document.getElementById(visible).style.background = \"lightgray\"\r\n        document.getElementById(invisible[0]).style.background = \"transparent\"\r\n        document.getElementById(invisible[1]).style.background = \"transparent\"\r\n     \r\n    }\r\n}\r\n \r\nexport default withStyles(useStyles)(Setting);","// /** HEADER NAVBAR\r\n//  * Contains home button, search bar, and settings icon \r\n//  */\r\n\r\nimport { fade, withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport { Select, FormControl } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport clsx from 'clsx';\r\nimport React, { Component } from 'react'\r\nconst drawerWidth = 240;\r\nconst useStyles = theme => ({\r\n  paper: {\r\n    border: '1px solid #d3d4d5',\r\n  },\r\n  \r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n\r\n  search: {\r\n    position: 'relative',\r\n\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    paddingTop: \"10px\",\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: '500px',\r\n      height: '50px'\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2,2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    \r\n    width: '410px',\r\n    height: '30px'\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    paddingRight:'50px',\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    position: 'center',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '100%',\r\n    },\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  selectMenu: {\r\n      height: \"40px\"\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  icon : {\r\n    '&:focus': {\r\n      outline: 'none',\r\n    }\r\n  }\r\n});\r\n\r\nclass HeaderNavbar extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.menuId = 'primary-search-account-menu'\r\n    this.mobileMenuId = 'primary-search-account-menu-mobile'\r\n    this.searchEl = React.createRef();\r\n\r\n  }\r\n  state = {  \r\n    value : \"All\",\r\n    anchorEl: null,\r\n    mobileMoreAnchorEl: null,\r\n  }\r\n\r\n  handleChange = (e) => {\r\n      console.log(e.target)\r\n     this.setState({value : e.target.value})\r\n  }\r\n\r\n  handleProfileMenuOpen = (event) => {\r\n    this.setState({anchorEl : event.target})\r\n  };\r\n\r\n  handleMobileMenuClose = () => {\r\n    this.setState({mobileMoreAnchorEl : null})\r\n\r\n  };\r\n\r\n  handleMenuClose = () => {\r\n    this.setState({anchorEl: null})\r\n    this.handleMobileMenuClose();\r\n  };\r\n\r\n  handleMobileMenuOpen = (event) => {\r\n      console.log(event.target)\r\n    this.setState({mobileMoreAnchorEl : event.target})\r\n  };\r\n\r\n  toPlaylists = () => {\r\n    console.log(\"To playlists\")\r\n    this.props.history.push(\"/\" + this.props.username)\r\n    this.handleMenuClose()\r\n  }\r\n\r\n  toFollowers = () => {\r\n    console.log(\"To followers \")\r\n    this.props.history.push(\"/\" + this.props.username + \"/followers\")\r\n    this.handleMenuClose()\r\n  }\r\n\r\n  toSettings = () => {\r\n    console.log(\"To Settings\")\r\n    this.props.history.push(\"/\" + this.props.username + \"/settings\")\r\n    this.handleMenuClose()\r\n  }\r\n\r\n  toLogOut = () => {\r\n    console.log(\"Log Out\")\r\n    localStorage.removeItem(\"username\")\r\n    this.props.onUsernameChange(\"\")\r\n    this.props.history.push(\"/\")\r\n    this.handleMenuClose()\r\n  }\r\n  renderMenu = () => {\r\n    return (\r\n      <Menu\r\n        anchorEl={this.state.anchorEl}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        id={this.menuId}\r\n        keepMounted\r\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        open={Boolean(this.state.anchorEl)}\r\n        onClose={this.handleMenuClose}\r\n      >\r\n        <MenuItem onClick={this.toPlaylists}>Mixtapes</MenuItem>\r\n        <MenuItem onClick={this.toFollowers}>Followers</MenuItem>\r\n        <MenuItem onClick={this.toSettings}>Settings</MenuItem>\r\n        <MenuItem onClick={this.toLogOut}>Logout</MenuItem>\r\n      </Menu>\r\n    );\r\n  }\r\n  renderMobileMenu = () =>{\r\n    const {classes} = this.props\r\n    return (\r\n      <Menu\r\n        anchorEl={this.state.mobileMoreAnchorEl}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        id={this.mobileMenuId}\r\n        keepMounted\r\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        open={Boolean(this.state.mobileMoreAnchorEl)}\r\n        onClose={this.handleMobileMenuClose}\r\n      >\r\n        <MenuItem onClick={this.handleProfileMenuOpen}>\r\n          <IconButton\r\n            aria-label=\"account of current user\"\r\n            aria-controls=\"primary-search-account-menu\"\r\n            aria-haspopup=\"true\"\r\n            color=\"inherit\"\r\n           \r\n          >\r\n            <AccountCircle />\r\n          </IconButton>\r\n          <p>Profile</p>\r\n        </MenuItem>\r\n      </Menu>\r\n    );\r\n  }\r\n\r\n  toHome = () => {\r\n    this.props.history.push('/home')\r\n  }\r\n\r\n  handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\"){\r\n        const type = this.state.value \r\n        const query = this.searchEl.current.children[0].value\r\n        console.log(type)\r\n        if (query !== \"\"){\r\n            const url = '/searchq=' +  encodeURIComponent(query)+ \"/type=\" + type.toLowerCase()\r\n            const {history} = this.props;\r\n                            \r\n            history.push(url)\r\n        }\r\n    }\r\n  }\r\n\r\n  render() { \r\n    const {classes} = this.props\r\n\r\n    return (  \r\n        <div className={classes.grow}>\r\n            <AppBar \r\n              // position=\"fixed\"\r\n              // className={clsx(classes.appBar, {\r\n              //   [classes.appBarShift]: this.props.open,\r\n              // })}\r\n            \r\n            position=\"static\" \r\n            style={{ background: '#5472d3' }}>\r\n                <Toolbar>\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  aria-label=\"open drawer\"\r\n                  onClick={this.props.handleDrawerOpen}\r\n                  edge=\"start\"\r\n                  className={clsx(classes.menuButton, {\r\n                    [classes.hide]: this.props.open,\r\n                  }, classes.icon)}\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n                    {/* <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        className={classes.menuButton}\r\n                        aria-label=\"open drawer\"\r\n                    >\r\n                        <HomeIcon />\r\n                    </IconButton>  */}\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick = {this.toHome}\r\n                        className = {classes.icon}\r\n                    >\r\n                        <MusicNoteIcon />\r\n                        <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                            EasyTunes\r\n                        </Typography>\r\n                    </IconButton> \r\n                    <div className= {classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                        <SearchIcon />\r\n                    </div>\r\n                    \r\n                    <InputBase\r\n                        placeholder=\"Search\"\r\n                        classes={{\r\n                            root: classes.inputRoot,\r\n                            input: classes.inputInput,\r\n                        }}\r\n                        inputProps={{ 'aria-label': 'search' }}\r\n                        ref = {this.searchEl}\r\n                        onKeyPress={this.handleKeyPress}\r\n                        />\r\n                        <FormControl classes = {{div: this.selectMenu}}>\r\n                            <Select onChange= {this.handleChange}>\r\n                                <MenuItem value= {\"All\"}>All</MenuItem>\r\n                                <MenuItem value= {\"Artists\"}>Artists</MenuItem>\r\n                                <MenuItem value= {\"Songs\"}>Songs</MenuItem>\r\n                                <MenuItem value= {\"Mixtapes\"}>Mixtapes</MenuItem>\r\n                                <MenuItem value= {\"Users\"}>Users</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className={classes.grow} />\r\n                    <div className={classes.sectionDesktop}>\r\n                        <IconButton\r\n                            edge=\"end\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls={this.menuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={this.handleProfileMenuOpen}\r\n                            color=\"inherit\"\r\n                            className = {classes.icon}\r\n                            >\r\n                            <AccountCircle />\r\n                            </IconButton>\r\n                    </div>  \r\n                    <div className={classes.sectionMobile}>\r\n                        <IconButton\r\n                        aria-label=\"show more\"\r\n                        aria-controls={this.mobileMenuId}\r\n                        aria-haspopup=\"true\"\r\n                        onClick={this.handleMobileMenuOpen}\r\n                        color=\"inherit\"\r\n                        className = {classes.icon}\r\n                        >\r\n                        <MoreIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    {this.renderMobileMenu()}\r\n                    {this.renderMenu()}   \r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default withStyles(useStyles)(HeaderNavbar);","/** PLAYLIST NAVBAR\r\n * Bar at the bottom of the screen \r\n * Allows users to control the songs in the playlist they're listening to  \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport './PlaylistNavbar.css'\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport SpotifyPlayer from 'react-spotify-web-playback';\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport './AudioPlayer.css'\r\n\r\nconst useStyle=theme => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n})\r\nclass PlaylistNavbar extends Component {    \r\n    handleCallback = ({type, ...state}) => {\r\n\r\n      console.log(type)\r\n      console.log(state)\r\n \r\n      if (type === \"track_update\"){          \r\n        this.props.onSongChange(state.track.id)\r\n      }\r\n      if (type === \"player_update\"){\r\n        console.log(\"Player Update\")\r\n      }\r\n     this.props.onPlayChange(state.isPlaying)\r\n    }\r\n\r\n    shuffle = () => {\r\n      this.props.onShuffleChange()\r\n    }\r\n\r\n    render() {     \r\n      console.log(this.props)\r\n      const {classes} = this.props\r\n        return ( \r\n            <>\r\n              <div className={classes.grow}>\r\n              <AppBar \r\n              // position=\"fixed\"\r\n              // className={clsx(classes.appBar, {\r\n              //   [classes.appBarShift]: this.props.open,\r\n              // })}\r\n            \r\n            position=\"static\" \r\n            >\r\n  \r\n                      {this.props.access_token &&\r\n                              \r\n                            <SpotifyPlayer\r\n                              token= {this.props.access_token}\r\n                              callback = {this.handleCallback}\r\n                              uris={this.props.playlist}\r\n                              magnifySliderOnHover = {true}\r\n                              showSaveIcon = {false}\r\n                              play = {this.props.play}\r\n                              offset = {this.props.offset}\r\n                              styles={{\r\n                                activeColor: '#fff',\r\n                                bgColor: '#333',\r\n                                color: '#fff',\r\n                                errorColor: 'fff',\r\n                                loaderColor: '#fff',\r\n                                sliderColor: '#1cb954',\r\n                                trackArtistColor: '#d9d9d9',\r\n                                trackNameColor: '#fff',\r\n                              }}\r\n                            />\r\n                            \r\n                          \r\n                      }\r\n                    {/* <button className=\"shuffle\" onClick = {this.shuffle}> Shuffle </button>  */}\r\n              </AppBar>\r\n              </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyle)(PlaylistNavbar);","import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport SubscriptionsIcon from '@material-ui/icons/Subscriptions';\r\nimport GroupIcon from \"@material-ui/icons/Group\"\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\r\nimport HeaderNavbar from '../HeaderNavbar/HeaderNavbar'\r\nimport { palette } from '@material-ui/system';\r\nimport PlaylistNavbar from '../PlaylistNavbar/PlaylistNavbar'\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    \r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    \r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n    \r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    background: '#5472d3',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,   \r\n    }),\r\n  },\r\n  drawerClose: {\r\n    background: '#5472d3',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  bottomAppBar: {\r\n    top: 'auto',\r\n    bottom: 0,\r\n  },\r\n});\r\n\r\nclass Menu extends Component {\r\n  state = {  \r\n    open: false\r\n  }\r\n\r\n  toMyPlaylists = () => {\r\n    this.props.history.push(\"/\" + this.props.username)\r\n  }\r\n\r\n  toSavedPlaylists = () => {\r\n    this.props.history.push('/' + this.props.username)\r\n  }\r\n\r\n  toFollowers = () => {\r\n    this.props.history.push('/' + this.props.username + \"/followers\" )\r\n  }\r\n\r\n  toFollowing = () => {\r\n    this.props.history.push(\"/\" + this.props.username + '/following')\r\n  }\r\n\r\n  toRequests = () => {\r\n    this.props.history.push(\"/\" + this.props.username + '/requests')\r\n  }\r\n\r\n  toSetting = () => {\r\n    this.props.history.push(\"/\" + this.props.username + '/settings')\r\n  }\r\n\r\n  handleDrawerClose = () => {\r\n    this.setState({open: false})\r\n  }\r\n\r\n  handleDrawerOpen = () => {\r\n    this.setState({open: true})\r\n  }\r\n  toPlaylists = () => {\r\n    console.log(\"To playlists\")\r\n    this.props.history.push(\"/\" + this.props.username)\r\n    // this.handleMenuClose()\r\n  }\r\n\r\n  toFollowers = () => {\r\n    console.log(\"To followers \")\r\n    this.props.history.push(\"/\" + this.props.username + \"/followers\")\r\n    // this.handleMenuClose()\r\n  }\r\n\r\n  toSettings = () => {\r\n    console.log(\"To Settings\")\r\n    this.props.history.push(\"/\" + this.props.username + \"/settings\")\r\n    // this.handleMenuClose()\r\n  }\r\n\r\n  toLogOut = () => {\r\n    console.log(\"Log Out\")\r\n    localStorage.removeItem(\"username\")\r\n    this.props.onUsernameChange(\"\")\r\n    this.props.history.push(\"/\")\r\n    // this.handleMenuClose()\r\n  }\r\n  render() { \r\n    const {classes} = this.props\r\n    return (  \r\n      <>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\" \r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: this.state.open,\r\n        })}\r\n      >\r\n        <HeaderNavbar username= {this.props.username} onUsernameChange = {this.props.onUsernameChange} handleDrawerOpen = {this.handleDrawerOpen} open = {this.state.open} history = {this.props.history}/> \r\n      \r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: this.state.open,\r\n          [classes.drawerClose]: !this.state.open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: this.state.open,\r\n            [classes.drawerClose]: !this.state.open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <IconButton onClick={this.handleDrawerClose}  className = {classes.icon}>\r\n            {this.state.open ?\r\n                <ChevronLeftIcon /> :\r\n                <ChevronRightIcon /> \r\n            }\r\n           \r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n            <ListItem button key={\"Playlists\"} onClick = {this.toPlaylists}>\r\n              <ListItemIcon> <SubscriptionsIcon/></ListItemIcon>\r\n              <ListItemText primary={\"Mixtapes\"} />\r\n            </ListItem>\r\n\r\n            <ListItem button key={\"Followers\"} onClick = {this.toFollowers}>\r\n              <ListItemIcon><GroupIcon/></ListItemIcon>\r\n              <ListItemText primary={\"Followers\"} />\r\n            </ListItem>\r\n\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          <ListItem button key={\"Settings\"} onClick = {this.toSettings}>\r\n            <ListItemIcon> <SettingsIcon/></ListItemIcon>\r\n            <ListItemText primary={\"Settings\"} />\r\n          </ListItem>\r\n          <ListItem button key={\"Log Out\"} onClick = {this.toLogOut}>\r\n            <ListItemIcon> <ExitToAppIcon/></ListItemIcon>\r\n            <ListItemText primary={\"Log Out\"} />\r\n          </ListItem>\r\n\r\n        </List>\r\n      </Drawer>\r\n\r\n      <AppBar \r\n        position = \"fixed\" \r\n        className={clsx(classes.bottomAppBar, {\r\n          [classes.appBarShift]: this.state.open,\r\n        })}\r\n      >\r\n        <PlaylistNavbar \r\n                            username= {this.props.username} \r\n                              play = {this.props.play} \r\n                              onPlayChange = {this.props.onPlayChange} \r\n                              onPlaylistChange = {this.props.onPlaylistChange}\r\n                              onSongChange = {this.props.onSongChange}\r\n                              onShuffleChange = {this.props.onShuffleChange}\r\n                              playlist = {this.props.playlist}\r\n                              current_song = {this.props.current_song}\r\n                              access_token = {this.props.access_token}\r\n                              offset = {this.props.offset}\r\n                              shuffle= {this.props.shuffle}\r\n                              shufflePlaylist = {this.props.shufflePlaylist}\r\n                              needsUpdate = {this.props.needsUpdate}\r\n                              updated = {this.props.updated}\r\n\r\n        />   \r\n      </AppBar>\r\n      \r\n      </>\r\n    );\r\n  }\r\n}\r\n \r\nexport default withStyles(useStyles)(Menu);","\r\n\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter, Switch, Route,} from 'react-router-dom';\r\nimport './App.css';\r\n\r\nimport LoginScreen from './components/login_screen/LoginScreen.js';\r\nimport ResetPasswordScreen from './components/reset_password_screen/ResetPasswordScreen.js'\r\nimport Profile from './components/Profile/Profile'\r\nimport Playlist from './components/Playlist/Playlist'\r\nimport Home from \"./components/HomePage/Home\";\r\nimport HomeScreen from \"./components/home_screen/HomeScreen\"\r\nimport SearchScreen from \"./components/search_screen/SearchScreen.js\"\r\nimport FollowingPage from './components/Following/FollowingPage'\r\nimport Setting from './components/Setting/Setting'\r\nimport HeaderNavbar from './components/HeaderNavbar/HeaderNavbar'\r\nimport PlaylistNavbar from './components/PlaylistNavbar/PlaylistNavbar'\r\nimport Menu from './components/Menu/Menu'\r\nimport { withStyles } from '@material-ui/core/styles';\r\n// import Navbar from './components/Navbar/Navbar'\r\n\r\n\r\nconst useStyles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n})\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      username: localStorage.getItem(\"username\"),\r\n      results: null,\r\n      play: false,\r\n      current_playlist: null,\r\n      current_song: null,\r\n      access_token: null,\r\n      uris: [],\r\n      offset: 0,\r\n      shuffle: false,\r\n      needsUpdate: true\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    this.getAccesstoken()    \r\n  }\r\n\r\n  getAccesstoken = async () => {\r\n    return await fetch('https://easytunes.herokuapp.com/access-token', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                    'content-type': 'application/json'\r\n                    }})\r\n                .then(res => {\r\n                    if (res.status !== 200 && res.status !== 201) \r\n                        throw new Error('Failed');\r\n                    return res.json()\r\n                })\r\n                .then(result => {\r\n                  this.setState({access_token : result})\r\n\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n  }\r\n\r\n  onPlayChange = (play) => {\r\n    this.setState({play: play}, function() {console.log(this.state)})\r\n  }\r\n\r\n  updated = () => {\r\n    this.setState({needsUpdate: false})\r\n  }\r\n  onSongChange = (song_id) => {\r\n    let s = null\r\n    let offset = 0\r\n    this.state.current_playlist.songs.forEach((song,i) => {\r\n      if (song.song_id === song_id){\r\n        s = song\r\n        offset = i\r\n      }\r\n         \r\n    })\r\n    console.log(\"SONG CHANGE APP.JS\")\r\n    // if (!this.state.play || !this.state.playlist)\r\n    //   this.setState({current_song: s, play: true, offset:offset, needsUpdate: true}, function() {console.log(this.state)})\r\n    // else \r\n      this.setState({current_song: s, play: true, offset:offset, needsUpdate: false}, function() {console.log(this.state)})\r\n  }\r\n\r\n  shufflePlaylist = (uris, playlist) => {\r\n    var currentIndex = uris.length, temporaryValue, randomIndex;\r\n    let song = null\r\n\r\n      while (currentIndex > 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        temporaryValue = uris[currentIndex];\r\n        uris[currentIndex] = uris[randomIndex];\r\n        uris[randomIndex] = temporaryValue;\r\n      }\r\n      console.log(uris[0])\r\n      playlist.songs.forEach(s => {\r\n        console.log(s.song_uri)\r\n        if (s.song_uri === uris[0])\r\n          song = s\r\n      })\r\n    console.log([uris, song])\r\n    return [uris, song]\r\n  }\r\n\r\n  onPlaylistChange = (playlist, s) => {\r\n    let uris = []\r\n    let result = [uris]\r\n    let offset = 0\r\n    if (playlist){\r\n      uris = playlist.songs.map((song,i) => {\r\n        if (song.song_uri === s.song_uri)  \r\n          offset = i\r\n        return song.song_uri\r\n      })\r\n      result[0] = uris\r\n\r\n    if (this.state.shuffle){\r\n      result = this.shufflePlaylist(uris, playlist)\r\n    }\r\n\r\n  }\r\n  console.log(\"PLAYLIST CHANGE APP.JS\")\r\n  result.push(playlist.songs[offset])\r\n  console.log(result)\r\n    if (!this.state.play || !this.state.playlist)\r\n      this.setState({current_playlist : playlist, play : true, uris: result[0], current_song: result[1], offset: offset, needsUpdate:true}, function() {console.log(this.state)})\r\n    else \r\n      this.setState({current_playlist : playlist, play : true, uris: result[0], current_song: result[1], offset: offset, needsUpdate:false}, function() {console.log(this.state)})\r\n  }\r\n\r\n  onShuffleChange = () => {\r\n    let uris = this.state.uris \r\n    if (this.state.shuffle){\r\n      uris = this.state.current_playlist.songs.map (song => {return song.song_uri})\r\n    }\r\n    this.setState({shuffle: !this.state.shuffle, uris: uris})\r\n  }\r\n\r\n  onUsernameChange = (username) => {\r\n    this.setState({username: username})\r\n  }\r\n\r\n  onSearchResults = (results) => {\r\n    this.setState({results: results})\r\n  }\r\n\r\n  atHome = () => {\r\n    this.setState({atHome : true})\r\n  }\r\n\r\n  notAtHome = () => {\r\n    this.setState({atHome : false})\r\n  }\r\n\r\n\r\n  \r\n  render() {\r\n    const {classes} = this.props\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"App\"> \r\n        <div className={this.state.username ? classes.root : null}>\r\n            {this.state.username ? \r\n            <Route render = {(props) => \r\n              <Menu {...props} \r\n                username = {this.state.username} \r\n                onUsernameChange = {this.onUsernameChange}\r\n                play = {this.state.play} \r\n                onPlayChange = {this.onPlayChange} \r\n                onPlaylistChange = {this.onPlaylistChange}\r\n                onSongChange = {this.onSongChange}\r\n                onShuffleChange = {this.onShuffleChange}\r\n                playlist = {this.state.uris}\r\n                current_song = {this.state.current_song}\r\n                access_token = {this.state.access_token}\r\n                offset = {this.state.offset}\r\n                shuffle= {this.state.shuffle}\r\n                shufflePlaylist = {this.shufflePlaylist}\r\n                needsUpdate = {this.state.needsUpdate}\r\n                pdated = {this.updated}\r\n              />\r\n              // <HeaderNavbar {...props} username= {this.state.username} onUsernameChange = {this.onUsernameChange}/> \r\n            }/>\r\n            :  null}\r\n\r\n            \r\n\r\n            <Switch>\r\n              <Route exact path='/' \r\n                render = {(props) => (\r\n                  <Home {...props} username = {this.state.username} />\r\n                )}\r\n                /> \r\n              {/* <Route exact path='/' component = {Home}/> */}\r\n\r\n              <Route exact path='/login' \r\n                render = {(props) => (\r\n                  <LoginScreen {...props} username = {this.state.username} login = {true} onUsernameChange={this.onUsernameChange} />\r\n                )}\r\n                /> \r\n\r\n              <Route exact path='/register' \r\n                render = {(props) => (\r\n                  <LoginScreen {...props} username = {this.state.username} login = {false} onUsernameChange={this.onUsernameChange} />\r\n                )}\r\n              />\r\n\r\n              <Route exact path='/forgotpassword' component={ResetPasswordScreen}/>\r\n\r\n              <Route exact path='/home' \r\n                render = {(props) => (\r\n                  <HomeScreen {...props} \r\n                    username = {this.state.username} \r\n                    access_token = {this.state.access_token}\r\n                    current_playlist = {this.state.current_playlist}\r\n                    current_song = {this.state.current_song}/>\r\n                )}\r\n              />\r\n\r\n              <Route exact path='/searchq=:query/type=:type' \r\n                render = {(props) => (\r\n                <SearchScreen {...props} username = {this.state.username} results = {this.state.results}/> \r\n              )}/>\r\n\r\n              <Route exact path='/:username/followers' \r\n                render = {(props => (\r\n                  <FollowingPage {...props} username = {this.state.username} state = \"followers\"/>\r\n                ))}\r\n              />\r\n\r\n              <Route exact path='/:username/following' \r\n                render = {(props => (\r\n                  <FollowingPage {...props} username = {this.state.username} state = \"following\" />\r\n                ))}\r\n              />\r\n\r\n              <Route exact path='/:username/requests' \r\n                render = {(props => (\r\n                  <FollowingPage {...props} username = {this.state.username} state = \"requests\" />\r\n                ))}\r\n              />\r\n\r\n              <Route exact path='/:username/mixtape=:playlistid'\r\n                render = {(props) => (\r\n                  <Playlist {...props} \r\n                    username = {this.state.username}\r\n                    play = {this.state.play}\r\n                    onPlayChange = {this.onPlayChange}\r\n                    onPlaylistChange = {this.onPlaylistChange}\r\n                    onSongChange = {this.onSongChange}\r\n                    current_playlist = {this.state.current_playlist}\r\n                    current_song = {this.state.current_song}\r\n                    shuffle= {this.shuffle}\r\n                  />\r\n                )}\r\n              /> \r\n\r\n              <Route exact path='/:username/settings'\r\n                render = {(props) => (\r\n                  <Setting {...props} username = {this.state.username} onUsernameChange = {this.onUsernameChange}/>\r\n                )}\r\n              />\r\n\r\n              <Route exact path='/:username'\r\n                render = {(props) => (\r\n                  <Profile {...props} \r\n                  username = {this.state.username} \r\n                  play = {this.state.play} \r\n                  onPlayChange = {this.onPlayChange} \r\n                  onPlaylistChange = {this.onPlaylistChange}\r\n                  current_playlist = {this.state.current_playlist}\r\n                  shuffle= {this.shuffle}\r\n                />\r\n                )}\r\n              />\r\n              \r\n              <Route exact path='/:username/saved-mixtapes'\r\n                render = {(props) => (\r\n                  <Profile {...props} \r\n                  username = {this.state.username} \r\n                  play = {this.state.play} \r\n                  onPlayChange = {this.onPlayChange} \r\n                  onPlaylistChange = {this.onPlaylistChange}\r\n                  current_playlist = {this.state.current_playlist}\r\n                  shuffle= {this.shuffle}\r\n                />\r\n                )}\r\n              />\r\n              {/* <Route path='/:userid/following' component={Following}/> */}\r\n              \r\n              {/* <Route path='/:any' component={HomeScreen} /> */}\r\n            </Switch>\r\n            {/* {this.state.username ? \r\n            <>\r\n            \r\n              <Route render = {(props) => \r\n                <PlaylistNavbar {...props} \r\n                            username= {this.state.username} \r\n                              play = {this.state.play} \r\n                              onPlayChange = {this.onPlayChange} \r\n                              onPlaylistChange = {this.onPlaylistChange}\r\n                              onSongChange = {this.onSongChange}\r\n                              onShuffleChange = {this.onShuffleChange}\r\n                              playlist = {this.state.uris}\r\n                              current_song = {this.state.current_song}\r\n                              access_token = {this.state.access_token}\r\n                              offset = {this.state.offset}\r\n                              shuffle= {this.state.shuffle}\r\n                              shufflePlaylist = {this.shufflePlaylist}\r\n                              needsUpdate = {this.state.needsUpdate}\r\n                              updated = {this.updated}\r\n\r\n                />   \r\n              \r\n              }/>\r\n              </>\r\n          :  null} */}\r\n\r\n          </div>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(App)","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>, \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}