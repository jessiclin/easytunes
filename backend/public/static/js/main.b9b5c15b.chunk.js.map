{"version":3,"sources":["components/login_screen/SignIn.js","components/login_screen/SignUp.js","components/Navbar/Navbar.js","components/login_screen/LoginScreen.js","components/reset_password_screen/ResetPasswordScreen.js","components/Profile/Playlists/PlaylistButton.js","components/Profile/Playlists/NewPlaylistButton.js","components/Profile/Playlists/Playlists.js","components/Profile/Playlists/SavedPlaylistButton.js","components/Profile/Playlists/SavedPlaylists.js","components/Profile/Profile.js","components/Playlist/Songlist/Song.js","components/Playlist/Songlist/Songlist.js","components/Playlist/Comments/Comment.js","components/Playlist/Comments/Reply.js","components/Playlist/Comments/ShowReplyCard.js","components/Playlist/Comments/ShowReplies.js","components/Playlist/Comments/UserComment.js","components/Playlist/Comments/Comments.js","components/Playlist/PlaylistSetting/PlaylistSetting.js","components/Playlist/Playlist.js","components/HomePage/Home.js","components/home_screen/HomeScreen.js","components/search_screen/AddSongs.js","components/search_screen/UserCard.js","components/search_screen/PlaylistCard.js","components/search_screen/ArtistCard.js","components/search_screen/SearchListCard.js","components/search_screen/SearchList.js","components/search_screen/SearchScreen.js","components/Following/Follower.js","components/Following/Followers.js","components/Following/FollowingUser.js","components/Following/Following.js","components/Following/Request.js","components/Following/Requests.js","components/Following/FollowingPage.js","components/Setting/AccountSetting/Update.js","components/Setting/AccountSetting/UpdatePassword.js","components/Setting/AccountSetting/AccountSetting.js","components/Setting/AdvancedSetting/AdvancedSetting.js","components/Setting/PrivacySetting/PrivacyToggles.js","components/Setting/PrivacySetting/PrivacySetting.js","components/Setting/Setting.js","components/HeaderNavbar/HeaderNavbar.js","components/PlaylistNavbar/PlaylistNavbar.js","components/Menu/Menu.js","App.js","serviceWorker.js","index.js"],"names":["SignIn","props","state","error","setErrmess","err","setState","errorMess","componentDidMount","console","log","username","toHome","handleSignIn","event","a","preventDefault","email","emailEl","current","children","value","toLowerCase","password","passwordEl","trim","length","requestBody","query","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","result","data","login","onUsernameChange","localStorage","setItem","window","location","replace","catch","message","React","createRef","classes","this","Container","component","maxWidth","CssBaseline","className","paper","Avatar","avatar","Typography","variant","form","noValidate","TextField","InputProps","input","margin","required","fullWidth","id","label","name","autoComplete","autoFocus","ref","type","Button","color","submit","onClick","Grid","container","item","xs","Link","href","Component","withStyles","theme","marginTop","spacing","display","flexDirection","alignItems","backgroundColor","width","paddingLeft","paddingRight","SignUp","handleSignUp","usernameEl","confirm","confirmEl","userUrl","pattern","test","errors","createUser","palette","secondary","main","useStyles","makeStyles","root","flexGrow","appbar","background","icon","fontSize","appbarWrapper","title","Navbar","AppBar","elevation","Toolbar","IconButton","edge","menuButton","aria-label","to","Login","loginVisible","signUpVisible","history","push","document","getElementsByClassName","style","borderBottom","borderRight","changeView","invisible","visible","target","element","getElementById","Reset","sent","handleReset","emailR","Math","floor","random","PlaylistButton","playlist","deleteConfirmVisible","setVisible","setInvisible","toPlaylist","encodeURIComponent","_id","deletePlaylist","setPlaylists","getUserPlaylists","handlePlay","current_playlist","onPlayChange","play","onPlaylistChange","alt","src","playlist_img","class","public","songs","total_duration","size","likes","playlist_id","sessionUser","ontSize","Dialog","open","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogActions","deleteButton","NewPlaylistButton","popupVisible","user_id","createNewPlaylist","nameEl","addButton","dialog","DialogContent","DialogContentText","minWidth","outline","float","Playlists","playlists","user","map","key","editing","text","SavedPlaylistButton","loading","getPlaylistByID","getUserByUsername","saved_playlists","SavedPlaylists","Profile","showSavedPlaylists","showMyPlaylists","showUploadedSongs","profileUsername","match","params","profileUserInfo","profileAccountCreationDate","profileFollowers","profilePlaylists","profileSavedPlaylists","date","Date","parseInt","joined","followers","getMonth","getDate","getFullYear","isFollowing","following","forEach","follower","fontWeight","profile_img","Song","song","playlistId","handleDelete","removeSong","index","moveUp","handleMoveUp","moveDown","handleMoveDown","current_song","song_id","onSongChange","handlePlayClick","song_img","artists","duration","disabled","playlist_length","Songlist","splice","temp","i","Comment","buttonsVisible","handleBlur","handleCancel","handleSubmit","commentEl","stateChange","addComment","comments","placeholder","onFocus","onBlur","border","Reply","visibility","onChange","commentIndex","addReply","ShowReplyCard","getUserById","ShowReplies","repliesVisible","toggleVisibility","replies","reply","j","UserComment","editVisible","handleUpdate","handleEditVisibility","updateComments","deleteComment","handleEditSubmit","editComment","Comments","editCommentVisible","comment","elem","toString","PlaylistSetting","save","edit","handleEditClick","handleSave","changePrivacy","changeName","Post","e","file","files","formData","FormData","append","r","defaultValue","accept","height","Playlist","songsVisible","commentsVisible","settingsVisible","playlistInfo","playlistid","forkPopupVisible","fork_playlist_name","liked","getPlaylist","liked_playlists","forkPlaylist","uploaded","setForkInvisible","setForkVisible","forkInputOnChange","handleLike","obj","updatePrivacy","updateName","updateImg","removeSongs","addSong","Promise","resolve","reject","artist","song_uri","User","navigator","clipboard","writeText","Home","Box","hero","textAlign","gutterBottom","minHeight","backgroundImage","backgroundRepeat","backgroundSize","justifyContent","position","HomeScreen","current_playlist_id","current_song_id","handleHome","getArtists","access_token","AddSong","createNew","changeVisible","handleAdd","songlength","millisToSeconds","duration_ms","currentTarget","album","images","url","uri","handleClose","createAndAdd","createPlaylist","handleClickOpen","openNew","closeNew","anchorEl","millis","dialogButton","UserCard","sessionUserRequests","sessionUserFollowers","follow_requests","userRequestedFollow","requests","requested","request","searchedRequestedFollow","searchedFollowing","userFollowing","sendRequest","addRequest","toUser","PlaylistCard","handleFavorite","ArtistCard","showSongs","tracks","handleClick","marginLeft","items","SearchListCard","renderSong","renderArtist","artistNames","songLength","SearchList","searchList","users","SearchScreen","searchQuery","searchResults","searchType","fetchData","last","searchRes","searchUsers","searchPlaylists","fetchPlaylists","fetchUsers","fetchSpotify","track","componentDidUpdate","paddingBotton","Follower","removeFollower","updateFollowers","Followers","getFollowers","FollowingUser","unFollow","updateFollowing","Following","getFollowing","followings","Request","acceptRequest","updateRequests","addFollower","Requests","getRequests","FollowingPage","showFollowers","showFollowing","showRequests","getAccountCreationDate","Update","original","new","handleChange","UpdatePassword","handlePassChange","handleConfChange","AccountSetting","updateProfileImg","AdvancedSetting","PrivacyToggles","playlist_privacy","default_public_playlist","verify_request","verify_requests","updatePlaylist","onPrivacyChange","updateVerify","PrivacySetting","Setting","showAccount","showPrivacy","showAdvanced","content","toolbar","classname","wrapper","col","settingsOptionsButton","settingsContent","padding","mixins","paddingTop","sidebarHeader","marginBottom","settingsConent","HeaderNavbar","mobileMoreAnchorEl","handleProfileMenuOpen","handleMobileMenuClose","handleMenuClose","handleMobileMenuOpen","toPlaylists","toFollowers","toSettings","toLogOut","removeItem","renderMenu","anchorOrigin","vertical","horizontal","menuId","transformOrigin","Boolean","MenuItem","renderMobileMenu","mobileMenuId","aria-controls","aria-haspopup","handleKeyPress","searchEl","grow","zIndex","handleDrawerOpen","clsx","hide","noWrap","search","searchIcon","InputBase","inputRoot","inputInput","inputProps","onKeyPress","FormControl","div","selectMenu","Select","sectionDesktop","sectionMobile","marginRight","breakpoints","up","borderRadius","shape","fade","common","white","pointerEvents","transition","transitions","create","appBar","drawer","easing","sharp","leavingScreen","appBarShift","enteringScreen","PlaylistNavbar","handleCallback","isPlaying","shuffle","onShuffleChange","token","callback","uris","magnifySliderOnHover","showSaveIcon","offset","styles","activeColor","bgColor","loaderColor","sliderColor","trackArtistColor","trackNameColor","Menu","toMyPlaylists","toSavedPlaylists","toFollowing","toRequests","toSetting","handleDrawerClose","Drawer","drawerOpen","drawerClose","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","bottomAppBar","shufflePlaylist","needsUpdate","updated","flexShrink","whiteSpace","overflowX","top","bottom","App","getAccesstoken","s","temporaryValue","randomIndex","currentIndex","onSearchResults","results","atHome","notAtHome","getItem","render","pdated","exact","path","ResetPasswordScreen","hostname","ReactDOM","StrictMode","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9b5c15b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n//import {Link} from 'react-router-dom';\r\n\r\n\r\nconst useStyles = theme => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: 'blue',\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n    input: {\r\n      paddingLeft: \"10px\",\r\n      paddingRight: \"10px\"\r\n    }\r\n\r\n  });\r\n  \r\n\r\nclass SignIn extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.emailEl = React.createRef();\r\n        this.passwordEl = React.createRef();\r\n        \r\n        this.username = ''\r\n        this.onUsernameChange = this.props.onUsernameChange\r\n        this.toHome = this.props.toHome\r\n    }\r\n\r\n    state = {\r\n        error : null\r\n    }\r\n    \r\n    setErrmess = (err) => {\r\n        this.setState({errorMess : err})\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        console.log(this.props)\r\n        if (this.props.username)\r\n            this.props.toHome()\r\n    }\r\n\r\n    handleSignIn = async (event) => {\r\n        event.preventDefault();\r\n        const email = this.emailEl.current.children[1].children[0].value.toLowerCase();\r\n        const password = this.passwordEl.current.children[1].children[0].value;\r\n\r\n        if (email.trim().length === 0 || password.trim().length === 0)\r\n            return;\r\n\r\n        // Request backened \r\n        let requestBody = {\r\n            query: `\r\n              query {\r\n                login(email: \"${email}\", password: \"${password}\") {\r\n                  _id\r\n                  username\r\n                  token\r\n                  token_expiration\r\n                }\r\n              }\r\n            `\r\n          };\r\n\r\n        fetch('http://localhost:5000/graphql', {\r\n                                    method: 'POST',\r\n                                    body: JSON.stringify(requestBody),\r\n                                    headers: {\r\n                                    'content-type': 'application/json'\r\n                                    }\r\n                                })\r\n                                .then(res => {\r\n                                    if (res.status !== 200 && res.status !== 201) \r\n                                        throw new Error('Email and password do not match');\r\n                                    return res.json()\r\n                                })\r\n                                .then(result => {\r\n                                    console.log(result.data.login.username)\r\n                                    // Load the data in \r\n                                    this.username = result.data.login.username\r\n\r\n                                    this.onUsernameChange(this.username)\r\n                                    localStorage.setItem(\"username\", this.username);\r\n                                   // console.log(localStorage.getItem(\"username\"))\r\n                                    fetch('http://localhost:5000/authorization', {\r\n                                        method: 'POST',\r\n                        \r\n                                        headers: {\r\n                                            'content-type': 'application/json'\r\n                                        }\r\n                                        })\r\n                                        .then(res => {\r\n                                            if (res.status !== 200 && res.status !== 201) \r\n                                                throw new Error('Authorization Failed');\r\n                                            return res.json()\r\n                                        })\r\n                                        .then(data => {\r\n                                            console.log(data)\r\n                                            window.location.replace(data)\r\n                                        })\r\n                                        .catch(err => {\r\n                                            console.log(err);\r\n                                        });\r\n                                  //  this.toHome()\r\n                                })\r\n                                .catch(err => {\r\n                                    this.setState({error: err.message})\r\n                                    console.log(err.message);\r\n                                });\r\n    }\r\n\r\n    render() { \r\n        const {classes}  = this.props; \r\n\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n              <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n              </Avatar>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Sign in\r\n              </Typography>\r\n              {this.state.error !== null ? \r\n              <Typography>\r\n              {this.state.error}\r\n            </Typography> : null\r\n              }\r\n              <form className={classes.form} noValidate>\r\n                <TextField\r\n                  InputProps={{\r\n                    className: classes.input,\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  autoFocus\r\n                  ref = {this.emailEl}\r\n                />\r\n                <TextField\r\n                  InputProps={{\r\n                    className: classes.input,\r\n                  }}  \r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  ref = {this.passwordEl}\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  onClick = {this.handleSignIn}\r\n                >\r\n                  Sign In\r\n                </Button>\r\n                \r\n                <Grid container>\r\n                  <Grid item xs>\r\n                    <Link href=\"/forgotpassword\" variant=\"body2\">\r\n                      Forgot password?\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n            </div>\r\n          </Container>\r\n        );\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyles)(SignIn);\r\n","import React, { Component } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {MuiThemeProvider} from \"@material-ui/core/styles\";\r\n//import theme from '../../Theme.js';\r\n\r\n\r\nconst useStyles= theme => ({\r\n  \r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  input: {\r\n    paddingLeft: \"10px\",\r\n    paddingRight: \"10px\"\r\n  }\r\n});\r\n\r\n\r\nclass SignUp extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.emailEl = React.createRef();\r\n        this.passwordEl = React.createRef();\r\n        this.usernameEl = React.createRef();\r\n        this.confirmEl = React.createRef()\r\n        this.username = ''\r\n        this.onUsernameChange = this.props.onUsernameChange\r\n        this.toHome = this.props.toHome\r\n    }\r\n\r\n    state = {\r\n        errorMess : null\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if (this.props.username)\r\n            this.props.toHome()\r\n    }\r\n    setErrmess = (err) => {\r\n        this.setState({errorMess : err})\r\n    }\r\n        handleSignUp = async (event) =>{\r\n            event.preventDefault();\r\n            const email = this.emailEl.current.children[1].children[0].value.toLowerCase();\r\n            const password = this.passwordEl.current.children[1].children[0].value;\r\n            const username = this.usernameEl.current.children[1].children[0].value;\r\n            const confirm = this.confirmEl.current.children[1].children[0].value;\r\n            const userUrl = \"easytunes.com/\" + username;\r\n            console.log(email, password, username, confirm, userUrl)\r\n            if (email.trim().length === 0 || password.trim().length === 0 || username.trim().length === 0 || confirm.trim().length === 0){\r\n                console.log(\"Fill out all inputs\")\r\n                this.setErrmess(\"Fill out all inputs\")\r\n                return;\r\n            }\r\n                \r\n    \r\n            \r\n            if (password !== confirm){\r\n                this.setErrmess(\"Passwords do not match\")\r\n                return;\r\n            }\r\n            \r\n            const pattern = /.*@.*\\.com/i\r\n            console.log(pattern.test(email))\r\n            if (!pattern.test(email)){\r\n                this.setErrmess(\"Input a valid email\")\r\n                return \r\n            }\r\n                \r\n            // Request backened \r\n            let requestBody = {\r\n                query: `\r\n                mutation{\r\n                    createUser(userInput: {email: \"${email}\", password:\"${password}\", username:\"${username}\", url:\"${userUrl}\" })  {\r\n                                      email\r\n                                      password\r\n                                      username\r\n                                      url\r\n                    }\r\n                  }\r\n                `\r\n              };\r\n    \r\n            await  fetch('http://localhost:5000/graphql', {\r\n                                        method: 'POST',\r\n                                        body: JSON.stringify(requestBody),\r\n                                        headers: {\r\n                                        'content-type': 'application/json'\r\n                                        }\r\n                                    })\r\n                                    .then(res => {\r\n                                  \r\n                                        // if (res.status !== 200 && res.status !== 201) \r\n                                        //     throw new Error('Failed!');\r\n                                        \r\n                                        return res.json();\r\n                                    })\r\n                                    .then(result => {\r\n                                      console.log(result)\r\n                                        if (result.errors) {\r\n                                            if (/.*email.*/.test(result.errors[0].message))\r\n                                                throw new Error('Email already in use')\r\n                                            if (/.*username.*/.test(result.errors[0].message))\r\n                                                throw new Error('Username already in use')\r\n                                        }\r\n                                        else {\r\n                                          // Load the data in \r\n                                         this.state.username = result.data.createUser.username\r\n                                          console.log(result)\r\n                                          this.onUsernameChange(this.state.username)\r\n                                          localStorage.setItem(\"username\", this.state.username);\r\n                                          fetch('http://localhost:5000/authorization', {\r\n                                              method: 'POST',\r\n                              \r\n                                              headers: {\r\n                                                  'content-type': 'application/json'\r\n                                              }\r\n                                              })\r\n                                              .then(res => {\r\n                                                  if (res.status !== 200 && res.status !== 201) \r\n                                                      throw new Error('Playlist not found');\r\n                                                  return res.json()\r\n                                              })\r\n                                              .then(data => {\r\n                                                  console.log(data)\r\n                                                  window.location.replace(data)\r\n                                              })\r\n                                              .catch(err => {\r\n                                                  console.log(err);\r\n                                              });\r\n                                          } \r\n                                        \r\n                                   \r\n                                    })\r\n                                    .catch(err => {\r\n                                        console.log(err);\r\n                                        this.setErrmess(err.message)\r\n                                    });\r\n            \r\n        }\r\n\r\n    render() { \r\n      \r\n        const {classes}  = this.props; \r\n        console.log(this.state.errorMess)\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon/>\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\" >\r\n          Sign up\r\n        </Typography>\r\n        {this.state.errorMess !== null ? \r\n        <Typography> {this.state.errorMess}</Typography> : null\r\n        }\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                InputProps={{\r\n                    className: classes.input,\r\n                  }}\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                ref = {this.emailEl}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                InputProps={{\r\n                    className: classes.input,\r\n                  }}\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"userName\"\r\n                label=\"Username\"\r\n                name=\"userName\"\r\n                ref = {this.usernameEl}\r\n                autoFocus\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                InputProps={{\r\n                    className: classes.input,\r\n                  }}\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                ref = {this.passwordEl}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n            <TextField\r\n                InputProps={{\r\n                    className: classes.input,\r\n                  }}\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                id=\"confirm-password\"\r\n                ref = {this.confirmEl}\r\n              />\r\n              \r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick = {this.handleSignUp}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyles)(SignUp);\r\n","import React from \"react\";\r\nimport {makeStyles } from '@material-ui/styles';\r\nimport { AppBar, Icon, Toolbar } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  appbar: {\r\n    background: \"black\",\r\n  },\r\n  icon: {\r\n    fontSize: \"large\", \r\n  },\r\n  appbarWrapper: {\r\n    width: '80%',\r\n    margin: '0 auto'\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n\r\n}));\r\n\r\nfunction Navbar() {\r\n  const classes = useStyles();\r\n\r\n\r\n    \r\n  return (\r\n\r\n  <div className={classes.root}>\r\n    <AppBar className={classes.appbar} elevation={0}>\r\n      <Toolbar className={classes.appbarWrapper}>\r\n      <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            < MusicNoteIcon/>\r\n          </IconButton>\r\n      <Typography variant=\"h6\" className={classes.title}>\r\n            EasyTunes\r\n      </Typography>\r\n      <Link to=\"/register\">\r\n      <Button color=\"inherit\" onClick={() => { console.log('onClick'); }}>\r\n      Sign Up\r\n      </Button>\r\n      </Link>\r\n      <Link to=\"/login\">\r\n      <Button color=\"inherit\">Login</Button>\r\n      </Link>\r\n      </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","/** LOGIN SCREEN\r\n * Handles signing in and signing up \r\n */\r\n\r\nimport React, { Component } from 'react';\r\n\r\n// Import css \r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport \"./LoginScreen.css\";\r\nimport SignIn from './SignIn'\r\nimport SignUp from './SignUp'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        loginVisible: this.props.login,\r\n        signUpVisible: !this.props.login\r\n   }\r\n\r\n    componentDidMount = () => {\r\n        if (this.props.username)\r\n            this.props.history.push('/home')\r\n        if (this.props.login){\r\n            document.getElementsByClassName(\"to-signin-btn\")[0].style.borderBottom = \"none\"\r\n            document.getElementsByClassName(\"to-signup-btn\")[0].style.borderBottom = \"1px solid lightgray\";\r\n            document.getElementsByClassName(\"to-signin-btn\")[0].style.borderRight = \"1px solid lightgray\"\r\n        }\r\n        else {\r\n            document.getElementsByClassName(\"to-signup-btn\")[0].style.borderBottom = \"none\"\r\n            document.getElementsByClassName(\"to-signin-btn\")[0].style.borderBottom = \"1px solid lightgray\";\r\n            document.getElementsByClassName(\"to-signin-btn\")[0].style.borderRight = \"1px solid lightgray\"\r\n        }\r\n\r\n   }\r\n   // Handle rendering sign in or sign up \r\n    changeView = (event) => {\r\n        const visible = event.target.className\r\n        \r\n        let invisible;\r\n        if (visible === \"to-signin-btn\"){\r\n            this.setState({\r\n                loginVisible : true,\r\n                signUpVisible : false\r\n            })\r\n            invisible = \"to-signup-btn\"\r\n            this.props.history.push('/login')\r\n        }\r\n        else {\r\n            this.setState({\r\n                loginVisible : false,\r\n                signUpVisible : true\r\n            })\r\n            invisible = \"to-signin-btn\"\r\n            this.props.history.push('/register')\r\n        }\r\n\r\n        document.getElementsByClassName(visible)[0].style.borderBottom = \"none\"\r\n        document.getElementsByClassName(invisible)[0].style.borderBottom = \"1px solid lightgray\";\r\n    }\r\n\r\n    element = (id) => {\r\n        return document.getElementById(id)\r\n    }\r\n\r\n    // Go to home page after logging in \r\n    toHome = () => {\r\n        const url = '/home'\r\n        const {history} = this.props;\r\n        history.push(url)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <h1>EasyTunes</h1>\r\n                </div>\r\n\r\n                <div className=\"container login-container\">\r\n                    <div className=\"row justify-content-center login-btns\">  \r\n                            <button className=\"to-signin-btn\" onClick = {this.changeView} >Sign In</button>\r\n                            <button className=\"to-signup-btn\" onClick = {this.changeView}> Sign Up</button>\r\n                    </div>\r\n\r\n                    {this.state.loginVisible ? <SignIn onUsernameChange = {this.props.onUsernameChange} toHome = {this.toHome} username = {this.props.username}/> : null}\r\n                    {this.state.signUpVisible ? <SignUp onUsernameChange = {this.props.onUsernameChange} toHome = {this.toHome} username = {this.props.username}/> : null}\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Login;\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\n// npm install react-router-dom to use Router \r\nimport {Link} from 'react-router-dom';\r\n\r\n// Import css \r\nimport \"./ResetPasswordScreen.css\";\r\n\r\n\r\n\r\nclass Reset extends Component {\r\n    constructor() {\r\n        super()\r\n        this.emailR = React.createRef();\r\n    } \r\n    state = { \r\n        sent : false,\r\n        errorMess : null\r\n    }\r\n    \r\n    element = (id) => {\r\n        return document.getElementById(id)\r\n    }\r\n\r\n    handleReset = () => {\r\n        const email = this.emailR.current.value.toLowerCase();\r\n        const password = Math.floor(Math.random() * (99999999 - 10000000) + 10000000)\r\n        console.log(password)\r\n\r\n        if (email.trim().length === 0)\r\n            return;\r\n\r\n        let requestBody = {\r\n            query: `\r\n              mutation {\r\n                resetPassword(email: \"${email}\", new_password: \"${password}\") {\r\n                  _id\r\n                }\r\n              }\r\n            `\r\n          };\r\n\r\n        fetch('http://localhost:5000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) {\r\n                    throw new Error('post error')\r\n                }\r\n                if (res.err) {\r\n                    \r\n                }\r\n                this.setState({errorMess : null})\r\n                this.setState({sent : true})\r\n                return res.json()\r\n            })\r\n            .catch(err => {\r\n                this.setState({errorMess : err.message})\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <div className=\"container\">\r\n                    <h1>EasyTunes</h1>\r\n                </div>\r\n\r\n                <div className=\"container login-container\">\r\n\r\n                    <div className=\"row justify-content-center forgot-banner-row\">\r\n                        <div className=\"col-sm-12 text-center align-self-center forgot-banner\"> Reset Your Password</div>\r\n                    </div>\r\n\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-sm-12 cred\">        \r\n                            Please enter your email address.\r\n                            <div className=\"error-message-reset\">\r\n                                {this.state.errorMess}\r\n                            </div>\r\n                            <div className=\"input-group\">\r\n                                <input className=\"input\" id=\"email\" type=\"text\" ref={this.emailR} required/>\r\n                                <label className=\"label\">Email</label>\r\n                            </div>    \r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row justify-content-center next\">\r\n                        <div className=\"col-sm-12 text-center align-self-center login-col\">\r\n                            <button onClick = {this.handleReset}> Reset Password</button>\r\n                        </div>\r\n                        <Link to=\"/login\" className=\"login\">\r\n                                Cancel\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Reset;","/** PLAYLIST BUTTON\r\n * Component used within playlist and saved playlists\r\n * Handles one playlist in the playlists page \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport {AiFillHeart, AiFillEyeInvisible, AiFillEye} from 'react-icons/ai'\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport {RiPlayListLine} from 'react-icons/ri'\r\nimport {AiOutlineDelete, AiOutlineCheckCircle, AiOutlineCloseCircle} from 'react-icons/ai'\r\n// FaRegPauseCircle\r\nimport {FaRegPlayCircle, FaRegPauseCircle} from 'react-icons/fa'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport Button from '@material-ui/core/Button'\r\nconst useStyle = theme => ({\r\n    deleteButton: {\r\n\r\n    }\r\n})\r\nclass PlaylistButton extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.setPlaylists = this.props.setPlaylists;\r\n    }\r\n    \r\n    state = { \r\n        playlist: this.props.playlist,\r\n        username: this.props.username,\r\n        deleteConfirmVisible: false,\r\n        history: this.props.history\r\n    }\r\n\r\n    // Set delete confirmation box to visible\r\n    setVisible = () => {\r\n        this.setState({deleteConfirmVisible : true})\r\n    }\r\n\r\n    // Set delete confirmation box to invisible \r\n    setInvisible = () => {\r\n        this.setState({deleteConfirmVisible: false})\r\n    }\r\n\r\n    // Go to the playlist page \r\n    toPlaylist = () => {\r\n        this.state.history.push('/' + encodeURIComponent(this.state.playlist.username) + '/playlist='+ this.state.playlist._id)\r\n    }\r\n\r\n    // Delete the playlist \r\n    deletePlaylist = () => {\r\n        this.setInvisible()\r\n        // Delete the playlist \r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    deletePlaylist (id : \"${this.state.playlist._id}\") {\r\n                        _id \r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        // Delete the playlist \r\n        fetch('http://localhost:5000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('Failed');\r\n                return res.json()\r\n            })\r\n            .then(result => {\r\n                 // Update the playlists on the UI \r\n                requestBody = {\r\n                    query: `\r\n                        query {\r\n                            getUserPlaylists(username: \"${this.state.username}\"){\r\n                                _id\r\n                                name\r\n                                username\r\n                                likes \r\n                                public\r\n                                total_duration\r\n                                playlist_img\r\n                                songs {\r\n                                    song_id\r\n                                    song_uri\r\n                                    name\r\n                                    artists\r\n                                    song_img\r\n                                }\r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n\r\n                fetch(\"http://localhost:5000/graphql\", {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(requestBody),\r\n                    headers: {\r\n                    'content-type': 'application/json'\r\n                    }})\r\n                .then(res => {\r\n                    if (res.status !== 200 && res.status !== 201) \r\n                        throw new Error('Failed');\r\n                    return res.json()\r\n                })\r\n                .then(result => {\r\n                    this.setPlaylists(result.data.getUserPlaylists)\r\n                    //error here\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    \r\n    render() { \r\n        const playlist = this.state.playlist \r\n\r\n        return (\r\n            <div className=\"playlist-row\">\r\n                <div className=\"col\">\r\n                    <img alt = \"playlist_img\" src={playlist.playlist_img} class=\"song_picture\"></img>\r\n                </div>\r\n\r\n                <div className=\"col text-left\">\r\n                    {playlist.name}\r\n                    {this.state.username === playlist.username ? <span>  {playlist.public ? <AiFillEye/> : < AiFillEyeInvisible/>} </span> : null}\r\n                </div>\r\n\r\n                <div className=\"col text-left\">\r\n                    {playlist.songs.length} {playlist.songs.length === 1 ? \"Song\" : \"Songs\"} - {playlist.total_duration < 3600 ? \"0 hr \" + (playlist.total_duration < 600 ? \"0\" + Math.floor(playlist.total_duration/60) + \" min\": Math.floor(playlist.total_duration/60) + \" min\") :\r\n                (Math.floor(playlist.total_duration/3600) + \" hr \" + (playlist.total_duration%3600 < 600 ? \"0\" + Math.floor(playlist.total_duration/60) + \" min\": Math.floor(playlist.total_duration/60) + \" min\"))}\r\n                </div>\r\n\r\n                <div className=\"col text-left\">\r\n                    {this.state.username === playlist.username ? <><AiFillHeart id={playlist._id} size = {24}/> {playlist.likes} </>:\r\n                    <>{playlist.username}</>}\r\n                </div>\r\n\r\n                <button className=\"playlist-btn\" id={playlist.playlist_id} onClick = {this.toPlaylist}/>\r\n                \r\n                <button className=\"play-btn\">\r\n                    { this.props.playlist.songs.length > 0 ?\r\n                    <>\r\n                        { this.props.play && this.props.current_playlist.name === this.state.playlist.name? \r\n                            <FaRegPauseCircle onClick = {this.handlePlay} size = {30}/>\r\n                            : <FaRegPlayCircle onClick = {this.handlePlay} size = {30}/>\r\n                        }\r\n                    </>\r\n                        : null\r\n                    }\r\n                    \r\n                    \r\n                </button>\r\n\r\n                {\r\n                    this.props.sessionUser === playlist.username ? \r\n                        <IconButton onClick={this.setVisible} >\r\n                            <DeleteIcon ontSize=\"large\"/>\r\n                        </IconButton>\r\n                     : null\r\n\r\n                }\r\n\r\n                {this.state.deleteConfirmVisible ?\r\n\r\n                    <>\r\n                        <Dialog\r\n                            open={this.state.deleteConfirmVisible}\r\n                            keepMounted\r\n                            onClose={this.setInvisible}\r\n                            aria-labelledby=\"alert-dialog-slide-title\"\r\n                            aria-describedby=\"alert-dialog-slide-description\"\r\n                            fullWidth={true}\r\n                            maxWidth = {'xs'}\r\n                        >\r\n                    <DialogTitle id=\"alert-dialog-slide-title\">{\"Delete Mixtape: \" + this.state.playlist.name + \"?\"}</DialogTitle>\r\n                    <DialogActions>\r\n                    <Button  onClick={this.deletePlaylist} color=\"primary\">\r\n                        Delete\r\n                    </Button>\r\n                    <Button onClick={this.setInvisible} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n                </Dialog>\r\n\r\n                    </>\r\n \r\n                : null }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handlePlay = async () => {\r\n        // If pausing current playlist \r\n        if (this.props.current_playlist !== null && this.props.current_playlist.name === this.state.playlist.name)\r\n            this.props.onPlayChange(!this.props.play) \r\n        // If changing playlist \r\n        else {\r\n            console.log(\"Change playlist\")\r\n            this.props.onPlaylistChange(this.state.playlist)\r\n        }\r\n            \r\n    }\r\n}\r\n \r\nexport default withStyles(useStyle)(PlaylistButton);","/** NEW PLAYLIST BUTTON  \r\n * Component within Playlists \r\n * Handles creating a new playlist \r\n*/\r\n\r\nimport React, { Component } from 'react'\r\nimport {AiOutlineCheckCircle, AiOutlineCloseCircle} from 'react-icons/ai'\r\nimport {IoMdAddCircleOutline}from 'react-icons/io'\r\nimport PlaylistAddIcon from '@material-ui/icons/PlaylistAdd'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport Button from '@material-ui/core/Button'\r\nconst useStyle = theme => ({\r\n    dialog :{\r\n        minWidth: \"300px\"\r\n    },\r\n    addButton : {\r\n        '&:focus': {\r\n            outline: 'none',\r\n          },\r\n          float: 'right'\r\n    }\r\n})\r\nclass NewPlaylistButton extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.setPlaylists = this.props.setPlaylists\r\n        this.nameEl = React.createRef()\r\n    }\r\n\r\n    state = { \r\n        popupVisible: false,\r\n        username : this.props.username,\r\n        user_id : this.props.user_id,\r\n        error: \"\"\r\n     }\r\n\r\n    // Set new playlist box to visible \r\n    setVisible = () => {\r\n        this.setState({popupVisible : true})\r\n    }\r\n\r\n    // Set new playlist box to invisible \r\n    setInvisible = () => {\r\n        this.setState({popupVisible : false})\r\n    }\r\n\r\n    // Create a new playlist \r\n    createNewPlaylist = () =>{\r\n        let name =this.nameEl.current.children[1].children[0].value.trim()\r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    createPlaylist (username : \"${this.state.username}\", name : \"${name}\", user_id: \"${this.state.user_id}\") {\r\n                        _id \r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        // Create the playlist \r\n        fetch('http://localhost:5000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('Failed');\r\n                return res.json()\r\n            })\r\n            .then(result => {\r\n                 // Update the playlists on the UI \r\n\r\n                if (result.errors)\r\n                    this.setState({error: result.errors[0].message})\r\n                else {\r\n                    requestBody = {\r\n                        query: `\r\n                            query {\r\n                                getUserPlaylists(username: \"${this.state.username}\"){\r\n                                    _id\r\n                                    name\r\n                                    username\r\n                                    likes\r\n                                    total_duration \r\n                                    playlist_img\r\n                                    public\r\n                                    songs {\r\n                                        song_id\r\n                                        name\r\n                                    }\r\n                                }\r\n                            }\r\n                        `\r\n                    }\r\n\r\n                    fetch(\"http://localhost:5000/graphql\", {\r\n                        method: 'POST',\r\n                        body: JSON.stringify(requestBody),\r\n                        headers: {\r\n                        'content-type': 'application/json'\r\n                        }})\r\n                    .then(res => {\r\n                        if (res.status !== 200 && res.status !== 201) \r\n                            throw new Error('Failed');\r\n                        return res.json()\r\n                    })\r\n                    .then(result => {\r\n                        console.log(result)\r\n                        this.nameEl = \"\"\r\n                        this.setInvisible()\r\n                        this.setPlaylists(result.data.getUserPlaylists)\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n\r\n       \r\n    }\r\n\r\n    \r\n    render() { \r\n        const {classes} = this.props\r\n        return (  \r\n            <>\r\n                <IconButton className = {classes.addButton} onClick = {this.setVisible}> \r\n                    <PlaylistAddIcon  fontSize=\"large\"/>\r\n                </IconButton>\r\n\r\n                <Dialog\r\n                    open={this.state.popupVisible}\r\n                    keepMounted\r\n                    onClose={this.setInvisible}\r\n                    aria-labelledby=\"alert-dialog-slide-title\"\r\n                    aria-describedby=\"alert-dialog-slide-description\"\r\n                    className = {classes.dialog}\r\n                    fullWidth={true}\r\n                    maxWidth = {'sm'}\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-slide-title\">{\"Create New Mixtape\"}</DialogTitle>\r\n                    <DialogContent>\r\n                    {this.state.error ?\r\n                        <DialogContentText> {this.state.error} </DialogContentText> : null\r\n                    }\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Mixtape Name\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        ref = {this.nameEl}\r\n                    />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                    <Button  onClick={this.createNewPlaylist} color=\"primary\">\r\n                        Create \r\n                    </Button>\r\n                    <Button onClick={this.setInvisible} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n                </Dialog>\r\n\r\n                </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyle)(NewPlaylistButton);","/** PLAYLISTS\r\n * Component within profile\r\n * Handles displaying the user's playlists \r\n */\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport PlaylistButton from './PlaylistButton'\r\nimport NewPlaylistButton from './NewPlaylistButton'\r\n\r\nclass Playlists extends Component {\r\n \r\n    state = { \r\n        playlists: this.props.playlists,\r\n        sessionUser: this.props.sessionUser,\r\n        user: this.props.user,\r\n        history: this.props.history\r\n    }\r\n\r\n    // Updates playlists \r\n    setPlaylists = (playlists) => {\r\n        this.setState({playlists : playlists})\r\n    }\r\n\r\n\r\n    render() { \r\n\r\n        let playlists = this.state.playlists.map(function(playlist) {\r\n            \r\n            return (\r\n                <PlaylistButton \r\n                    playlist = {playlist} \r\n                    key = {playlist._id} \r\n                    username = {this.state.user.username} \r\n                    setPlaylists = {this.setPlaylists} \r\n                    sessionUser = {this.state.sessionUser}  \r\n                    editing={this.props.editing} \r\n                    history = {this.props.history} \r\n                    play = {this.props.play} \r\n                    onPlayChange = {this.props.onPlayChange}\r\n                    onPlaylistChange = {this.props.onPlaylistChange}\r\n                    current_playlist = {this.props.current_playlist}\r\n                />\r\n            )\r\n        }, this)\r\n        return (\r\n            <>\r\n            {playlists}\r\n            { this.state.sessionUser === this.state.user.username ?\r\n                <div className=\"add-new\">\r\n                    <NewPlaylistButton text = {\"Mixtape Name\"} username = {this.state.user.username} user_id = {this.state.user._id} setPlaylists = {this.setPlaylists}/>\r\n                </div>  : null\r\n            }\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Playlists;","/** SAVED PLAYLISTS BUTTON\r\n * Component within Saved Playlists \r\n * Handles one saved playlist in the playlists page \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport {AiFillHeart, AiFillEyeInvisible, AiFillEye} from 'react-icons/ai'\r\n\r\nimport {RiPlayListLine} from 'react-icons/ri'\r\nimport {AiOutlineDelete, AiOutlineCheckCircle, AiOutlineCloseCircle} from 'react-icons/ai'\r\n// FaRegPauseCircle\r\nimport {FaRegPlayCircle,FaRegPauseCircle} from 'react-icons/fa'\r\nclass SavedPlaylistButton extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.setPlaylists = this.props.setPlaylists;\r\n\r\n    }\r\n    \r\n    state = { \r\n        playlist: this.props.playlist,\r\n        username: this.props.username,\r\n        deleteConfirmVisible: false,\r\n        history: this.props.history,\r\n        loading: true\r\n    }\r\n\r\n    componentDidMount = () =>{\r\n        this.setState({loading: true})\r\n        \r\n        let requestBody = {\r\n            query: `\r\n                query{\r\n                    getPlaylistByID(id : \"${this.props.playlist.playlist_id}\") {\r\n                        _id\r\n                        name\r\n                        username\r\n                        playlist_img\r\n                        likes \r\n                        songs {\r\n                            song_id\r\n                            name\r\n                            song_uri\r\n                            artists\r\n                            song_img\r\n                        }\r\n                            username\r\n                            likes\r\n                            total_duration\r\n                            playlist_img \r\n                            songs {\r\n                                song_id\r\n                                name\r\n                                song_uri\r\n                                artists\r\n                                song_img\r\n                            }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch ('http://localhost:5000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n                // console.log(res)\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n\r\n               this.setState({\r\n                   playlist: data.data.getPlaylistByID,\r\n                   loading:false\r\n               })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    setVisible = () => {\r\n        this.setState({deleteConfirmVisible : true})\r\n    }\r\n\r\n    setInvisible = () => {\r\n        this.setState({deleteConfirmVisible: false})\r\n    }\r\n\r\n    toPlaylist = () => {\r\n        this.state.history.push('/' + encodeURIComponent(this.state.playlist.username) + '/playlist='+ this.state.playlist._id)\r\n    }\r\n\r\n    deletePlaylist = () => {\r\n        this.setInvisible()\r\n        // Delete the playlist \r\n        // console.log(this.state.playlist)\r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    deleteFavorite (username: \"${this.props.sessionUser}\", playlist_id : \"${this.state.playlist._id}\") {\r\n                        _id \r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        // Delete the playlist \r\n        fetch('http://localhost:5000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('Failed');\r\n                return res.json()\r\n            })\r\n            .then(result => {\r\n                 // Update the playlists on the UI \r\n                //  console.log(this.props.sessionUser)\r\n                requestBody = {\r\n                    query: `\r\n                        query {\r\n                            getUserByUsername(username: \"${this.props.sessionUser}\"){\r\n                                user {\r\n                                    saved_playlists {\r\n                                    playlist_id\r\n                                    name\r\n                                }\r\n                            }\r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n\r\n                fetch(\"http://localhost:5000/graphql\", {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(requestBody),\r\n                    headers: {\r\n                    'content-type': 'application/json'\r\n                    }})\r\n                .then(res => {\r\n                    if (res.status !== 200 && res.status !== 201) \r\n                        throw new Error('Failed');\r\n                    return res.json()\r\n                })\r\n                .then(result => {\r\n                    this.setPlaylists(result.data.getUserByUsername.user.saved_playlists)\r\n                    //error here\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    render() { \r\n        if (this.state.loading)\r\n            return(<> </>)\r\n        const playlist = this.state.playlist \r\n        // console.log(playlist)\r\n        if (playlist == null) {\r\n            return(<> </>)\r\n        }\r\n        console.log(playlist)\r\n        console.log(this.props)\r\n        return (\r\n            <div className=\"playlist-row\">\r\n                <div className=\"col\">\r\n                    <img alt = \"playlist_img\" src={playlist.playlist_img} class=\"song_picture\"></img>\r\n                </div>\r\n\r\n                <div className=\"col text-left\">\r\n                    {playlist.name}\r\n                    {this.state.username === playlist.username ? <span>  {playlist.public ? <AiFillEye/> : < AiFillEyeInvisible/>} </span> : null}\r\n                </div>\r\n\r\n                <div className=\"col text-left\">\r\n                <div className=\"col text-left\">\r\n                    {playlist.songs.length} {playlist.songs.length === 1 ? \"Song\" : \"Songs\"} - {playlist.total_duration < 3600 ? \"0 hr \" + (playlist.total_duration < 600 ? \"0\" + Math.floor(playlist.total_duration/60) + \" min\": Math.floor(playlist.total_duration/60) + \" min\") :\r\n                (Math.floor(playlist.total_duration/3600) + \" hr \" + (playlist.total_duration%3600 < 600 ? \"0\" + Math.floor(playlist.total_duration/60) + \" min\": Math.floor(playlist.total_duration/60) + \" min\"))}\r\n                </div>\r\n                </div>\r\n\r\n                <div className=\"col text-left\">\r\n                    {this.state.username === playlist.username ? <><AiFillHeart id={playlist._id} size = {24}/> {playlist.likes} </>:\r\n                    <>{playlist.username}</>}\r\n                </div>\r\n\r\n                <button className=\"playlist-btn\" id={playlist.playlist_id} onClick = {this.toPlaylist}/>\r\n                \r\n                <button className=\"play-btn\">\r\n                { playlist.songs.length > 0 ?\r\n                        <>\r\n                        { this.props.play && this.props.current_playlist.name === playlist.name? \r\n                            <FaRegPauseCircle onClick = {this.handlePlay} size = {30}/>\r\n                            : <FaRegPlayCircle onClick = {this.handlePlay} size = {30}/>\r\n                        }\r\n                    </>\r\n                        : null\r\n                    }\r\n\r\n                   \r\n                </button>\r\n\r\n                {\r\n                    this.props.sessionUser === this.state.username ? \r\n                    <button className=\"delete-btn\" onClick = {this.setVisible}> \r\n                    <AiOutlineDelete size = {24}/>\r\n                </button> : null\r\n\r\n                }\r\n\r\n                {this.state.deleteConfirmVisible ?\r\n                <div className=\"delete-playlist-box\">\r\n                    <div>\r\n                        Delete the Mixtape?\r\n                    </div>\r\n                    <button className = \"confirm-new-btn\" onClick={this.deletePlaylist}> <AiOutlineCheckCircle size = {24}/></button>\r\n                    <button className = \"cancel-new-btn\"  onClick={this.setInvisible}> <AiOutlineCloseCircle size = {24}/></button>\r\n                </div>\r\n                : null }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handlePlay = async () => {\r\n        // If pausing current playlist \r\n        if (this.props.current_playlist !== null && this.props.current_playlist.name === this.state.playlist.name)\r\n            this.props.onPlayChange(!this.props.play) \r\n        // If changing playlist \r\n        else {\r\n            console.log(\"Change playlist\")\r\n            this.props.onPlaylistChange(this.state.playlist)\r\n        }\r\n            \r\n    }\r\n}\r\n \r\nexport default SavedPlaylistButton;","/** SAVED PLAYLISTS \r\n * Component within profile\r\n * Handles displaying the user's saved playlists \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport SavedPlaylistButton from './SavedPlaylistButton'\r\n\r\nclass SavedPlaylists extends Component {\r\n    state = { \r\n        playlists: this.props.playlists,\r\n        sessionUser: this.props.sessionUser,\r\n        user: this.props.user,\r\n        history: this.props.history\r\n    }\r\n    setPlaylists = (playlists) => {\r\n        this.setState({playlists : playlists})\r\n    }\r\n\r\n    render() { \r\n      \r\n        let playlists = this.state.playlists.map(function(playlist) {\r\n            \r\n            return (\r\n                <SavedPlaylistButton key = {playlist.playlist_id} \r\n                    playlist = {playlist} \r\n                    username = {this.state.user.username} \r\n                    setPlaylists = {this.setPlaylists}\r\n                    sessionUser = {this.state.sessionUser}  \r\n                    editing={this.props.editing} \r\n                    history = {this.props.history}\r\n                    play = {this.props.play} \r\n                    onPlayChange = {this.props.onPlayChange}\r\n                    onPlaylistChange = {this.props.onPlaylistChange}\r\n                    current_playlist = {this.props.current_playlist}\r\n                />\r\n            )\r\n        }, this)\r\n        return (\r\n            <>\r\n            {playlists}\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default SavedPlaylists;","/** PROFILE\r\n * Handles the displaying the user's playlists, saved playlists, and uploaded songs \r\n */\r\n\r\nimport React, { Component} from 'react'\r\n\r\nimport {RiUserFollowLine, RiUserAddLine} from 'react-icons/ri'\r\nimport Playlists from './Playlists/Playlists'\r\n// import UploadedSongs from './UploadedSongs/UploadedSongs'\r\nimport SavedPlaylists from './Playlists/SavedPlaylists'\r\nimport './Profile.css'\r\n\r\n\r\nclass Profile extends Component {\r\n    state = { \r\n        showSavedPlaylists: false,\r\n        showMyPlaylists: true,\r\n        showUploadedSongs: false,\r\n        profileUsername: this.props.match.params.username,\r\n        profileUserInfo: null,\r\n        profileAccountCreationDate: null,\r\n        profileFollowers: null, \r\n        profilePlaylists: null,\r\n        profileSavedPlaylists: null,\r\n        loading: true,\r\n    }\r\n\r\n    // Get the user information and their playlists \r\n    componentDidMount = () => {\r\n\r\n        if (!this.props.username)\r\n            this.props.history.push('/login')\r\n\r\n        this.setState({loading : true})\r\n        const username = this.state.profileUsername\r\n\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${username}\"){\r\n                        user {\r\n                            _id\r\n                            username\r\n                            profile_img\r\n                            joined\r\n                            followers {\r\n                                user_id\r\n                                username\r\n                            }\r\n\r\n                            saved_playlists {\r\n                                playlist_id \r\n                                name\r\n                            }\r\n                        }\r\n                        playlists {\r\n                            _id\r\n                            name\r\n                            username\r\n                            public\r\n                            likes\r\n                            total_duration\r\n                            playlist_img \r\n                            songs {\r\n                                song_id\r\n                                song_uri\r\n                                name\r\n                                artists\r\n                                song_img\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch ('http://localhost:5000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n             \r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error (\"Failed\")\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                \r\n                data = data.data.getUserByUsername\r\n                const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n                const date = new Date(parseInt(data.user.joined))\r\n                this.setState({\r\n                    profileUserInfo: data.user,\r\n                    profileFollowers: data.user.followers, \r\n                    profilePlaylists: data.playlists,\r\n                    profileSavedPlaylists: data.user.saved_playlists,\r\n                    profileAccountCreationDate: months[date.getMonth()] + \" \" + date.getDate() + \", \" + date.getFullYear(),\r\n                    loading: false\r\n                })        \r\n            \r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n        \r\n    }\r\n    \r\n    render() { \r\n\r\n\r\n        if (this.state.loading)\r\n            return (<> </>);\r\n            \r\n        return ( \r\n            \r\n            <div className=\"container-fluid playlist-container\">\r\n\r\n                <div className=\"container-fluid playlist-data-container\">\r\n                    {/* Information Bar about the user */}\r\n                    <div className=\"information-row\">\r\n                        <div className=\"col text-center\">\r\n                            <div className=\"\">\r\n                                <img alt=\"playlist_img\" src={this.state.profileUserInfo.profile_img} class=\"user_picture\"></img>\r\n                            </div>\r\n                            <h2>{this.state.profileUsername}                            \r\n                             \r\n                             {this.state.profileUsername !== this.props.username ?\r\n                                !this.isFollowing() ? \r\n                                <button> <RiUserAddLine size= {24}/> </button> :\r\n                                <span> <RiUserFollowLine size={24}/></span>\r\n                            : null}\r\n\r\n                            </h2>\r\n                             <h5> User Since: {this.state.profileAccountCreationDate}</h5>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    {/* Navigation bar between \"My Playlist\" and \"Saved Playlists\" */}\r\n                    <div className=\"navigation-row\">\r\n                        <div className=\"col\">\r\n                           <button id = \"my-playlists-btn\" className = \"my-playlists-btn\" onClick = {this.changeView} style = {{borderBottom : \"2px solid #faed26\", fontWeight : \"bold\"}}>  \r\n                                { \r\n                                    this.state.profileUsername === this.props.username ? \r\n                                        \"My Mixtapes\" :\r\n                                        \"Mixtapes\"\r\n                                }\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div className=\"col\">\r\n                            <button id = \"saved-playlists-btn\" className = \"saved-playlists-btn\" onClick = {this.changeView}> Saved Mixtapes </button>\r\n                        </div>\r\n                        \r\n                        {/* <div className=\"col\">\r\n                        <button id = \"uploaded-songs-btn\" className = \"uploaded-songs-btn\" onClick = {this.changeView}> Uploaded Songs </button>\r\n                        </div> */}\r\n                    </div>\r\n\r\n                    {/* Renders \"My Playlist\" and \"Saved Playlists\" */}\r\n                    {this.state.showSavedPlaylists ? <SavedPlaylists \r\n                        playlists = {this.state.profileSavedPlaylists} \r\n                        user = {this.state.profileUserInfo} \r\n                        sessionUser = {this.props.username} \r\n                        history = {this.props.history}\r\n                        play = {this.props.play} \r\n                        onPlayChange = {this.props.onPlayChange}\r\n                        onPlaylistChange = {this.props.onPlaylistChange}\r\n                        current_playlist = {this.props.current_playlist} /> : null}\r\n                    {this.state.showMyPlaylists ?  \r\n                        <Playlists playlists = {this.state.profilePlaylists} \r\n                                user = {this.state.profileUserInfo} \r\n                                sessionUser = {this.props.username} \r\n                                history = {this.props.history} \r\n                                play = {this.props.play} \r\n                                onPlayChange = {this.props.onPlayChange}\r\n                                onPlaylistChange = {this.props.onPlaylistChange}\r\n                                current_playlist = {this.props.current_playlist}\r\n                        /> : null}\r\n                    {/* {this.state.showUploadedSongs ? <UploadedSongs user = {this.state.profileUserInfo} sessionUser = {this.props.username}/> : null} */}\r\n                    <div className = \"row blank-space\"> </div>\r\n                </div>\r\n                \r\n                {/* <PlaylistNavbar/> */}\r\n            </div>\r\n                    \r\n                \r\n      \r\n         );\r\n    }\r\n\r\n    // Check if the logged in user is following \r\n    isFollowing = () =>{\r\n        let followers = this.state.profileFollowers\r\n        let following = false \r\n        followers.forEach(follower => {\r\n            if (follower.username === this.props.username)\r\n                following = true \r\n        })\r\n        \r\n        return following\r\n    }\r\n\r\n    // Handle displaying playlists, saved playlists, or uploaded songs \r\n    changeView = (event) => {\r\n        let invisible = []\r\n        const visible = event.target.className\r\n        if (visible === \"my-playlists-btn\"){\r\n            this.setState({\r\n                showSavedPlaylists: false,\r\n                showMyPlaylists: true,\r\n                showUploadedSongs: false,\r\n            })\r\n          //  invisible.push(\"uploaded-songs-btn\")\r\n            invisible.push(\"saved-playlists-btn\")\r\n        }\r\n        else if (visible === \"saved-playlists-btn\"){\r\n            this.setState({\r\n                showSavedPlaylists:true,\r\n                showMyPlaylists: false,\r\n                showUploadedSongs: false,\r\n            })\r\n\r\n         //   invisible.push(\"uploaded-songs-btn\")\r\n            invisible.push(\"my-playlists-btn\")\r\n        }\r\n        else {\r\n            this.setState({\r\n                showSavedPlaylists: false,\r\n                showMyPlaylists: false,\r\n                showUploadedSongs: true,\r\n            })\r\n            invisible.push(\"saved-playlists-btn\")\r\n            invisible.push(\"my-playlists-btn\")\r\n\r\n        }\r\n        document.getElementById(invisible[0]).style.borderBottom = \"none\";\r\n     //   document.getElementById(invisible[1]).style.borderBottom= \"none\"\r\n        document.getElementById(visible).style.borderBottom = \"2px solid #faed26\";\r\n        document.getElementById(invisible[0]).style.fontWeight = \"normal\"\r\n       // document.getElementById(invisible[1]).style.fontWeight = \"normal\"\r\n        document.getElementById(visible).style.fontWeight = \"bold\"\r\n    }\r\n    \r\n}\r\n \r\nexport default Profile;","/** SONG\r\n * Component within Song List \r\n * Handles displaying one song \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport {AiOutlineDelete, AiOutlineArrowUp, AiOutlineArrowDown} from 'react-icons/ai'\r\n// FaRegPauseCircle\r\nimport {FaRegPlayCircle, FaRegPauseCircle} from 'react-icons/fa'\r\nclass Song extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.removeSong = this.props.removeSong\r\n        this.handleMoveUp = this.props.handleMoveUp\r\n        this.handleMoveDown = this.props.handleMoveDown\r\n    }\r\n    state = { \r\n        song: this.props.song, \r\n        editing: this.props.editing,\r\n        deleteConfirmVisible : false,\r\n        playlistId: this.props.playlist_id\r\n    }\r\n\r\n    // Sets delete confirmation box to visible \r\n    setVisible = () => {\r\n        this.setState({deleteConfirmVisible : true})\r\n    }\r\n\r\n    // Sets delete confirmation box to invisible \r\n    setInvisible = () => {\r\n        this.setState({deleteConfirmVisible: false})\r\n    }\r\n    \r\n    // Remove song from the playlist (Edit Mode)\r\n    // NOTE: Does not delete the song from the database \r\n    handleDelete = () => {\r\n        this.removeSong(this.state.song, this.props.index)\r\n    }\r\n\r\n    moveUp = () => {\r\n        console.log(\"move up\")\r\n        this.handleMoveUp(this.state.song, this.props.index)\r\n    }\r\n     \r\n    moveDown = () => {\r\n        console.log(\"move down\")\r\n        this.handleMoveDown(this.state.song, this.props.index)\r\n    }\r\n\r\n    handlePlay = async () => {\r\n        // No songs playing \r\n        if (!this.props.current_playlist || !this.props.current_song || this.props.current_playlist._id !== this.props.playlist_id){\r\n            console.log(\"Play Playlist\")\r\n            let requestBody = {\r\n                query : `\r\n                    query {\r\n                        getPlaylistByID(id : \"${this.state.playlistId}\") {\r\n                            likes \r\n                            name \r\n                            public \r\n                            songs {\r\n                                name \r\n                                song_id \r\n                                song_uri\r\n                                song_img\r\n                            }\r\n                            total_duration \r\n                            username \r\n                            _id \r\n                        }\r\n                    }\r\n                `\r\n            }\r\n\r\n            fetch('http://localhost:5000/graphql',{\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }})\r\n                .then (res => {\r\n                    if (res.status !== 200 && res.status !== 201)\r\n                        throw new Error(\"Playlist not found\")\r\n                    return res.json()\r\n                })\r\n                .then(data => {\r\n                    console.log(data.data.getPlaylistByID)\r\n                    this.props.onPlaylistChange(data.data.getPlaylistByID, this.state.song)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n        // Same playlist and pause the song \r\n        else if (this.props.current_playlist._id === this.props.playlist_id && this.props.current_song.song_id === this.state.song.song_id)\r\n            this.props.onPlayChange(!this.props.play)\r\n        // Different Song \r\n        else {\r\n            console.log(\"SONG ON SONG CHANGE\")\r\n            this.props.onSongChange(this.state.song.song_id)\r\n        }\r\n            \r\n           // console.log(\"Change songs\")\r\n    }\r\n\r\n    render() { \r\n\r\n        return (  \r\n            <div className=\"row song-row\">\r\n            <div className=\"col song-col text-left\">\r\n                {this.props.index+1}\r\n            </div>\r\n            <div className=\"col song-col text-left\">\r\n            <button className=\"play-btn\" onClick = {this.handlePlayClick}>\r\n                {this.props.play && this.props.current_playlist._id === this.state.playlistId && this.props.current_song.song_id === this.state.song.song_id ?\r\n                    <FaRegPauseCircle onClick = {this.handlePlay} size= {24}/>\r\n                 : \r\n                    <FaRegPlayCircle onClick = {this.handlePlay} size= {24}/>\r\n                }\r\n                \r\n            </button>\r\n            </div>\r\n            <div className=\"col song-col\">\r\n                <img alt = \"\" src={this.state.song.song_img} class=\"song_picture\"></img>\r\n            </div>\r\n            <div className=\"col song-col text-left\">\r\n                {this.state.song.name}\r\n            </div>\r\n\r\n            <div className=\"col song-col text-left\">\r\n                {this.state.song.artists}\r\n            </div>\r\n            <div className=\"col song-col text-center\">\r\n                {this.state.song.duration < 60 ? \"0:\" + (this.state.song.duration < 10 ? \"0\" + this.state.song.duration: this.state.song.duration) :\r\n                (Math.floor(this.state.song.duration/60) + \":\" + (this.state.song.duration%60 < 10 ? \"0\" + this.state.song.duration%60 : this.state.song.duration%60))}\r\n            </div>\r\n            <div className=\"col song-col text-center\">\r\n                {this.state.editing ? \r\n                    <div>\r\n                        {(this.props.index > 0) ? <AiOutlineArrowUp size={34} className=\"upbtn\" onClick={this.moveUp}/> : <AiOutlineArrowUp size={34} disabled color=\"#cccccc\"/>}\r\n                        {(this.props.index === this.props.playlist_length - 1) ? <AiOutlineArrowDown size={34} disabled color=\"#cccccc\"/> : <AiOutlineArrowDown size={34} class=\"downbtn\" onClick={this.moveDown}/>}\r\n                    </div> \r\n                :null}\r\n            </div>\r\n            <div className=\"col song-col text-center\">\r\n                {this.state.editing ? <button className = 'delete-btn' onClick={this.setVisible}> <AiOutlineDelete size = {24}/></button>: null}\r\n            </div>\r\n\r\n            {this.state.deleteConfirmVisible ?\r\n                <div className=\"delete-playlist-box\">\r\n                    <div>\r\n                        Delete the Song? \r\n                    </div>\r\n                <button className = \"confirm-new-btn\" onClick={this.handleDelete}> Yes</button>\r\n                <button className = \"cancel-new-btn\"  onClick={this.setInvisible}> No</button>\r\n        </div>\r\n        : null }\r\n      </div>  \r\n        );\r\n    }\r\n}\r\n \r\nexport default Song;","/** SONG LIST\r\n * Component within Playlist\r\n * Handles displaying the list of songs in a playlist \r\n */\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport './Songlist.css'\r\nimport Song from './Song'\r\nclass Songlist extends Component {\r\n    state = {\r\n        songs : this.props.songs,\r\n        playlist_id: this.props.playlist_id,\r\n        editing: this.props.editing,\r\n    }\r\n\r\n    // Handles when the user clicks play \r\n    handlePlayClick = (event) =>{\r\n        console.log(event)\r\n    }\r\n\r\n    // Remove song from the playlist \r\n    removeSong = (song, index) => {\r\n        console.log(song, index)\r\n        let songs = this.state.songs\r\n        songs.splice(index, 1)\r\n        this.setState({songs : songs})\r\n    }\r\n    \r\n    handleMoveUp = (song, index) => {\r\n        console.log(song, index)\r\n        let songs = this.state.songs\r\n\r\n        let temp = songs[index]\r\n        songs[index] = songs[index-1]\r\n        songs[index-1] = temp\r\n\r\n        this.setState({songs : songs})\r\n    }\r\n    \r\n    handleMoveDown = (song, index) => {\r\n        console.log(song, index)\r\n        let songs = this.state.songs\r\n\r\n        let temp = songs[index]\r\n        songs[index] = songs[index+1]\r\n        songs[index+1] = temp\r\n\r\n\r\n        this.setState({songs : songs})\r\n    }\r\n\r\n    render() {\r\n        let songs = this.state.songs.map(function(song, i){\r\n            return (\r\n                <Song  key = {song.name + song.song_id} \r\n                    song={song} \r\n                    index={i}\r\n                    editing={this.state.editing} \r\n                    playlist_id = {this.state.playlist_id} \r\n                    removeSong={this.removeSong} \r\n                    handleMoveUp={this.handleMoveUp} \r\n                    handleMoveDown={this.handleMoveDown} \r\n                    playlist_length={this.props.songs.length}\r\n                    play = {this.props.play}\r\n                    onPlayChange = {this.props.onPlayChange}\r\n                    onPlaylistChange = {this.props.onPlaylistChange}\r\n                    onSongChange = {this.props.onSongChange}\r\n                    current_playlist = {this.props.current_playlist}\r\n                    current_song = {this.props.current_song}\r\n                />\r\n            );\r\n        }, this)\r\n\r\n        return (\r\n            <>\r\n                {songs}\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n \r\nexport default Songlist;","import React, { Component } from 'react'\r\n\r\nclass Comment extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.commentEl = React.createRef()\r\n    }\r\n    state = {  \r\n        buttonsVisible: false,\r\n    }\r\n\r\n\r\n    setVisible = () => {\r\n        console.log(\"BUTTONS VISIBLE\")\r\n        this.setState({buttonsVisible : true})\r\n    }\r\n\r\n    handleBlur = () => {\r\n        if (this.state.text === \"\")\r\n            this.setState({buttonsVisible: false})\r\n    }\r\n\r\n    handleCancel = () => {\r\n        document.getElementById(\"comment-input\").value = \"\"\r\n        this.setState({text : \"\", buttonsVisible: false})\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        console.log(this.commentEl.current.value)\r\n        let requestBody = {\r\n            query: `\r\n            mutation {\r\n                addComment(playlist_id: \"${this.props.playlist_id}\", username : \"${this.props.username}\", comment: \"${this.commentEl.current.value}\"){\r\n                    comments {\r\n                        _id\r\n                        user_id\r\n                        message \r\n                        date\r\n                        replies {\r\n                            user_id\r\n                            message\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        }\r\n\r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error('Failed');\r\n            return res.json()\r\n        })\r\n        .then (data => {\r\n          //  this.props.setState({comments : data.data.addComment.comments})\r\n          console.log(data)\r\n          this.props.stateChange(data.data.addComment.comments)\r\n          this.commentEl.current.value = \"\"\r\n          this.setState({buttonsVisible: false}, function () {console.log(this.state)})\r\n            \r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    render() { \r\n        return (  \r\n            <>\r\n            <textarea id = \"comment-input\" className=\"comment-text\" type=\"text\" ref = {this.commentEl} placeholder=\"Add a Comment\" onFocus = {this.setVisible} onBlur = {this.handleBlur}/>\r\n            {\r\n                this.state.buttonsVisible === true ? \r\n                <>\r\n                     <button className = \"comment-button\" onClick ={this.handleSubmit}> COMMENT </button>\r\n                     <button className = \"comment-button\" onClick = {this.handleCancel} style = {{color: \"black\", backgroundColor: \"white\", border:\"none\"}}> CANCEL </button>\r\n                     </>\r\n                : null \r\n            }\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Comment;\r\n","import React, { Component } from 'react'\r\n\r\nclass Reply extends Component {\r\n    state = { \r\n        visibility: false,\r\n        text : \"\"\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({text: event.target.value})\r\n    }\r\n\r\n    setVisible = () => {\r\n        this.setState({visibility: true})\r\n    }\r\n\r\n    setInvisible = () => {\r\n        this.setState({visibility: false})\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.setInvisible()\r\n        document.getElementById(\"comment-input\").value = \"\"\r\n        this.setState({text : \"\"})\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        let requestBody = {\r\n            query: `\r\n            mutation {\r\n                addReply(user_id:\"${this.props.user_id}\", message: \"${this.state.text}\", playlist_id: \"${this.props.playlist_id}\", comment_index: ${this.props.commentIndex}){\r\n\r\n                    comments {\r\n                        _id\r\n                        user_id\r\n                        message \r\n                        date \r\n                        replies {\r\n                            _id\r\n                            user_id\r\n                            message\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        `\r\n        }\r\n\r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error('Failed');\r\n            return res.json()\r\n        })\r\n        .then(data => {\r\n            this.setInvisible()\r\n            this.props.stateChange(data.data.addReply.comments)\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    render() { \r\n        return (  \r\n            <>\r\n        \r\n        {\r\n            this.state.visibility ? \r\n            <>\r\n                <textarea id = \"comment-input\" className=\"comment-text\" type=\"text\" placeholder=\"Add a Comment\" onChange = {this.onChange}/>\r\n                 <button className = \"comment-button\" onClick ={this.handleSubmit}> REPLY </button>\r\n                 <button className = \"comment-button\" onClick = {this.handleCancel} style = {{color: \"black\", backgroundColor: \"white\", border:\"none\"}}> CANCEL </button>\r\n                 </>\r\n            : \r\n            <button className = \"reply-button\" onClick = {this.setVisible}> REPLY </button>  \r\n        }\r\n        \r\n        </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Reply;\r\n\r\n","import React, { Component } from 'react'\r\n\r\nclass ShowReplyCard extends Component {\r\n    state = {  \r\n        loading: true,\r\n        username : null\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserById (user_id : \"${this.props.user_id}\"){\r\n                        username\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error('Playlist not found');\r\n            return res.json()\r\n        })\r\n        .then(data => {\r\n            console.log(data.data.getUserById)\r\n            this.setState({username : data.data.getUserById.username, loading: false})\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n\r\n        return (  \r\n            <>\r\n            <div className=\"username-row\">{this.state.username}</div>\r\n                    <div className=\"comment-row\">{this.props.message}</div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default ShowReplyCard;","import React, { Component } from 'react'\r\nimport { BsFillCaretUpFill, BsFillCaretDownFill} from 'react-icons/bs'\r\nimport ShowReplyCard from './ShowReplyCard'\r\n\r\nclass ShowReplies extends Component {\r\n    state = {  \r\n        repliesVisible: false \r\n    }\r\n\r\n    toggleVisibility = () => {\r\n        this.setState({repliesVisible : !this.state.repliesVisible})\r\n    }\r\n\r\n    \r\n    render() { \r\n        let res = this.props.replies.map(function(reply, j){\r\n            return (\r\n                <li key = {reply.user_id + j}>\r\n                    <ShowReplyCard user_id = {reply.user_id} message = {reply.message} />\r\n                </li>\r\n            )\r\n        }, this)\r\n\r\n        return (  \r\n            <div>\r\n            \r\n            {\r\n                !this.state.repliesVisible ? \r\n                <>\r\n                <button className = \"view-replies-btn\" onClick={this.toggleVisibility}> \r\n                        <BsFillCaretDownFill/> \r\n                        Show Replies \r\n                </button>\r\n                {/* {document.getElementById(id).style.display = \"none\"} */}\r\n                </>\r\n                :\r\n                <>\r\n                <button className = \"view-replies-btn\" onClick={this.toggleVisibility}> \r\n                        <BsFillCaretUpFill/> \r\n                        Hide Replies \r\n                </button>\r\n                 \r\n                    <div className=\"container replies-container\"  >\r\n                        <ul>\r\n                            {res}\r\n                        </ul>\r\n                    </div> \r\n                    \r\n              \r\n                </>\r\n            }\r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default ShowReplies;\r\n\r\n","import React, { Component } from 'react'\r\nimport Reply from './Reply.js'\r\nimport ShowReplies from './ShowReplies'\r\n\r\nclass UserComment extends Component {\r\n    state = {  \r\n        editVisible: false,\r\n        text : this.props.message,\r\n        username : null,\r\n        loading: true\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserById (user_id : \"${this.props.user_id}\"){\r\n                        username\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error('Playlist not found');\r\n            return res.json()\r\n        })\r\n        .then(data => {\r\n            console.log(data.data.getUserById)\r\n            this.setState({username : data.data.getUserById.username, loading: false})\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n\r\n    }\r\n    handleUpdate = (event) => {\r\n        this.setState({text : event.target.value, loading:false})\r\n    }\r\n\r\n    handleEditVisibility = () => {\r\n        console.log(\"HERE\")\r\n        this.setState({editVisible : !this.state.editVisible})\r\n    }\r\n\r\n    handleDelete = () => {\r\n        this.props.comments.splice(this.props.index, 1)\r\n        let requestBody = {\r\n            query : `\r\n                mutation {\r\n                    deleteComment(playlist_id: \"${this.props.playlist_id}\", user_id: \"${this.props.user_id}\", index: ${this.props.index}) {\r\n                        comments {\r\n                            _id\r\n                            user_id\r\n                            message\r\n                            replies {\r\n                                message\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n                `\r\n        }\r\n\r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error('Playlist not found');\r\n            return res.json()\r\n        })\r\n        .then(data => {\r\n            this.props.updateComments(data.data.deleteComment.comments)\r\n            //this.setState({comments:data.data.deleteComment.comments})\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n\r\n    }\r\n\r\n    handleEditSubmit = () => {\r\n        console.log(this.state.text)\r\n        let requestBody = {\r\n            query: `\r\n            mutation {\r\n                editComment(user_id: \"${this.props.user_id}\", message: \"${this.state.text}\", playlist_id: \"${this.props.playlist_id}\", comment_index : ${this.props.index}){\r\n                    comments {\r\n                        _id\r\n                        user_id\r\n                        message \r\n                        date\r\n                        replies {\r\n                            user_id\r\n                            message\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        }\r\n\r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n            'content-type': 'application/json'\r\n            }})\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) \r\n                throw new Error(res);\r\n            return res.json()\r\n        })\r\n        .then(data => {\r\n            console.log(data)\r\n            this.handleEditVisibility()\r\n            this.props.updateComments(data.data.editComment.comments)\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n\r\n    }\r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n        return (  \r\n            <>\r\n            {/* Username */}\r\n            <div className=\"row username-row\">\r\n                {/* <div className=\"\">\r\n                    <img alt = \"playlist_img\" src={this.props.profile_img} class=\"user_picture\"></img>\r\n                </div> */}\r\n                {this.state.username}\r\n                {this.state.username === this.props.sessionUser ?\r\n                    <button onClick ={this.handleEditVisibility} className = \"delete-button\"> Edit </button>\r\n                    : null\r\n                }\r\n            </div>\r\n\r\n            {/* Comment */}\r\n            <div className=\"row comment-row\">\r\n                {!this.state.editVisible ? <>{this.props.message} </>\r\n                    : \r\n                    <>\r\n                        <textarea id = \"comment-input\" className=\"comment-text\" type=\"text\" placeholder = {this.props.message} onChange = {this.handleUpdate}/>\r\n                        <button className = \"comment-button\" onClick = {this.handleEditSubmit}> EDIT </button>\r\n                        <button className = \"comment-button\" onClick = {this.handleEditVisibility} style = {{color: \"black\", backgroundColor: \"white\", border:\"none\"}}> CANCEL </button>\r\n                        <button className = \"comment-button\" onClick = {this.handleDelete}> DELETE </button>\r\n                    </>\r\n                }\r\n                \r\n            </div>\r\n        \r\n            {/* Reply Button */}\r\n            <div className=\"row replies-row\">\r\n                <Reply commentIndex = {this.props.index} user_id = {this.props.user_id}  playlist_id = {this.props.playlist_id} stateChange = {this.props.stateChange}/>\r\n\r\n            </div>\r\n            <div className=\"row replies-row\">\r\n\r\n                {this.props.replies.length > 0 ? \r\n                <ShowReplies replies = {this.props.replies}/> : null\r\n                }\r\n            </div>\r\n        </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default UserComment;\r\n\r\n","/** COMMENTS\r\n * Component within Playlist\r\n * Handles displaying comments \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport Comment from './Comment.js'\r\nimport UserComment from './UserComment.js'\r\nimport './Comments.css'\r\n\r\nclass Comments extends Component {\r\n    state = {\r\n        comments : this.props.comments,\r\n        editCommentVisible : false,\r\n    }  \r\n\r\n    stateChange = (comment) => {\r\n\r\n        this.setState({comments : comment}, function () {\r\n            console.log(this.state.comments)\r\n        })\r\n    }\r\n\r\n    render() {\r\n    \r\n        let comments = this.state.comments.map(function(elem, i){\r\n            // One comment, i is index \r\n\r\n            return (\r\n                    <div key = {elem.user_id + \" \" + i.toString()}  className=\"container result-container\">\r\n                        <UserComment user_id = {elem.user_id} \r\n                            message = {elem.message} \r\n                            index = {i} \r\n                            replies = {elem.replies} \r\n                            sessionUser = {this.props.username} \r\n                            playlist_id = {this.props.playlist_id} \r\n                            stateChange = {this.stateChange}\r\n                            updateComments = {this.updateComments}\r\n                            comments = {this.state.comments}\r\n                        />\r\n                    </div>\r\n            )\r\n        }, this)\r\n        return (\r\n            <>\r\n                <div className=\"container comments-container\">\r\n                    <div className=\"row\">\r\n                    <Comment playlist_id = {this.props.playlist_id} username = {this.props.username} stateChange = {this.stateChange}/>\r\n                    </div>\r\n                    \r\n                    {comments}\r\n                </div>\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateComments = (comments) => {\r\n        this.setState({comments:comments})\r\n    } \r\n}\r\n \r\nexport default Comments;","/** PLAYLIST SETTING\r\n * Component within Playlist \r\n * Used to handle editing the playlist \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport './PlaylistSetting.css'\r\n\r\n// For Rendering the Settings section of a playlist\r\nclass PlaylistSetting extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.onChange=  this.props.onChange\r\n    }\r\n    state = { \r\n        playlist : this.props.playlist,\r\n        save : false,\r\n        edit: this.props.editing,\r\n        public:this.props.playlist.public,\r\n        playlist_img: this.props.playlist.playlist_img\r\n    }\r\n\r\n    // Changes the edit status \r\n    handleEditClick = () => {\r\n        this.setState({edit: !this.state.edit}, () =>{\r\n            this.onChange(\"edit-status\" , this.state.edit)\r\n        })\r\n\r\n        // this.changeEdit()\r\n        \r\n    }\r\n\r\n    // Save Changes \r\n    handleSave = () => {\r\n        this.setState({edit: !this.state.edit}, () =>{\r\n            this.onChange(\"edit-status\" , this.state.edit)\r\n            this.onChange(\"save\", null)\r\n        })\r\n    }\r\n\r\n    // Cancel changes \r\n    handleCancel = () => {\r\n        this.setState({edit: !this.state.edit}, () =>{\r\n            this.onChange(\"edit-status\" , this.state.edit)\r\n            this.onChange(\"revert\", null)\r\n        })\r\n        \r\n    }\r\n\r\n    // Change privacy setting of the playlist (Edit mode)\r\n    // NOTE: Does not update privacy setting in the database \r\n    changePrivacy = () => {\r\n        let playlist = this.state.playlist\r\n        playlist.public = !this.state.public \r\n        this.setState({public: !this.state.public})\r\n    }\r\n\r\n    changeName = (event) => {\r\n        let playlist = this.state.playlist\r\n        playlist.name = event.target.value \r\n        this.setState({playlist: playlist})\r\n    }\r\n\r\n    Post = (e) => {\r\n        e.preventDefault();\r\n        const file = document.getElementById(\"photo-input\").files;\r\n        const formData = new FormData();\r\n\r\n        formData.append(\"img\", file[0]);\r\n\r\n        fetch(\"http://localhost:5000/\", {\r\n            method: \"POST\",\r\n            body: formData\r\n            }).then(r => {\r\n            console.log(r);\r\n        });\r\n        let playlist = this.state.playlist\r\n        playlist.playlist_img = `http://localhost:5000/${file[0].name}`\r\n        this.setState({playlist : playlist})\r\n        console.log(file[0]);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <>\r\n                <div className=\"settings-row\">\r\n                    {this.state.edit ? \r\n                    <button onClick={this.changePrivacy}>{this.state.public ? \"Public\" : \"Private\"}</button>\r\n                    : \r\n                    null\r\n                    }\r\n                    \r\n                    \r\n                </div>\r\n                <div className=\"settings-row\">\r\n                    Mixtape Name \r\n                    <input type=\"text\" disabled = {!this.state.edit} defaultValue={this.state.playlist.name} required onChange={this.changeName}/>\r\n                </div>\r\n                {this.state.edit ?\r\n                <div className='photo_input'>\r\n                    Upload Mixtape Photo\r\n                    <div className=\"\">\r\n                        <div className=\"custom-file\">\r\n                            <input\r\n                                type=\"file\"\r\n                                id=\"photo-input\"\r\n                                accept=\"image/*\"\r\n                            />\r\n                        </div>    \r\n                        </div>\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={this.Post}>\r\n                                Upload\r\n                            </button>\r\n                            <img\r\n                                id=\"img\"\r\n                                style={{\r\n                                    display: \"block\",\r\n                                    height: \"100px\",\r\n                                    width: \"100px\",\r\n                                    \"margin-top\": \"5px\",\r\n                                }}\r\n                                src={this.state.playlist.playlist_img}\r\n                            >\r\n                            </img>\r\n                        </div>\r\n                : null\r\n                }\r\n\r\n                <div className=\"settings-row\">\r\n                    {this.state.edit? \r\n                        <>\r\n                        <button onClick={this.handleSave}> Save </button>\r\n                        <button onClick={this.handleCancel}> Cancel </button>\r\n                        </>\r\n                        :\r\n                        <button onClick = {this.handleEditClick}>Edit </button>\r\n                    }\r\n                    <button className=\"delete-btn\">Delete</button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default PlaylistSetting;","/** PLAYLIST\r\n * Handles the page for a playlist \r\n */\r\n\r\nimport React, { Component} from 'react'\r\nimport { AiFillHeart, AiFillEyeInvisible, AiFillEye} from 'react-icons/ai'\r\nimport { BiGitRepoForked } from 'react-icons/bi'\r\nimport Songlist from './Songlist/Songlist'\r\nimport Comments from './Comments/Comments'\r\nimport PlaylistSetting from './PlaylistSetting/PlaylistSetting'\r\nimport {AiOutlineCheckCircle, AiOutlineCloseCircle} from 'react-icons/ai'\r\n\r\nimport './Playlist.css'\r\n\r\nimport { FaShare } from 'react-icons/fa'\r\n\r\nclass Playlist extends Component {\r\n\r\n    state = {\r\n        songsVisible : true,\r\n        commentsVisible : false,\r\n        settingsVisible : false,\r\n        playlistInfo : null,\r\n        playlistId : this.props.match.params.playlistid,\r\n        username : this.props.match.params.username,\r\n        loading: true,\r\n        editing: false,\r\n        forkPopupVisible: false,\r\n        fork_playlist_name: \"\",\r\n        error : \"\",\r\n        liked: false \r\n    }\r\n\r\n    // Get the playlist \r\n    getPlaylist = () => {\r\n        this.setState({loading : true})\r\n        console.log(this.state.playlistId)\r\n        let requestBody = {\r\n            query : `\r\n                query {\r\n                    getPlaylistByID (id : \"${this.state.playlistId}\"){\r\n                        name \r\n                        username \r\n                        date_created\r\n                        total_duration \r\n                        playlist_img\r\n                        likes \r\n                        public \r\n                        comments {\r\n                            _id\r\n                            user_id\r\n                            date\r\n                            message\r\n                            replies {\r\n                                _id\r\n                                user_id\r\n                                date\r\n                                message\r\n                            }\r\n                        }\r\n                        songs {\r\n                            song_id \r\n                            song_uri\r\n                            name \r\n                            artists\r\n                            duration\r\n                            song_img\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch('http://localhost:5000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('Playlist not found');\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                const playlist = data.data.getPlaylistByID\r\n                console.log(data)\r\n                let requestBody = {\r\n                    query: `\r\n                        query {\r\n                            getUserByUsername (username : \"${this.props.username}\") {\r\n                                user {\r\n                                    liked_playlists{ \r\n                                        playlist_id\r\n                                        name\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n                \r\n                fetch('http://localhost:5000/graphql', {\r\n                            method: 'POST',\r\n                            body: JSON.stringify(requestBody),\r\n                            headers: {\r\n                                'content-type': 'application/json'\r\n                            }\r\n                            })\r\n                            .then(res => {\r\n                                if (res.status !== 200 && res.status !== 201) \r\n                                    throw new Error('Failed');\r\n                                return res.json()\r\n                            })\r\n                            .then(data => {\r\n                                data = data.data.getUserByUsername.user\r\n                                console.log(data.liked_playlists)\r\n                                let liked = false \r\n                                data.liked_playlists.forEach(playlist => {\r\n                                    if (playlist.playlist_id === this.state.playlistId)\r\n                                        liked = true \r\n                                    \r\n                                })\r\n\r\n                                this.setState({\r\n                                    playlistInfo: playlist,\r\n                                    loading: false,\r\n                                    liked: liked\r\n                                })\r\n        \r\n                            })\r\n                            .catch(err => {\r\n                                console.log(err);\r\n                            });\r\n\r\n                \r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if (!this.props.username)\r\n            this.props.history.push('/login')\r\n        this.getPlaylist()\r\n    }\r\n\r\n    forkPlaylist = () => {\r\n        console.log(this.state.username)\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername (username : \"${this.state.username}\") {\r\n                        user {\r\n                            _id\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        //find user id\r\n        fetch('http://localhost:5000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('Failed');\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                data = data.data.getUserByUsername.user._id\r\n                let songs = []\r\n                this.state.playlistInfo.songs.forEach(song => {\r\n                    songs.push(JSON.stringify({\r\n                        song_id: song.song_id,\r\n                        name: song.name,\r\n                        uploaded: song.uploaded,\r\n                        artists: song.artists, \r\n                        duration: song.duration,\r\n                        song_img: song.song_img\r\n                    }))\r\n                })\r\n                console.log(this.state.fork_playlist_name)\r\n                requestBody = {\r\n                    query: `\r\n                        mutation {\r\n                            forkPlaylist (username : \"${this.props.username}\", playlist_id : \"${this.state.playlistId}\", name: \"${this.state.fork_playlist_name}\") {\r\n                                _id \r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n                console.log(\"requesting\")\r\n                // Create the playlist \r\n                fetch('http://localhost:5000/graphql', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(requestBody),\r\n                    headers: {\r\n                        'content-type': 'application/json'\r\n                    }\r\n                    })\r\n                    .then(res => {\r\n                        if (res.status !== 200 && res.status !== 201) \r\n                            throw new Error('Failed');\r\n                        return res.json()\r\n                    })\r\n                    .then (data => {\r\n                        console.log(data)\r\n                        if (data.errors)\r\n                            this.setState({error: data.errors[0].message})\r\n                        else {\r\n                            this.setForkInvisible()\r\n                    }\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                    });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    setForkVisible = () => {\r\n        this.setState({forkPopupVisible : true})\r\n    }\r\n\r\n    setForkInvisible = () => {\r\n        this.setState({forkPopupVisible : false})\r\n    }\r\n\r\n    forkInputOnChange = (event) => {\r\n        this.setState({fork_playlist_name : event.target.value})\r\n    }\r\n    handleLike = () => {\r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    like_unlikePlaylist(username: \"${this.props.username}\", playlist_id: \"${this.state.playlistId}\", playlist_name: \"${this.state.playlistInfo.name}\"){\r\n                        _id\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch('http://localhost:5000/graphql', {\r\n                            method: 'POST',\r\n                            body: JSON.stringify(requestBody),\r\n                            headers: {\r\n                                'content-type': 'application/json'\r\n                            }\r\n                            })\r\n                            .then(res => {\r\n                                if (res.status !== 200 && res.status !== 201) \r\n                                    throw new Error('Failed');\r\n                                return res.json()\r\n                            })\r\n                            .then(data => {\r\n                                let playlist = this.state.playlistInfo\r\n                                if (this.state.liked)\r\n                                    playlist.likes -= 1\r\n                                else \r\n                                    playlist.likes += 1\r\n                                \r\n                                this.setState({liked: !this.state.liked, playlist: playlist})\r\n        \r\n                            })\r\n                            .catch(err => {\r\n                                console.log(err);\r\n                            });\r\n    }\r\n\r\n    render() { \r\n\r\n            if (this.state.loading)\r\n                return (<> </>);\r\n            function User ({username, history}){\r\n                function toUserProfile(){\r\n                    history.history.push('/' + username)\r\n                }\r\n\r\n                return (\r\n                    <button className=\"user-btn\" onClick = {toUserProfile}> {username} </button>\r\n                )\r\n            }\r\n            return ( \r\n                <div className=\"container-fluid playlist-container playlist\">\r\n\r\n\r\n                    <div className=\"container-fluid playlist-data-container\">\r\n                        {/* Information about the Playlist */}\r\n                        <div className=\"information-row\">\r\n                            <div className=\"col text-center align-self-center playlist-col\">\r\n                                <div className=\"likes\">\r\n                                    {this.state.liked ? <AiFillHeart onClick = {this.handleLike} size={34}  style={{color: \"red\"}}/> : <AiFillHeart onClick = {this.handleLike}size={34} />} \r\n                                    \r\n                                    {this.state.playlistInfo.likes} \r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col text-center align-self-left playlist-col\">\r\n                                <div className=\"col\">\r\n                                    <img alt=\"playlist_img\" src={this.state.playlistInfo.playlist_img} class=\"song_picture\"></img>\r\n                                </div>\r\n                                <h2>{this.state.playlistInfo.name} {this.state.playlistInfo.public ? <AiFillEye size={24}/> : <AiFillEyeInvisible size={24}/>}</h2>\r\n\r\n                                <h5> Mixtape By: <User username = {this.state.playlistInfo.username} history = {this.props} /> </h5>\r\n                                <div>{this.state.playlistInfo.total_duration < 3600 ? \"0 hr \" + (this.state.playlistInfo.total_duration < 600 ? \"0\" + Math.floor(this.state.playlistInfo.total_duration/60) + \" min\": Math.floor(this.state.playlistInfo.total_duration/60) + \" min\") :\r\n                (Math.floor(this.state.playlistInfo.total_duration/3600) + \" hr \" + (this.state.playlistInfo.total_duration%3600 < 600 ? \"0\" + Math.floor(this.state.playlistInfo.total_duration/60) + \" min\": Math.floor(this.state.playlistInfo.total_duration/60) + \" min\"))}</div>\r\n                            </div>\r\n                            <div className=\"col text-center align-self-center playlist-col\">\r\n                                <div>\r\n                                    <FaShare size={34} className=\"share\" onClick={() => {navigator.clipboard.writeText(window.location.href)}}/> \r\n\r\n                                    \r\n                                    <BiGitRepoForked size={34} className=\"fork\" onClick={this.setForkVisible}/>\r\n                                </div>\r\n                            </div>\r\n                            {this.state.forkPopupVisible ? \r\n \r\n                                <div className=\"fork-playlist-box\">\r\n                                    Mixtape Name\r\n                                    <div className = \"error-box\"> {this.state.error} </div>\r\n                                    <input type=\"text\" required onChange={this.forkInputOnChange}/>\r\n                                    <button className = \"confirm-new-btn\" onClick={this.forkPlaylist}> <AiOutlineCheckCircle size = {24}/></button>\r\n                                    <button className = \"cancel-new-btn\"  onClick={this.setForkInvisible}> <AiOutlineCloseCircle size = {24}/></button>\r\n                                </div>\r\n                                :\r\n                                null\r\n                                }\r\n   \r\n                        </div>\r\n\r\n                        {/* Songs, Likes and Comments, Settings Navbar */}\r\n                        {this.state.playlistInfo.username === this.props.username ? \r\n                            <div className=\"navigation-row\">\r\n                                <div className=\"col text-center playlist-col\">\r\n                                    <button id = \"songs-btn\" className = \"songs-btn\" onClick = {this.changeView} style = {{borderBottom : \"3px solid #faed26\", fontWeight : \"bold\"}} > Songs </button>\r\n                                </div>\r\n\r\n                                <div className=\"col text-center playlist-col\">\r\n                                        <button id = \"comments-btn\" className = \"comments-btn\" onClick = {this.changeView}> Comments </button> \r\n                                </div>\r\n\r\n                                <div className=\"col text-center playlist-col\">\r\n                                        <button id = \"settings-btn\" className = \"settings-btn\"onClick = {this.changeView}> Settings </button> \r\n                                </div>\r\n                            </div> : \r\n                            <div className=\"row navigation-row\">\r\n                                <div className=\"col text-center playlist-col\">\r\n                                    <button id = \"songs-btn\" className = \"songs-btn\" onClick = {this.changeView} style = {{borderBottom : \"3px solid #faed26\", fontWeight : \"bold\"}}> Songs </button>\r\n                                </div>\r\n        \r\n                                <div className=\"col text-center playlist-col\">\r\n                                        <button id = \"comments-btn\" className = \"comments-btn\" onClick = {this.changeView}> Comments </button> \r\n                                </div>\r\n                            </div>             \r\n                        }\r\n\r\n                        {/* Render \"Songs\", \"Comments\", \"Settings\" */}\r\n                        {this.state.songsVisible ? <Songlist \r\n                                                        playlist_id = {this.state.playlistId} \r\n                                                        songs = {this.state.playlistInfo.songs} \r\n                                                        editing= {this.state.editing}\r\n                                                        play = {this.props.play}\r\n                                                        onPlayChange = {this.props.onPlayChange}\r\n                                                        onPlaylistChange = {this.props.onPlaylistChange}\r\n                                                        onSongChange = {this.props.onSongChange}\r\n                                                        current_playlist = {this.props.current_playlist}\r\n                                                        current_song = {this.props.current_song}\r\n                                                    /> \r\n                        : null}\r\n                        {this.state.commentsVisible ? <Comments comments = {this.state.playlistInfo.comments} username = {this.props.username} playlist_id = {this.state.playlistId}  /> : null}\r\n                        {this.state.settingsVisible ? <PlaylistSetting playlist = {this.state.playlistInfo} editing= {this.state.editing} onChange = {this.onChange}/> : null}\r\n                        <div className = \"row blank-space\"> </div>\r\n                    </div>\r\n  \r\n                </div>\r\n                \r\n            );\r\n        }\r\n\r\n        // Update the playlist after edit \r\n        onChange = async (type, obj) => {\r\n            if (type === \"playlist\") {\r\n                this.setState({playlist: obj})\r\n            }\r\n            else if (type === \"revert\"){\r\n                this.setState({\r\n                    songsVisible : true,\r\n                    commentsVisible : false,\r\n                    settingsVisible : false,\r\n                })\r\n               this.getPlaylist()\r\n            }\r\n            else if (type === \"save\"){\r\n                this.updatePrivacy()\r\n                this.updateName()\r\n                this.updateImg()\r\n                console.log(this.state.playlistId)\r\n                await this.removeSongs()\r\n                console.log(this.state.playlistInfo.songs)\r\n                for(let i = 0; i < this.state.playlistInfo.songs.length; i++)\r\n                    await this.addSong(this.state.playlistInfo.songs[i])\r\n            }\r\n            else{\r\n                this.setState({editing: obj})\r\n            }\r\n\r\n\r\n       \r\n        }\r\n\r\n        updatePrivacy = () => {\r\n            // Set Public/Private status \r\n            let playlist = this.state.playlistInfo\r\n            let requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changePlaylistPrivacy(id: \"${this.state.playlistId}\", privacy: ${playlist.public}){\r\n                            _id \r\n                        }\r\n                    }\r\n                `\r\n            }\r\n            this.fetch(requestBody)\r\n        }\r\n\r\n        updateName = () => {\r\n            let playlist = this.state.playlistInfo\r\n            let requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changePlaylistName(id: \"${this.state.playlistId}\", name: \"${playlist.name}\"){\r\n                            _id \r\n                        }\r\n                    }\r\n                `\r\n            }\r\n\r\n            this.fetch(requestBody)\r\n        }\r\n        updateImg = () => {\r\n            let playlist = this.state.playlistInfo\r\n            let requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changePlaylistImg(id: \"${this.state.playlistId}\", img: \"${playlist.playlist_img}\"){\r\n                            _id \r\n                        }\r\n                    }\r\n                `\r\n            }\r\n\r\n            this.fetch(requestBody)\r\n        }\r\n\r\n        removeSongs = () => {\r\n            return new Promise((resolve, reject) => {\r\n                let requestBody = {\r\n                    query: `\r\n                        mutation {\r\n                            removeAllSongs(id: \"${this.state.playlistId}\"){\r\n                                _id \r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n                fetch('http://localhost:5000/graphql', {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }\r\n                })\r\n                .then(res => {\r\n                    if (res.status !== 200 && res.status !== 201) \r\n                        throw new Error('Playlist not found');\r\n                    return res.json()\r\n                })\r\n                .then(data => {\r\n                    resolve(data)\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n             });\r\n        }\r\n\r\n        addSong = (song) => {\r\n            return new Promise((resolve, reject) => {\r\n                let artists = \"\"\r\n                artists += song.artists.map(artist => {\r\n                    return \"\\n\" + artist\r\n                })\r\n    \r\n                let requestBody = {\r\n                    query: `\r\n                        mutation {\r\n                            addSong(songInput: {_id: \"${song.song_id}\", name: \"${song.name}\", artists: \"\"\"${artists}\"\"\", uploaded: false, duration: ${song.duration}, img: \"${song.song_img}\",uri: \"${song.song_uri}\"}, playlist_id: \"${this.state.playlistId}\"){\r\n                                _id\r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n                fetch('http://localhost:5000/graphql', {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }\r\n                })\r\n                .then(res => {\r\n                    if (res.status !== 200 && res.status !== 201) \r\n                        throw new Error('Playlist not found');\r\n                    return res.json()\r\n                })\r\n                .then(data => {\r\n                    resolve(data)\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n             });\r\n        }\r\n        fetch = (requestBody) => {\r\n            fetch('http://localhost:5000/graphql', {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }\r\n                })\r\n                .then(res => {\r\n                    if (res.status !== 200 && res.status !== 201) \r\n                        throw new Error('Playlist not found');\r\n                    return res.json()\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n\r\n        }\r\n\r\n        changeView = (event) => {\r\n            let invisible = [];\r\n            const visible = event.target.className\r\n            if (visible === \"songs-btn\"){\r\n                this.setState({\r\n                    songsVisible: true,\r\n                    commentsVisible: false,\r\n                    settingsVisible: false\r\n                })\r\n                invisible.push(\"comments-btn\")\r\n                invisible.push(\"settings-btn\")\r\n            }\r\n            else if (visible === \"comments-btn\"){\r\n                this.setState({\r\n                    songsVisible: false,\r\n                    commentsVisible: true,\r\n                    settingsVisible: false\r\n                })\r\n    \r\n                invisible.push(\"songs-btn\")\r\n                invisible.push(\"settings-btn\")\r\n            }\r\n            else {\r\n                this.setState({\r\n                    songsVisible: false,\r\n                    commentsVisible: false,\r\n                    settingsVisible: true\r\n                })\r\n                invisible.push(\"songs-btn\")\r\n                invisible.push(\"comments-btn\")\r\n    \r\n            }\r\n      \r\n            document.getElementById(visible).style.borderBottom = \"3px solid #faed26\"\r\n            document.getElementById(visible).style.fontWeight = \"bold\"\r\n            try {\r\n                document.getElementById(invisible[0]).style.borderBottom = \"none\";\r\n                document.getElementById(invisible[0]).style.fontWeight = \"normal\"\r\n            }catch{}\r\n            try {\r\n                document.getElementById(invisible[1]).style.borderBottom = \"none\";\r\n                document.getElementById(invisible[1]).style.fontWeight = \"normal\"  \r\n            } catch {}\r\n            \r\n        }\r\n\r\n}\r\n \r\nexport default Playlist;","import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nconst useStyles = theme => ({\r\n  root: {\r\n    minHeight: '100vh',\r\n    backgroundImage: `url(${process.env.PUBLIC_URL + '../../assets/home.jpg' })`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: 'cover',\r\n    flexGrow: 1,\r\n    justifyContent: 'center'\r\n  },\r\n  \r\n  hero: {\r\n    height: \"100vh\",\r\n    background: \"none\",\r\n    position: \"relative\",\r\n    display: 'flex',\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    color: \"black\",\r\n    fontSize: \"3rem\",\r\n    \r\n  },\r\n\r\n  title: {\r\n    fontSize: \"3rem\",\r\n    color: \"black\",\r\n    display: 'flex',\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  \r\n});\r\n\r\nclass Home extends Component {\r\n  state = {  }\r\n  componentDidMount = () => {\r\n    if (this.props.username)\r\n      this.props.history.push('/home')\r\n  }\r\n  render() { \r\n    const {classes} = this.props\r\n    return (  \r\n      <div className={classes.root}>\r\n      <Navbar />\r\n      <Box className={classes.hero}>\r\n        <Box textAlign='center'>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          Follow Music Mixtapes\r\n        </Typography>\r\n        <Typography className={classes.title} color=\"textSecondary\">\r\n          Join Conversations\r\n        </Typography>\r\n        <Link to=\"/register\">\r\n        <Button variant=\"contained\" color=\"secondary\" >\r\n          Get Started\r\n        </Button>\r\n        </Link>\r\n        </Box>\r\n      </Box>\r\n      \r\n\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(Home);","/** HOME SCREEN\r\n * Handles displaying the home screen after logging in \r\n */\r\n\r\nimport React, {Component } from 'react'\r\nimport '../Navbar/Navbar.css';\r\nimport \"./HomeScreen.css\"\r\n\r\nclass HomeScreen extends Component {\r\n\r\n    state = {\r\n      loading: true,\r\n      current_playlist: null,\r\n      current_song: null,\r\n      index: -1\r\n    }\r\n\r\n    componentDidMount = () => {\r\n      if (!this.props.username)\r\n        this.props.history.push('/login')\r\n\r\n      this.setState({loading : true})\r\n      let current_song = null\r\n        let requestBody = {\r\n            query : `\r\n                query {\r\n                  getUserByUsername(username: \"${this.props.username}\"){\r\n                      user{\r\n                      current_song_id\r\n                      current_playlist_id\r\n                      }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch('http://localhost:5000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('Playlist not found');\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                data = data.data.getUserByUsername.user\r\n\r\n                if (data.current_playlist_id == null){\r\n                  this.setState({\r\n                    loading: false\r\n                  })\r\n                }\r\n\r\n                else{\r\n                  requestBody = {\r\n                    query : `\r\n                        query {\r\n                          getPlaylistByID(id : \"${data.current_playlist_id}\"){\r\n                            _id\r\n                            name\r\n                            playlist_img\r\n                            total_duration\r\n                            songs {\r\n                              song_id\r\n                              name\r\n                              artists\r\n                              uploaded\r\n                              duration\r\n                              song_img\r\n                            }\r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n\r\n                current_song = data.current_song_id\r\n\r\n                fetch('http://localhost:5000/graphql', {\r\n                  method: 'POST',\r\n                  body: JSON.stringify(requestBody),\r\n                  headers: {\r\n                      'content-type': 'application/json'\r\n                  }\r\n                  })\r\n                  .then(res => {\r\n                      if (res.status !== 200 && res.status !== 201) \r\n                          throw new Error('Playlist not found');\r\n                      return res.json()\r\n                  })\r\n                  .then(data => {\r\n                      data = data.data.getPlaylistByID\r\n                      let index = -1\r\n                      data.songs.forEach((song,i) => {\r\n                        if (song.song_id === current_song)\r\n                          index = i\r\n                      })\r\n                      \r\n                      this.setState({\r\n                        current_playlist: data,\r\n                        current_song: current_song,\r\n                        index: index,\r\n                        loading: false\r\n                      })\r\n                  })\r\n                  .catch(err => {\r\n                      console.log(err);\r\n                  });\r\n                }\r\n        \r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    // Redirect to Home when home button is pressed \r\n    handleHome = () => {\r\n        const {history } = this.props;\r\n        history.replace('/home')\r\n    }\r\n    \r\n    getArtists = () => {\r\n      let artists = \"\"\r\n\r\n      this.props.current_song.artists.forEach((artist,i) => {\r\n          if (i === 0)\r\n            artists = artist \r\n          else \r\n            artists = artists + \", \" + artist\r\n      })\r\n      console.log(artists)\r\n      return artists\r\n    }\r\n    render() { \r\n\r\n      if (this.state.loading)\r\n        return (<></>)\r\n        console.log(this.props.access_token)\r\n    \r\n        return ( \r\n            \r\n                <div className=\"container-fluid  user-home-container\" ref={this.container}>\r\n                    {/* Home Button and Account Icon */}\r\n\r\n                    <div className=\"container-fluid text-center playlist-info-row\">\r\n                              <div className=\"current-playlist\">\r\n                                CURRENT MIXTAPE\r\n                              </div>\r\n                              <div className=\"current-playlist-name\">\r\n                                {this.props.current_playlist ? this.props.current_playlist.name : \"\"}\r\n                              </div>\r\n                        </div>\r\n\r\n                    <div className=\"image-container\">\r\n                        <img src={this.props.current_playlist ? this.props.current_playlist.playlist_img : 'https://community.spotify.com/t5/image/serverpage/image-id/25294i2836BD1C1A31BDF2?v=1.0'}  alt=\"\" class=\"home_card\"/>\r\n                    </div>\r\n                    \r\n                    <div className=\"container-fluid text-center song-info-row\">\r\n                        <div className=\"song-name\">\r\n                            {this.props.current_playlist ? this.props.current_song.name : \"\"}\r\n                        </div>\r\n                        <div className=\"song-artist\">\r\n                            {this.props.current_playlist ? this.getArtists() : \"\"}\r\n                        </div>\r\n                    </div>\r\n                    {/* <SpotifyPlayer\r\n                      token= {this.props.access_token}\r\n                      uris={[\"spotify:track:2r6OAV3WsYtXuXjvJ1lIDi\", \"spotify:track:7qwt4xUIqQWCu1DJf96g2k\"]}\r\n                      style = {{width: \"100%\"}}\r\n                    /> */}\r\n                  \r\n                    \r\n                </div>\r\n          \r\n         );\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default HomeScreen;\r\n\r\n\r\n","/** ADD SONG\r\n * Component within Search List \r\n * Used to add a song into a playlist \r\n**/\r\n\r\nimport React, { Component } from 'react'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport TextField from '@material-ui/core/TextField'\r\nconst useStyles = theme => ({\r\n    dialog :{\r\n        minWidth: \"300px\"\r\n    },\r\n  dialogButton : {\r\n        width: \"100%\",\r\n        background: \"transparent\",\r\n        '&:focus' :{\r\n            outline: \"none\"\r\n        }\r\n  }\r\n})\r\nclass AddSong extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.anchorEl = null\r\n        this.nameEl = React.createRef()\r\n    }\r\n    state = { \r\n        playlists: null, \r\n        song: this.props.song,\r\n        username: this.props.username, \r\n        loading: true,\r\n        open: false,\r\n        createNew: false,\r\n        error : null\r\n    }\r\n\r\n    // Fetch the user's playlist \r\n    componentDidMount = () => {\r\n        this.setState({loading: true})\r\n\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.props.username}\"){\r\n                        playlists {\r\n                            _id\r\n                            name\r\n                            songs {\r\n                                song_id\r\n                                name\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch ('http://localhost:5000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                this.setState({playlists : data.data.getUserByUsername.playlists, loading: false})\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    // Handle the visibility state of the user's playlists \r\n    changeVisible = () => {\r\n        this.setState({visible : !this.state.visible})\r\n    }\r\n    millisToSeconds(millis) {\r\n        const seconds = Math.floor(millis/1000);\r\n        return seconds\r\n    }\r\n\r\n    // Handle adding the song to a playlist \r\n    handleAdd = (event) => {\r\n        let artists = \"\"\r\n\r\n        artists += this.state.song.artists.map(artist => {\r\n            return \"\\n\" + artist.name\r\n        })\r\n        let songlength = this.millisToSeconds(this.state.song.duration_ms)\r\n        console.log(event.currentTarget)\r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    addSong(songInput: {_id: \"${this.state.song.id}\", name: \"${this.state.song.name}\", artists: \"\"\"${artists}\"\"\", uploaded: false, duration: ${songlength}, img: \"${this.state.song.album.images[0].url}\" , uri: \"${this.state.song.uri}\"}, playlist_id: \"${event.currentTarget.id}\"){\r\n                        _id\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch ('http://localhost:5000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                this.handleClose()\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n    \r\n    createAndAdd = () => {\r\n        console.log(\"HERE\")\r\n        const name = this.nameEl.current.children[1].children[0].value.trim()\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.props.username}\"){\r\n                        user{\r\n                            _id\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch ('http://localhost:5000/graphql', {\r\n                        method: 'POST',\r\n                        body: JSON.stringify(requestBody),\r\n                        headers: {\r\n                            'content-type': 'application/json'\r\n                        }})\r\n                        .then(res => {\r\n                            if (res.status !== 200 && res.status !== 201)\r\n                                throw new Error ('Failed')\r\n                            return res.json()\r\n                        })\r\n                        .then(data => {\r\n                        \r\n                            requestBody = {\r\n                                    query: `\r\n                                        mutation {\r\n                                            createPlaylist (username : \"${this.props.username}\", name : \"${name}\", user_id: \"${data.data.getUserByUsername.user._id}\") {\r\n                                                _id \r\n                                            }\r\n                                        }\r\n                                    `\r\n                                }\r\n                            \r\n                                // Create the playlist \r\n                            fetch('http://localhost:5000/graphql', {\r\n                                        method: 'POST',\r\n                                        body: JSON.stringify(requestBody),\r\n                                        headers: {\r\n                                            'content-type': 'application/json'\r\n                                        }\r\n                                        })\r\n                                    .then(res => {\r\n                                        // if (res.status !== 200 && res.status !== 201) \r\n                                        //     throw new Error('Failed');\r\n                                        return res.json()\r\n                                    })\r\n                                    .then(result => {\r\n                                        // Update the playlists on the UI \r\n                              \r\n                                        if (result.errors)\r\n                                            this.setState({error: result.errors[0].message})\r\n                                        else {\r\n                                            let artists = \"\"\r\n\r\n                                            artists += this.state.song.artists.map(artist => {\r\n                                                return \"\\n\" + artist.name\r\n                                            })\r\n                                            let songlength = this.millisToSeconds(this.state.song.duration_ms)\r\n                                            let requestBody = {\r\n                                                query: `\r\n                                                    mutation {\r\n                                                        addSong(songInput: {_id: \"${this.state.song.id}\", \r\n                                                            name: \"${this.state.song.name}\", \r\n                                                            artists: \"\"\"${artists}\"\"\", \r\n                                                            uploaded: false, \r\n                                                            duration: ${songlength}, \r\n                                                            img: \"${this.state.song.album.images[0].url}\" , \r\n                                                            uri: \"${this.state.song.uri}\"}, \r\n                                                            playlist_id: \"${result.data.createPlaylist._id}\"){\r\n\r\n                                                            _id\r\n                                                            name \r\n                                                            songs {\r\n                                                                name \r\n                                                                song_id\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                `\r\n                                            }\r\n\r\n                                            fetch ('http://localhost:5000/graphql', {\r\n                                                method: 'POST',\r\n                                                body: JSON.stringify(requestBody),\r\n                                                headers: {\r\n                                                    'content-type': 'application/json'\r\n                                                }})\r\n                                                .then(res => {\r\n                                                    if (res.status !== 200 && res.status !== 201)\r\n                                                        throw new Error ('Failed')\r\n                                                    return res.json()\r\n                                                })\r\n                                                .then(data => {\r\n                                                    // Add playlistname \r\n                                                    console.log(data.data.addSong)\r\n                                                    let playlists = this.state.playlists \r\n                                                    playlists.push(data.data.addSong)\r\n                                                    this.setState({playlists: playlists, error: \"\", open:false, createNew:false})\r\n                                                    console.log(playlists)\r\n\r\n                                                })\r\n                                                .catch(error => {\r\n                                                    console.log(error)\r\n                                                })\r\n                                            }\r\n                                        })\r\n                                    .catch(err => {\r\n                                        console.log(err);\r\n                                    });\r\n                                })\r\n                        .catch(error => {\r\n                            console.log(error)\r\n                        })\r\n    }\r\n\r\n    handleClickOpen = () => {\r\n        this.setState({open:true})\r\n\r\n    };\r\n    \r\n    handleClose = () => {\r\n        this.setState({open:false, createNew:false})\r\n    }\r\n\r\n    openNew = () => {\r\n        this.setState({createNew : true})\r\n    }\r\n    closeNew = () =>{\r\n        this.setState({createNew : false })\r\n    }\r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n\r\n        const {classes} = this.props\r\n\r\n        return ( \r\n            <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={this.handleClickOpen}>\r\n        Add Song to Mixtape\r\n      </Button>\r\n\r\n      <Dialog\r\n        open={this.state.open}\r\n        keepMounted\r\n        onClose={this.handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n        className = {classes.dialog}\r\n        fullWidth={true}\r\n        maxWidth = {'sm'}\r\n      >\r\n        \r\n        {!this.state.createNew ?\r\n            <>\r\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"Add Song to Mixtape\"}</DialogTitle>\r\n                {\r\n                    this.state.playlists.map(playlist => {\r\n                        return (\r\n                            <DialogContent>\r\n                                <Button className = {classes.dialogButton} id={playlist._id} onClick = {this.handleAdd}>\r\n                                    {playlist.name}\r\n                                </Button>\r\n                            </DialogContent>\r\n                        )\r\n                    })\r\n                }\r\n        \r\n                <DialogActions>\r\n                    <Button  onClick={this.openNew} color=\"primary\">\r\n                        New Mixtape\r\n                    </Button>\r\n                    <Button onClick={this.handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                </DialogActions>\r\n            \r\n            </>\r\n            :\r\n            <>\r\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"Add Song to New Mixtape\"}</DialogTitle>\r\n                <DialogContent>\r\n                    {this.state.error ?\r\n                        <DialogContentText> {this.state.error} </DialogContentText> : null\r\n\r\n                    }\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Mixtape Name\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        ref = {this.nameEl}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button  onClick={this.createAndAdd} color=\"primary\">\r\n                        Create and Add\r\n                    </Button>\r\n                    <Button onClick={this.closeNew} color=\"primary\">\r\n                        Back\r\n                    </Button>\r\n                </DialogActions>\r\n            </>\r\n        }\r\n       </Dialog>\r\n    </div>\r\n\r\n        );\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyles)(AddSong);\r\n\r\n\r\n","/** USER CARD\r\n * Component within Search List Card\r\n * Used to display a user in the search results \r\n */\r\n\r\nimport React, { Component } from 'react'\r\n// Received for Pending request from user. Shared for pending request to user ## RiUserUnfollowLine\r\nimport {RiUserFollowLine, RiUserAddLine,RiUserReceivedLine,RiUserSharedLine} from 'react-icons/ri'\r\n\r\nclass UserCard extends Component {\r\n    state = { \r\n        user: this.props.user,\r\n        sessionUserRequests: null,\r\n        sessionUserFollowers: null,\r\n        loading: true,\r\n    }\r\n\r\n    // Get the user \r\n    componentDidMount = () => {\r\n        this.setState({loading: true})\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.props.sessionUser}\"){\r\n                        user {\r\n                            _id\r\n                            follow_requests {\r\n                                user_id\r\n                                username\r\n                                profile_img\r\n                            }\r\n                            followers {\r\n                                user_id \r\n                                username\r\n                                profile_img\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                this.setState({\r\n                    sessionUserRequests : data.data.getUserByUsername.user.follow_requests,\r\n                    sessionUserFollowers : data.data.getUserByUsername.user.followers,\r\n                    loading: false \r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    // If the session user has made a follow request \r\n    userRequestedFollow = () => {\r\n        const requests = this.state.user.user.follow_requests\r\n\r\n        let requested = false\r\n        requests.forEach(request => {\r\n            if (request.username === this.props.sessionUser)\r\n                requested = true \r\n          \r\n        })\r\n        return requested\r\n    }\r\n\r\n    // If the searched user has made a follow request \r\n    searchedRequestedFollow = () => {\r\n        let requested = false \r\n        this.state.sessionUserRequests.forEach(request => {\r\n            if (request.username === this.state.user.user.username)\r\n                requested = true\r\n        })\r\n        return requested\r\n    }\r\n\r\n    // If the searched user is following \r\n    searchedFollowing = () => {\r\n        let following = false \r\n        this.state.sessionUserFollowers.forEach(follower => {\r\n            if (follower.username === this.state.user.user.username)\r\n                following = true\r\n        })\r\n        return following \r\n    }\r\n\r\n    // If the session user is following searched user \r\n    userFollowing = () => {\r\n        let following = false \r\n        this.state.user.user.followers.forEach(follower => {\r\n            if (follower.username === this.props.sessionUser)\r\n                following = true\r\n        })\r\n        return following \r\n    }\r\n\r\n    // Send a follow request \r\n    sendRequest = () => {\r\n        console.log(this.state.user.user._id)\r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    addRequest(id: \"${this.state.user.user._id}\", requested_username: \"${this.props.sessionUser}\", profile_img: \"${this.state.user.user.profile_img}\"){\r\n                            _id\r\n                            username\r\n                            profile_img\r\n                            followers {\r\n                                user_id\r\n                                username\r\n                                profile_img\r\n                            }\r\n                            follow_requests {\r\n                                user_id \r\n                                username\r\n                                profile_img\r\n                            }\r\n\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n            console.log(data)\r\n                let user = this.state.user \r\n                user.user = data.data.addRequest\r\n       \r\n               this.setState({user: user})\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n    }\r\n\r\n    // Go to the user's profile page \r\n    toUser = () => {\r\n        console.log(this.props)\r\n        this.props.history.push('/' +  this.state.user.user.username)\r\n    }\r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>);\r\n        // Do not show in the search results if it's the user that's logged in \r\n        if (this.props.sessionUser === this.state.user.user.username)\r\n            return (<> </>);\r\n        return(\r\n            <div>\r\n                <div className='card z-depth-0 text search_card'>\r\n                    <div className=\"col s1\">\r\n                        <img alt = \"user_img\" src={this.state.user.user.profile_img} class=\"user_picture\"></img>\r\n                    </div>\r\n                    <div className='card-content col s3 user-button'>\r\n                        <button onClick = {this.toUser}><span className='card-title'>{this.state.user.user.username}</span> </button>\r\n                    </div>\r\n                    <div className='card-content col s3'>\r\n                        <span className='card-title'>{this.state.user.user.followers.length}</span>\r\n                    </div>\r\n                    <div className='card-content col s3'>\r\n                        <span className='card-title'>{this.state.user.playlists.length}</span>\r\n                    </div>\r\n\r\n                    <div className='card-content col s3 user-follow-info'>\r\n                        {this.userRequestedFollow() ?  <RiUserSharedLine size= {24}/> : \r\n                         this.userFollowing() ? <RiUserFollowLine size= {24}/> : \r\n                         this.searchedRequestedFollow() ? <RiUserReceivedLine size= {24}/>:\r\n                         <button onClick={this.sendRequest}> <RiUserAddLine size= {24}/> </button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default UserCard;","/** PLAYLIST CARD  \r\n * Component withing Search List Card \r\n * Used to display a playlist in the search results \r\n*/\r\n\r\nimport React, { Component } from 'react'\r\n\r\nclass PlaylistCard extends Component {\r\n    state = { \r\n        playlist: this.props.playlist,\r\n        loading: true,\r\n     }\r\n    render() { \r\n        \r\n        return (\r\n            <div>\r\n                <div className='card z-depth-0 text search_card'>\r\n                    <div className=\"card-content col s1\">\r\n                        <img alt = \"playlist_img\" src={this.state.playlist.playlist_img} class=\"song_picture\"></img>\r\n                    </div>\r\n                    <div className='card-content col s3 playlist-button'>\r\n                        <button  onClick={this.toPlaylist}><span className='card-title'>{this.state.playlist.name}</span></button>\r\n                        </div>\r\n                    <div className='card-content col s3'>\r\n                        <span className='card-title'>{this.state.playlist.username}</span>\r\n                    </div>\r\n                    <div className='card-content col s1'>\r\n                        <span className='card-title'>{this.state.playlist.likes}</span>\r\n                    </div>\r\n                    <div className='card-content col s3'>\r\n                        <span className='card-title'>{this.state.playlist.songs.length} {this.state.playlist.songs.length === 1 ? \"Song\" : \"Songs\"} - {this.state.playlist.total_duration < 3600 ? \"0 hr \" + (this.state.playlist.total_duration < 600 ? \"0\" + Math.floor(this.state.playlist.total_duration/60) + \" min\": Math.floor(this.state.playlist.total_duration/60) + \" min\") :\r\n                (Math.floor(this.state.playlist.total_duration/3600) + \" hr \" + (this.state.playlist.total_duration%3600 < 600 ? \"0\" + Math.floor(this.state.playlist.total_duration/60) + \" min\": Math.floor(this.state.playlist.total_duration/60) + \" min\"))}\r\n                        </span>\r\n                    </div>\r\n                    \r\n                {\r\n                    this.props.sessionUser !== this.state.playlist.username ? \r\n                        <div className='card-content col s2 '>\r\n                            <button className=\"btn-floating red button\" onClick={this.handleFavorite}><i className='material-icons'>favorite</i></button>\r\n                        </div>\r\n                    : <div className='card-content col s3 '>\r\n                        \r\n                        </div>\r\n                }\r\n                    \r\n                  \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Go to the playlist \r\n    toPlaylist = () => {\r\n        this.props.history.push('/' +  this.state.playlist.username + \"/playlist=\" + this.state.playlist._id)\r\n    }\r\n\r\n    // Add the playlist into the user's saved playlist \r\n    handleFavorite = () => {\r\n        console.log(this.props.sessionUser)\r\n        console.log(this.state.playlist._id)\r\n        console.log(this.state.playlist.name)\r\n        let requestBody = {\r\n            query: `\r\n                mutation { \r\n                    addSavedPlaylist(username: \"${this.props.sessionUser}\", playlist_id: \"${this.state.playlist._id}\", name: \"${this.state.playlist.name}\"){\r\n                            _id\r\n                            name\r\n                            username\r\n                            songs {\r\n                                song_id\r\n                                name\r\n                            }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n            console.log(data)\r\n            //     let user = this.state.user \r\n            //     user.user = data.data.addRequest\r\n       \r\n            //    this.setState({user: user})\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n    }\r\n}\r\n \r\nexport default PlaylistCard;","import React, { Component } from 'react'\r\nimport SearchListCard from './SearchListCard'\r\n\r\nclass ArtistCard extends Component {\r\n    state = {  \r\n        loading: true,\r\n        songs: null,\r\n        showSongs:false\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let requestBody = { artist: this.props.item.name}\r\n        fetch(\"http://localhost:5000/v1/artist-tracks/\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n\r\n                this.setState({loading: false, songs: data.tracks})\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n    handleClick = () => {\r\n\r\n        this.setState({showSongs : !this.state.showSongs}, function() {console.log(this.state)})\r\n    }\r\n    render() { \r\n       \r\n        return (  \r\n            <div>\r\n            <div className='card z-depth-0 text search_card' onClick = {this.handleClick}>\r\n                <div className='card-content col s3'>\r\n                    {this.props.item.images[0] ? <img alt = \"\" src={this.props.item.images[0].url} class=\"artist_picture\"></img> : <img alt = \"\" src='https://cdn3.iconfinder.com/data/icons/social-media-circle-flat-1/1024/itunes-01-01-512.png' class=\"artist_picture\"></img>}\r\n                </div>\r\n                <div className='card-content col s3'>\r\n                    <span className='card-title'>{this.props.item.name}</span>\r\n                </div>\r\n                \r\n                <div className='card-content col s3'>\r\n                    {/* <button className=\"btn-floating red button\" onClick={this.handleFavorite}><i className='material-icons'>favorite</i></button> */}\r\n                    \r\n                    {/* <button className=\"btn-floating black button\" onClick={this.handleAddToPlaylist}><i className='material-icons'>add_circle</i></button> */}\r\n                </div>\r\n                \r\n            </div>\r\n            {this.state.showSongs ? \r\n                <div style={{marginLeft: \"30px\"}}>\r\n                    {\r\n                    this.state.songs.items.map(song => {\r\n                        return <SearchListCard  key = {song.id} item={song} type=\"track\"  username={this.props.username} history = {this.props.history} />\r\n                    })\r\n                }\r\n                </div>\r\n                : \r\n                null\r\n            }\r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default ArtistCard;","/** SEARCH LIST CARD \r\n * Component withing Search List \r\n * Handles displaying one search result \r\n**/\r\n\r\nimport React, { Component } from 'react'\r\nimport './Search.css'\r\nimport AddSong from './AddSongs'\r\nimport UserCard from './UserCard'\r\nimport PlaylistCard from './PlaylistCard'\r\nimport ArtistCard from './ArtistCard'\r\nclass SearchListCard extends Component {\r\n    state = {\r\n        item : this.props.item,\r\n        type : this.props.type,\r\n    }\r\n\r\n    // Converts length og song into minutes \r\n    millisToSeconds(millis) {\r\n        const seconds = Math.floor(millis/1000);\r\n        return seconds\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n            {this.state.type === \"track\" ? this.renderSong() : \r\n            this.state.type === \"artist\" ? this.renderArtist(): \r\n            this.state.type === \"playlist\" ? <PlaylistCard playlist = {this.state.item} sessionUser = {this.props.username} history = {this.props.history}/>:\r\n            <UserCard user = {this.state.item} sessionUser = {this.props.username} history = {this.props.history}/>}\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    renderArtist(){\r\n        \r\n        return(\r\n            <ArtistCard item = {this.state.item}  username={this.props.username} history = {this.props.history}/>\r\n        );\r\n    }\r\n\r\n    renderSong(){\r\n        const artists = this.state.item.artists\r\n\r\n        let artistNames = \"\"\r\n        artists.forEach(artist => {\r\n            artistNames = artistNames + artist.name + \" \"\r\n\r\n        })\r\n\r\n        const songLength = this.millisToSeconds(this.state.item.duration_ms)\r\n\r\n        return (\r\n            <div>\r\n                <div className='card z-depth-0 text search_card'>\r\n                <div className='card-content col s2'>\r\n                        {this.state.item.album.images[0] ? <img alt = \"\" src={this.state.item.album.images[0].url} class=\"song_picture\"></img> : <img alt = \"\" src='https://cdn3.iconfinder.com/data/icons/social-media-circle-flat-1/1024/itunes-01-01-512.png' class=\"song_picture\"></img>}\r\n                    </div>\r\n                    <div className='card-content col s3'>\r\n                        <span className='card-title'>{this.state.item.name}</span>\r\n                    </div>\r\n                    <div className='card-content col s3'>\r\n                        <span className='card-title'>{artistNames}</span>\r\n                    </div>\r\n                    <div className='card-content col s3'>\r\n                        <span className='card-title'>{songLength < 60 ? \"0:\" + (songLength < 10 ? \"0\" + songLength: songLength) :\r\n                (Math.floor(songLength/60) + \":\" + (songLength%60 < 10 ? \"0\" + songLength%60 : songLength%60))}</span>\r\n                    </div>\r\n                    <div className='card-content col s1 '>\r\n                        {/* <button className=\"btn-floating red button\" onClick={this.handleFavorite}><i className='material-icons'>favorite</i></button> */}\r\n                        <AddSong username ={this.props.username} song = {this.state.item}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default SearchListCard;","/** SEARCH LIST \r\n * Component used within Search Screen \r\n * Used to handle display the list of search results \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport SearchListCard from './SearchListCard.js'\r\n\r\n\r\nclass SearchList extends Component {\r\n\r\n    \r\n    render() {\r\n\r\n        const items = this.props.searchList;\r\n        const tracks = items.songs\r\n        const artists = items.artists\r\n        const users = items.users\r\n        const playlists = items.playlists\r\n\r\n        return (\r\n            <div className='section'>\r\n                {/* Display the tracks */}\r\n                {tracks ? \r\n                    <>\r\n                    <div className=\"row\">\r\n                        <h3 className=\"col s1\">Songs</h3>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='col s3'></div>\r\n                        <div className='col s3'>Song</div>\r\n                        <div className='col s3'>Artist</div>\r\n                        <div className='col s3'>Duration</div>\r\n                        <div className='col s3'></div>\r\n                    </div>\r\n                    {tracks && tracks.map(function(item) {\r\n                        return (\r\n                            <SearchListCard key = {item.id} item={item} type=\"track\" username = {this.props.username} history = {this.props.history}/>\r\n                        );}, this)\r\n                    }\r\n                    </>\r\n                    : null\r\n                }\r\n\r\n                {/* Display the artists */}\r\n                {artists ? \r\n                <>\r\n                <div className='row'>\r\n                        <div className='col s3'>Artists</div>\r\n                    </div>\r\n                    {artists && artists.map(function(item) {\r\n                    return (\r\n                        <SearchListCard key = {item.id} item={item} type=\"artist\" username = {this.props.username} history = {this.props.history}/>\r\n                    );} ,this)\r\n                     }\r\n                \r\n                </>\r\n                :\r\n                null\r\n                }\r\n\r\n                {/* Display the playlists */}\r\n                {\r\n                    playlists ? \r\n                    <>\r\n                    <div className=\"row\">\r\n                        <h3 className=\"col s1\">Mixtapes</h3>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='col s1'></div>\r\n                        <div className='col s3'>Name</div>\r\n                        <div className='col s3'>Username</div>\r\n                        <div className='col s1'>Likes</div>\r\n                        <div className='col s3'>Songs</div>\r\n                        <div className='col s3'></div>\r\n                    </div>\r\n                    {playlists && playlists.map(function(item) {\r\n                        console.log(item)\r\n                    return (\r\n                        <SearchListCard key = {item._id} item={item} type=\"playlist\" username = {this.props.username} history = {this.props.history}/>\r\n                    );},this)\r\n                    }\r\n                    </> : \r\n                    null\r\n                }\r\n\r\n                {/* Display the Users */}\r\n                {users ? \r\n                <>\r\n                <div className=\"row\">\r\n                        <h3 className=\"col s1\">Users</h3>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='col s3'></div>\r\n                        <div className='col s3'>User</div>\r\n                        <div className='col s3'>Followers</div>\r\n                        <div className='col s3'>Mixtapes</div>\r\n                        <div className='col s3'></div>\r\n                    </div>\r\n                    {users && users.map(function(item) {\r\n                    return (\r\n                        <SearchListCard key = {item.user._id} item={item} type=\"user\" username = {this.props.username} history = {this.props.history}/>\r\n                    );},this)\r\n                    }\r\n                </>\r\n                :\r\n                null\r\n                }\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// const mapStateToProps = (state, ownProps) => {\r\n//     const searchList = ownProps.searchList;\r\n//     return {\r\n\r\n//     };\r\n// }\r\nexport default SearchList;","/** SEARCH SCREEN \r\n * Handles retrieving and getting search results   \r\n **/\r\n\r\nimport React, { Component } from 'react'\r\nimport SearchList from './SearchList.js'\r\nclass SearchScreen extends Component {\r\n\r\n    state = {\r\n        searchQuery : this.props.match.params.query,\r\n        searchResults : {},\r\n        searchType : this.props.match.params.type,\r\n        username: this.props.username,\r\n        loading : false,\r\n    }\r\n\r\n    // Fetch Search Results from database \r\n    fetchData = (requestBody, type, url, last) => {\r\n        fetch(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }})\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                console.log(data)\r\n                let searchRes = this.state.searchResults \r\n                if (type === 'artists')\r\n                    searchRes[type] = data.artists.items \r\n                else if (type === 'songs')\r\n                    searchRes[type] = data.tracks.items \r\n                else if (type === 'users')\r\n                    searchRes[type] = data.data.searchUsers\r\n                else if (type === 'playlists')\r\n                    searchRes[type] = data.data.searchPlaylists\r\n                this.setState({searchResults : searchRes})\r\n\r\n                if (last)\r\n                    this.setState({loading: false})\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    // Handle getting search results for players \r\n    fetchPlaylists = (last, query) => {\r\n        const requestBody = {\r\n            query: `\r\n                query {\r\n                    searchPlaylists(name :\"${query}\"){\r\n                        _id \r\n                        name \r\n                        username\r\n                        likes\r\n                        total_duration \r\n                        playlist_img\r\n                        songs {\r\n                            song_id \r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        this.fetchData(requestBody, 'playlists', 'http://localhost:5000/graphql', last)\r\n    }\r\n\r\n    // Handle getting search results for users \r\n    fetchUsers = (last, query) => {\r\n        console.log(query)\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    searchUsers(username: \"${query}\"){\r\n                        user {\r\n                            _id\r\n                            username\r\n                            profile_img\r\n                            followers {\r\n                                user_id\r\n                                username\r\n                            }\r\n                            follow_requests {\r\n                                user_id \r\n                                username\r\n                                profile_img\r\n                            }\r\n                        }\r\n                        playlists {\r\n                            _id\r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n                `\r\n            }\r\n        this.fetchData(requestBody, 'users', 'http://localhost:5000/graphql', last)\r\n    }\r\n\r\n    // Handle getting songs and artists search results \r\n    fetchSpotify = (type, query, last) => {\r\n   \r\n        let requestBody;\r\n        if (type === 'artists')\r\n            requestBody = { artist: query}\r\n        else \r\n            requestBody = { track: query}\r\n            \r\n        this.fetchData(requestBody, type, 'http://localhost:5000/v1/search?', last)\r\n    }\r\n\r\n    // Updates the search page if the user searches for something else \r\n    componentDidUpdate = () => {   \r\n        // Update if there is a change in search \r\n        if (this.state.searchType !== this.props.match.params.type || this.state.searchQuery !== this.props.match.params.query){\r\n            this.setState({\r\n                searchType : this.props.match.params.type,\r\n                searchQuery : this.props.match.params.query,\r\n                loading: true,\r\n                searchResults: {}\r\n            }, () => {\r\n                const type = this.state.searchType;\r\n                const query = this.state.searchQuery;\r\n                // console.log(type, query, this.state.loading, this.props.match.params.type, this.props.match.params.query)\r\n                if (type === 'artists' || type === 'songs')\r\n                this.fetchSpotify(type,query, true)    \r\n                else if (type === 'users')\r\n                    this.fetchUsers(true, query)\r\n                else if (type === 'playlists')\r\n                    this.fetchPlaylists(true, query)\r\n                else if (type === 'all' ){\r\n                    this.fetchSpotify('artists',query, false) \r\n                    this.fetchSpotify('songs',query, false)\r\n                    this.fetchUsers(false, query)\r\n                    this.fetchPlaylists(true, query)   \r\n                }\r\n            })\r\n\r\n            \r\n        }\r\n    }\r\n\r\n    // Handles the search page when the user first enters \r\n    componentDidMount = () => {\r\n\r\n        if (!this.props.username)\r\n            this.props.history.push('/login')\r\n        if (!this.state.loading){\r\n           \r\n            this.setState({loading: true})\r\n            const type = this.state.searchType;\r\n            const query = this.state.searchQuery;\r\n            console.log(type)\r\n            if (type === 'artists' || type === 'songs')\r\n            this.fetchSpotify(type, query, true)    \r\n            else if (type === 'users')\r\n                this.fetchUsers(true, query)\r\n            else if (type === 'playlists')\r\n                this.fetchPlaylists(true, query)\r\n            else if (type === 'all' ){\r\n                this.fetchSpotify('artists', query, false) \r\n                this.fetchSpotify('songs', query, false)\r\n                this.fetchUsers(false, query)\r\n                this.fetchPlaylists(true, query)   \r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        \r\n            \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n\r\n        return (\r\n            <>\r\n\r\n            <div className=\"container navy search-results-container\" style={{paddingBotton: \"50px\"}}>\r\n                <div className=\"row\">\r\n                    <h2 className=\"col s1\">Results</h2>\r\n                </div>\r\n                <SearchList searchList={this.state.searchResults} username={this.state.username} history = {this.props.history}/>\r\n                <div className = \"row blank-space\"> </div>\r\n            </div> \r\n            {/* <PlaylistNavbar/> */}\r\n            </>\r\n        );\r\n    }\r\n}\r\n// const mapStateToProps = (state, ownProps) => {\r\n//     const searchList = ownProps.searchList;\r\n//     return {\r\n\r\n//     };\r\n//}\r\nexport default SearchScreen;","/** FOLLOWER\r\n * Handles displaing one follower\r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport {RiUserUnfollowLine} from 'react-icons/ri'\r\nclass Follower extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.updateFollowers= this.props.updateFollowers\r\n    }\r\n    state = { follower : this.props.follower, username : this.props.username , history: this.props.history}\r\n    render() { \r\n        if (this.state.loading)\r\n        return (<> </>)\r\n    function User ({username, history}){\r\n\r\n        function toUser(){\r\n            history.push('/' + username)\r\n        }\r\n        \r\n        return (\r\n            <button className = \"user-btn\" onClick = {toUser}>{username}</button>\r\n        )\r\n    }\r\n        return (  \r\n            <div className=\"follower-row\">\r\n                    <div className=\"col\">\r\n                        <img alt=\"\" src={this.state.follower.profile_img} class=\"user_icon\"></img>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        {/* <button onClick = {toUser}>{follower.username}</button> */}\r\n                        <User username = {this.state.follower.username} history = {this.state.history}/>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button className=\"unfollow-btn\" onClick = {this.removeFollower}> Unfollow  <RiUserUnfollowLine/></button>\r\n                    </div>\r\n                    \r\n            </div>\r\n        );\r\n    }\r\n\r\n    removeFollower = () =>{\r\n        console.log(this.state.followers)\r\n        let requestBody = {\r\n            query: `\r\n                mutation{\r\n                    removeFollower(username: \"${this.state.username}\", follower_id: \"${this.state.follower.user_id}\"){\r\n                   \r\n                            _id\r\n                            followers {\r\n                                user_id\r\n                                username\r\n                            }\r\n                        \r\n                    }\r\n                }\r\n            `\r\n        }\r\n        \r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                console.log(data)\r\n                this.updateFollowers(data.data.removeFollower.followers)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n}\r\n \r\nexport default Follower;","/** FOLLOWERS \r\n * Handles displaying the list of followers \r\n */\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport Follower from './Follower'\r\nclass Followers extends Component {\r\n    state = { \r\n        followers: null,\r\n        username: this.props.username,\r\n        loading: true\r\n     }\r\n     getFollowers = () => {\r\n        this.setState({loading: true})\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.state.username}\"){\r\n                        user {\r\n                            _id\r\n                            followers {\r\n                                user_id\r\n                                username\r\n                                profile_img\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n\r\n                this.setState({\r\n                    followers: data.data.getUserByUsername.user.followers,\r\n                    loading: false\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    componentDidMount = () => {\r\n       this.getFollowers()\r\n    }\r\n\r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n        let followers = this.state.followers.map(function(follower) {\r\n            return (\r\n                <Follower key = {follower.user_id} follower= {follower} username = {this.state.username} history = {this.props.history} updateFollowers = {this.updateFollowers}/>\r\n            )\r\n        }, this)\r\n\r\n        return (\r\n            <>\r\n            {followers}\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateFollowers = (followers) => {\r\n        this.setState({followers : followers})\r\n    }\r\n}\r\n \r\nexport default Followers;","/** FOLLOWING USER\r\n * Handles displaying one user that's being followed\r\n*/\r\nimport React, { Component } from 'react'\r\nimport {RiUserUnfollowLine} from 'react-icons/ri'\r\nclass FollowingUser extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.updateFollowing= this.props.updateFollowing\r\n    }\r\n    state = { following : this.props.following, username : this.props.username , history: this.props.history}\r\n    render() { \r\n        function User ({username, history}){\r\n\r\n            function toUser(){\r\n                history.push('/' + username)\r\n            }\r\n            \r\n            return (\r\n                <button className = \"user-btn\" onClick = {toUser}>{username}</button>\r\n            )\r\n        }\r\n        return (  \r\n            <div className=\"follower-row\">\r\n                    <div className=\"col\">\r\n                        <img alt=\"\" src={this.state.following.profile_img} class=\"user_icon\"></img>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                      <User username = {this.state.following.username} history ={this.props.history} />\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button className=\"unfollow-btn\" onClick = {this.unFollow}> Unfollow  <RiUserUnfollowLine/></button>\r\n                    </div>\r\n                    \r\n                </div>\r\n        );\r\n    }\r\n\r\n    unFollow = () =>{\r\n        console.log(this.state.following)\r\n        let requestBody = {\r\n            query: `\r\n                mutation{\r\n                    unFollow(username: \"${this.state.username}\", following_id: \"${this.state.following.user_id}\"){\r\n                   \r\n                            _id\r\n                            following {\r\n                                user_id\r\n                                username\r\n                            }\r\n                        \r\n                    }\r\n                }\r\n            `\r\n        }\r\n        \r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                console.log(data)\r\n                this.updateFollowing(data.data.unFollow.following)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n}\r\n \r\nexport default FollowingUser;","/** FOLLOWING\r\n * Handles displaying the list of following \r\n */\r\n\r\nimport React, { Component } from 'react'\r\n\r\n// import {RiUserUnfollowLine} from 'react-icons/ri'\r\nimport FollowingUser from './FollowingUser'\r\nclass Following extends Component {\r\n    state = { \r\n        following: null,\r\n        username: this.props.username,\r\n        loading: true\r\n     }\r\n     getFollowing = () => {\r\n\r\n        this.setState({loading: true})\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.state.username}\"){\r\n                        user {\r\n                            _id\r\n                            following {\r\n                                user_id\r\n                                username\r\n                                profile_img\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                this.setState({\r\n                    following: data.data.getUserByUsername.user.following,\r\n                    loading: false\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    componentDidMount = () => {\r\n       this.getFollowing()\r\n    }\r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n\r\n        let followings = this.state.following.map(function(following) {\r\n            return (\r\n                <FollowingUser key = {following.user_id} following= {following} username = {this.state.username} history = {this.props.history} updateFollowing = {this.updateFollowing}/>\r\n            )\r\n        }, this)\r\n\r\n        return (\r\n            <>\r\n            {followings}\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateFollowing = (following)=>{\r\n        this.setState({following: following})\r\n    }\r\n}\r\n \r\nexport default Following;","/** REQUEST\r\n * Handles one user request\r\n */\r\nimport React, { Component } from 'react'\r\nimport {RiUserAddLine} from 'react-icons/ri'\r\n\r\nclass Request extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.updateRequests = this.props.updateRequests\r\n    }\r\n    state = { request : this.props.request, username : this.props.username , history: this.props.history}\r\n    render() { \r\n\r\n        function User ({username, history}){\r\n\r\n            function toUser(){\r\n                console.log(history)\r\n                history.push('/' + username)\r\n            }\r\n            \r\n            return (\r\n                <button className = \"user-btn\" onClick = {toUser}> {username}</button>\r\n            )\r\n        }\r\n        console.log(this.props)\r\n        return (  \r\n            <div className=\"follower-row\">\r\n                <div className=\"col\">\r\n                    <img alt=\"\" src={this.state.request.profile_img} class=\"user_icon\"></img>\r\n                </div>\r\n                <div className=\"col\">\r\n                <User username = {this.state.request.username} history = {this.state.history}/>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <button className=\"unfollow-btn\" onClick = {this.acceptRequest}> Accept <RiUserAddLine/></button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    acceptRequest = () =>{\r\n        console.log(this.state.request)\r\n        let requestBody = {\r\n            query: `\r\n                mutation{\r\n                    addFollower(username: \"${this.state.username}\", request_id: \"${this.state.request.user_id}\", profile_img: \"${this.state.request.profile_img}\"){\r\n                            _id\r\n                            follow_requests {\r\n                                user_id\r\n                                username\r\n                                profile_img\r\n                            }\r\n                        \r\n                    }\r\n                }\r\n            `\r\n        }\r\n        \r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                console.log(data)\r\n                this.updateRequests(data.data.addFollower.follow_requests)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n}\r\n \r\nexport default Request;","/** REQUESTS\r\n * Handles displaing list of requests\r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport Request from './Request'\r\n\r\nclass Requests extends Component {\r\n    state = { \r\n        requests: null,\r\n        username: this.props.username,\r\n        loading: true\r\n     }\r\n\r\n     getRequests = () => {\r\n        this.setState({loading: true})\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.state.username}\"){\r\n                        user {\r\n                            _id\r\n                            follow_requests {\r\n                                user_id\r\n                                username\r\n                                profile_img\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                this.setState({\r\n                    requests: data.data.getUserByUsername.user.follow_requests,\r\n                    loading: false\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    componentDidMount = () => {\r\n       this.getRequests()\r\n    }\r\n\r\n    render() { \r\n        if(this.state.loading)\r\n            return(<> </>)\r\n        let requests= this.state.requests.map(function(request) {\r\n            return (\r\n                <Request key = {request.user_id} request= {request} username = {this.state.username} history = {this.props.history} updateRequests = {this.updateRequests}/>\r\n            )\r\n        }, this)\r\n\r\n        return (\r\n            <>\r\n            {requests}\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateRequests = (requests) => {\r\n        this.setState({requests: requests})\r\n    }\r\n}\r\n \r\nexport default Requests;","/** FOLLOWNG PAGE\r\n * Handles displaying Followers, Following, and Requests \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport Followers from './Followers'\r\nimport Following from './Following'\r\nimport Requests from './Requests'\r\nimport './Follows.css'\r\n\r\nclass FollowingPage extends Component {\r\n\r\n    state = {  \r\n        showFollowers: true,\r\n        showFollowing: false,\r\n        showRequests: false,\r\n        user: null,\r\n        loading: true\r\n    }\r\n\r\n    // Gets the user \r\n    componentDidMount =() => {\r\n        if (!this.props.username)\r\n            this.props.history.push('/login')\r\n            \r\n        this.setState({loading: true})\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    getUserByUsername(username: \"${this.props.username}\"){\r\n                        user {\r\n                            _id\r\n                            username\r\n                            profile_img\r\n                            joined\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        fetch(\"http://localhost:5000/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201)\r\n                    throw new Error ('Failed')\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n\r\n                this.setState({\r\n                    user : data.data.getUserByUsername.user,\r\n                    loading: false \r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    // Handle rendering followers, following, or requests \r\n    changeView = (event) => {\r\n        let invisible = [];\r\n        const visible = event.target.className\r\n        if (visible === \"followers-btn\"){\r\n            this.setState({\r\n                showFollowers: true,\r\n                showFollowing: false,\r\n                showRequests: false\r\n            })\r\n            invisible.push(\"following-btn\")\r\n            invisible.push(\"requests-btn\")\r\n        }\r\n        else if (visible === \"following-btn\"){\r\n            this.setState({\r\n                showFollowers: false,\r\n                showFollowing: true,\r\n                showRequests: false\r\n            })\r\n\r\n            invisible.push(\"requests-btn\")\r\n            invisible.push(\"followers-btn\")\r\n        }\r\n        else {\r\n            this.setState({\r\n                showFollowers: false,\r\n                showFollowing: false,\r\n                showRequests: true\r\n            })\r\n            invisible.push(\"following-btn\")\r\n            invisible.push(\"followers-btn\")\r\n\r\n        }\r\n  \r\n        document.getElementById(visible).style.borderBottom = \"3px solid #faed26\"\r\n        document.getElementById(invisible[0]).style.borderBottom = \"none\";\r\n        document.getElementById(invisible[1]).style.borderBottom = \"none\";\r\n        document.getElementById(visible).style.fontWeight = \"bold\"\r\n        document.getElementById(invisible[0]).style.fontWeight = \"normal\"\r\n        document.getElementById(invisible[1]).style.fontWeight = \"normal\"        \r\n    }\r\n\r\n    // Get the user's account creation date \r\n    getAccountCreationDate = () => {\r\n        const user = this.state.user\r\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n        const date = new Date(parseInt(user.joined))\r\n        return  months[date.getMonth()] + \" \" + date.getDate() + \", \" + date.getFullYear()\r\n\r\n    }\r\n    \r\n    render() { \r\n        if (this.state.loading)\r\n            return (<> </>)\r\n        \r\n        return (  \r\n            <>\r\n                <div className=\"container-fluid followers-container\">\r\n                    {/* Home Button, Username, Account Icon */}\r\n\r\n                    <div className=\"container-fluid follow-data-container\">\r\n                        {/* Information Bar about the user */}\r\n\r\n                        <div className=\"information-row\">\r\n                            \r\n                            <div className=\"col text-center\">\r\n                                <div className=\"col\">\r\n                                    <img alt=\"\" src={this.state.user.profile_img} class=\"user_icon\"></img>\r\n                                </div>\r\n                                <h2>{this.state.user.username}                            \r\n                            \r\n\r\n                                </h2>\r\n                                    <h5> User Since: {this.getAccountCreationDate()}</h5>\r\n                            </div>\r\n                        </div>\r\n                     \r\n                        <div className=\"navigation-row\">\r\n                            <div className=\"col\">\r\n                            <button id = \"followers-btn\" className = \"followers-btn\" onClick = {this.changeView} style = {{borderBottom : \"3px solid #faed26\", fontWeight : \"bold\"}}>  Followers </button>\r\n                            </div>\r\n\r\n                            <div className=\"col\">\r\n                                <button id = \"following-btn\" className = \"following-btn\" onClick = {this.changeView}> Following </button>\r\n                            </div>\r\n                            \r\n                            <div className=\"col\">\r\n                            <button id = \"requests-btn\" className = \"requests-btn\" onClick = {this.changeView}> Requests </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {this.state.showFollowers ? <Followers username = {this.state.user.username} history = {this.props.history}/>: null}\r\n                        {this.state.showFollowing ? <Following username = {this.state.user.username} history = {this.props.history}/> : null}\r\n                        {this.state.showRequests ?  <Requests username = {this.state.user.username} history = {this.props.history}/> : null}\r\n                    </div>\r\n                    \r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default FollowingPage;","/** UPDATE \r\n * Component within Account Setting \r\n * Used to handle updating email and username \r\n**/\r\n\r\nimport React, { Component } from 'react'\r\nimport {AiOutlineCheckCircle, AiOutlineCloseCircle} from 'react-icons/ai'\r\nclass Update extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.onChange = this.props.onChange\r\n    }\r\n    state = { \r\n        visible: false, \r\n        original: this.props.original,\r\n        new : this.props.original,\r\n        text: this.props.text,\r\n        error: \"\"\r\n     }\r\n\r\n    // Handle setting update box visible \r\n    setVisible = () => {\r\n        this.setState({visible : true})\r\n    }\r\n\r\n    // Handle setting update box invisible \r\n    setInvisible = () => {\r\n        this.setState({visible : false})\r\n    };\r\n\r\n    handleChange = (event) =>{\r\n        this.setState({new : event.target.value})\r\n    }\r\n    handleUpdate = () => {\r\n        let requestBody = \"\"\r\n        if (this.state.text === \"Update Email\"){\r\n            requestBody = {\r\n                query: `\r\n                    mutation{\r\n                        updateEmail(email: \"${this.state.original}\", new_email:\"${this.state.new}\"){\r\n                        _id\r\n                        email\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n        }\r\n        else {\r\n            requestBody = {\r\n                query: `\r\n                    mutation{\r\n                        changeUsername(username: \"${this.state.original}\", new_username:\"${this.state.new}\"){\r\n                        _id\r\n                        email\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n        }\r\n\r\n        fetch ('http://localhost:5000/graphql', {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }})\r\n                .then(res => {\r\n                   \r\n                    if (res.status !== 200 && res.status !== 201)\r\n                        throw new Error (res.body)\r\n                    else \r\n                        return res.json()\r\n                })\r\n                .then(data => {\r\n                    console.log(data)\r\n                    if (data.errors)\r\n                        throw new Error (data.errors[0].message)\r\n                   this.setInvisible()\r\n                   this.onChange(this.state.text, this.state.new)\r\n                   this.setState({original: this.state.new})\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    this.setState({error: error.message})\r\n                })\r\n        \r\n    }\r\n\r\n    render() { \r\n        return (  \r\n            <>\r\n            <button className = \"user-settings-content-btn\" onClick = {this.setVisible}>{this.state.text}</button>   \r\n\r\n            {\r\n                this.state.visible ? \r\n                    <div className=\"update-box\">\r\n                        {this.state.text}\r\n                        <div className=\"error-box\"> {this.state.error} </div>\r\n                        <input type=\"text\" placeholder = {this.state.original} onChange = {this.handleChange}required/>\r\n                        <button className = \"confirm-change-btn\" onClick={this.handleUpdate}> <AiOutlineCheckCircle size = {24}/></button>\r\n                         <button className = \"cancel-change-btn\"  onClick={this.setInvisible}> <AiOutlineCloseCircle size = {24}/></button>\r\n                    </div>\r\n                :\r\n                null\r\n            }    \r\n        </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Update;","/** UPDATE PASSWORD\r\n * Component within Account Setting \r\n * Used to handle changing password\r\n **/\r\n\r\nimport React, { Component } from 'react'\r\nimport {AiOutlineCheckCircle, AiOutlineCloseCircle} from 'react-icons/ai'\r\n\r\n\r\nclass UpdatePassword extends Component {\r\n    state = { \r\n        visible: false,\r\n        password: \"\",\r\n        confirm: \"\",\r\n        error : \"\"    \r\n    }\r\n\r\n    setVisible = () => {\r\n        this.setState({visible : true, password: \"\", confirm: \"\"})\r\n    }\r\n\r\n    setInvisible = () => {\r\n        this.setState({visible : false})\r\n    };\r\n\r\n    handlePassChange = (event) => {\r\n        this.setState({password: event.target.value})\r\n    }\r\n\r\n    handleConfChange = (event) => {\r\n        this.setState({confirm: event.target.value})\r\n    }\r\n\r\n    handleUpdate = () => {\r\n      console.log(this.props.username)\r\n        if (this.state.password !== this.state.confirm ){\r\n            this.setState({error: \"Passwords do not match\"})\r\n        }\r\n        else if (this.state.password === \"\")\r\n        this.setState({error: \"Enter a password\"})\r\n        else {\r\n            let requestBody = {\r\n                    query: `\r\n                        mutation{\r\n                            changePassword(username: \"${this.props.username}\", new_password:\"${this.state.password}\"){\r\n                            _id\r\n    \r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n    \r\n            fetch ('http://localhost:5000/graphql', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(requestBody),\r\n                    headers: {\r\n                        'content-type': 'application/json'\r\n                    }})\r\n                    .then(res => {\r\n                    \r\n                        if (res.status !== 200 && res.status !== 201)\r\n                            throw new Error (res.body)\r\n                        else \r\n                            return res.json()\r\n                    })\r\n                    .then(data => {\r\n                        console.log(data)\r\n                        this.setState({visible: false})\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error)\r\n                        this.setState({error: error.message})\r\n                    })\r\n            }\r\n        \r\n    }\r\n    render() { \r\n        return (  \r\n            <>\r\n            <button className = \"user-settings-content-btn\" onClick = {this.setVisible}> Update Password </button>\r\n            {this.state.visible ? \r\n            <div className=\"update-pass-box\">\r\n                <div className=\"error-box\"> {this.state.error} </div>\r\n                New Password\r\n                <input onChange = {this.handlePassChange} type=\"password\" required/>\r\n                Confirm Password\r\n                <input onChange = {this.handleConfChange} type=\"password\" required/>\r\n                <button className = \"confirm-pass-btn\" onClick={this.handleUpdate}> <AiOutlineCheckCircle size = {24}/></button>\r\n                <button className = \"cancel-pass-btn\"  onClick={this.setInvisible}> <AiOutlineCloseCircle size = {24}/></button>\r\n            </div>\r\n            : null}\r\n        </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default UpdatePassword;","/** ACCOUNT SETTING \r\n * Component within Settings Page\r\n */\r\n\r\n\r\nimport React, { Component } from 'react'\r\nimport Update from '../AccountSetting/Update'\r\nimport UpdatePassword from './UpdatePassword'\r\n\r\nclass AccountSetting extends Component {\r\n    state = { user: this.props.user }\r\n    \r\n    onChange = (type, value) => {\r\n        let user = this.state.user \r\n        if (type === \"Update Email\")\r\n            user.email = value \r\n        else if (type === \"Update Username\") {\r\n            user.username = value \r\n            localStorage.setItem(\"username\", value);\r\n            \r\n            this.props.onUsernameChange(value)\r\n           this.props.history.push(\"/\" + value + \"/settings\")\r\n        }\r\n        this.setState({user : user})\r\n    }\r\n\r\n    Post = (e) => {\r\n        e.preventDefault();\r\n        const file = document.getElementById(\"photo-input\").files;\r\n        const formData = new FormData();\r\n\r\n        formData.append(\"img\", file[0]);\r\n\r\n        fetch(\"http://localhost:5000/\", {\r\n            method: \"POST\",\r\n            body: formData\r\n            }).then(r => {\r\n            console.log(r);\r\n        });\r\n        let user = this.state.user\r\n        user.profile_img = `http://localhost:5000/${file[0].name}`\r\n        this.setState({user : user})\r\n        console.log(file[0]);\r\n    }\r\n\r\n    updateProfileImg = () => {\r\n        let user = this.state.user\r\n        let requestBody = {\r\n            query: `\r\n                mutation {\r\n                    changeProfileImg(username: \"${user.username}\", img: \"${user.profile_img}\"){\r\n                        _id\r\n                    }\r\n                }\r\n            `\r\n        }\r\n\r\n        this.fetch(requestBody)\r\n    }\r\n\r\n    fetch = (requestBody) => {\r\n        fetch('http://localhost:5000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n            })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) \r\n                    throw new Error('User not found');\r\n                return res.json()\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n\r\n    }\r\n\r\n    render() { \r\n        console.log(this.props.user)\r\n        return (  \r\n            <div className=\"user-settings-container\">\r\n            <div className=\"settings-header\">Account</div>\r\n            <div className=\"user-settings-content\">\r\n                <h5>Profile Picture</h5>\r\n                <h6>This is the picture associated with your profile.</h6>\r\n                <div className='user-setting-info'>\r\n                    <div className='photo_input'>\r\n                        Upload Profile Picture\r\n                        <div className=\"\">\r\n                            <div className=\"custom-file\">\r\n                                <input\r\n                                    type=\"file\"\r\n                                    id=\"photo-input\"\r\n                                    accept=\"image/*\"\r\n                                />\r\n                            </div>    \r\n                        </div>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.Post}>\r\n                            Upload\r\n                        </button>\r\n                        <img\r\n                            id=\"img\"\r\n                            style={{\r\n                                display: \"block\",\r\n                                height: \"100px\",\r\n                                width: \"100px\",\r\n                                \"margin-top\": \"5px\",\r\n                            }}\r\n                            src={this.state.user.profile_img}\r\n                        >\r\n                        </img>\r\n                    </div>\r\n                </div>\r\n                <button className = \"user-settings-content-btn\" onClick={this.updateProfileImg}>Update Image</button>\r\n            </div>\r\n            <div className=\"user-settings-content\">\r\n                <h5>Email</h5>\r\n                <h6> This is the email associated with your account</h6>\r\n                <div className=\"user-setting-info\">\r\n                    {this.state.user.email}\r\n                </div>\r\n                \r\n                <Update text = {\"Update Email\"} original = {this.state.user.email} onChange = {this.onChange} />\r\n            </div>\r\n\r\n            <div className=\"user-settings-content\">\r\n                <h5>Username</h5>\r\n                <h6>This is how you will appear to everyone else</h6>\r\n                <div className=\"user-setting-info\">\r\n                    {this.state.user.username}\r\n                </div>\r\n                <Update text = {\"Update Username\"} original = {this.state.user.username} onChange = {this.onChange}/>\r\n            </div>\r\n\r\n            <div className=\"user-settings-content\"> \r\n                <h5>Change Password</h5>\r\n                <UpdatePassword username = {this.state.user.username}/>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default AccountSetting;","/** ADVANCED SETTING \r\n * Component within Settings Page\r\n */\r\n\r\n\r\nimport React, { Component } from 'react'\r\n\r\nclass AdvancedSetting extends Component {\r\n    state = { user: this.props.user }\r\n\r\n    render() { \r\n        return (  \r\n            <div className=\"user-settings-container\">\r\n            <div className=\"settings-header\">Advanced Settings</div>\r\n\r\n            <div className=\"user-settings-content\">\r\n                <h5>User ID</h5>\r\n                <h6> This is the ID associated with your account</h6>\r\n                <p> {this.state.user._id}</p>\r\n            </div>\r\n\r\n            <div className=\"user-settings-content\">\r\n                <h5>User URL</h5>\r\n                <h6> This is the URL associated with your account </h6>\r\n                <p> {this.state.user.url}</p>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default AdvancedSetting;\r\n\r\n","import React, { Component } from 'react'\r\nimport Switch from 'react-input-switch';\r\nclass PrivacyToggles extends Component {\r\n    state = {  \r\n        // saved_privacy : this.props.default_public_saved_playlist ? 0 : 1\r\n        playlist_privacy : this.props.default_public_playlist ? 0 : 1,\r\n        verify_request : this.props.verify_requests ? 0 : 1\r\n    }\r\n\r\n    fetch(requestBody){\r\n        fetch ('http://localhost:5000/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }})\r\n        .then(res => {\r\n            // console.log(res)\r\n            if (res.status !== 200 && res.status !== 201)\r\n                throw new Error ('Failed')\r\n            return res.json()\r\n        })\r\n        .then(data => {console.log(data)})\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    updatePlaylist = () => {\r\n        let requestBody = \"\"\r\n        if (this.state.playlist_privacy === 0){\r\n            this.setState({playlist_privacy: 1})\r\n            requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changePlaylistPrivacyDef(_id: \"${this.props._id}\", def:${false}){\r\n                            _id\r\n                            default_public_playlist\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n            this.props.onPrivacyChange(\"playlist\", false)\r\n            // this.props.default_public_playlist = false \r\n        }\r\n        else {\r\n            this.setState({playlist_privacy: 0})\r\n            requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changePlaylistPrivacyDef(_id: \"${this.props._id}\", def:${true}){\r\n                            _id\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n            this.props.onPrivacyChange(\"playlist\", true)\r\n            // this.props.default_public_playlist = true\r\n    }\r\n        this.fetch(requestBody)\r\n    }\r\n\r\n\r\n    updateVerify = () => {\r\n        let requestBody = \"\"\r\n        if (this.state.verify_request === 1){\r\n            this.setState({verify_request: 0})\r\n            requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changeVerifyFollowDef(_id: \"${this.props._id}\", def:${true}){\r\n                            _id\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n            this.props.onPrivacyChange(\"verify\", true)\r\n            // this.props.verify_requests = true\r\n        }\r\n        else {\r\n            this.setState({verify_request: 1})\r\n            requestBody = {\r\n                query: `\r\n                    mutation {\r\n                        changeVerifyFollowDef(_id: \"${this.props._id}\", def:${false}){\r\n                            _id\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n            this.props.onPrivacyChange(\"verify\", false)\r\n            // this.props.verify_request = false\r\n    }\r\n        this.fetch(requestBody)\r\n    }\r\n    render() { \r\n        return (  \r\n            <>\r\n            <div className=\"user-settings-content\">\r\n                <h5>Default Mixtape Settings</h5>\r\n\r\n                {/* <h6> <Switch value={saved_privacy} onChange={updateSaved}/> Keep saved playlists private</h6> */}\r\n                <h6> <Switch value={this.state.playlist_privacy} onChange={this.updatePlaylist}/> Keep my mixtapes private</h6>\r\n            </div>\r\n\r\n            <div className=\"user-settings-content\">\r\n                <h5>Verify Follow Requests</h5>\r\n                <h6> <Switch value={this.state.verify_request} onChange={this.updateVerify}/> Automatically allow others to follow me</h6>\r\n            </div>\r\n        </>\r\n        );\r\n    }\r\n\r\n    // SAVED PLAYLIST PRIVACY FUNCTIONALITY \r\n    // updateSaved = () => {\r\n    //     let requestBody = \"\"\r\n    //     if (this.state.saved_privacy === 0){\r\n    //         this.setState({saved_value : 1})\r\n    //         requestBody = {\r\n    //             query: `\r\n    //                 mutation {\r\n    //                     changeSavedPlaylistPrivacyDef(_id: \"${this.props._id}\", def:${false}){\r\n    //                         _id\r\n    //                     }\r\n    //                 }\r\n    //             `\r\n    //         }\r\n    //         this.props.default_public_saved_playlist = false \r\n    //     }\r\n    //     else {\r\n    //         this.setState({saved_value : 0})\r\n    //         requestBody = {\r\n    //             query: `\r\n    //                 mutation {\r\n    //                     changeSavedPlaylistPrivacyDef(_id: \"${this.props._id}\", def:${true}){\r\n    //                         _id\r\n    //                     }\r\n    //                 }\r\n    //             `\r\n    //         }\r\n    //         this.props.default_public_saved_playlist = true\r\n    // }\r\n    //     this.fetch(requestBody)\r\n    // }\r\n}\r\n \r\nexport default PrivacyToggles;\r\n\r\n","/** PRIVACY SETTING \r\n * Component within Settings Page\r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport PrivacyToggles from './PrivacyToggles'\r\n\r\nclass PrivacySetting extends Component {\r\n    render() { \r\n\r\n        return (  \r\n            <div className=\"user-settings-container\">\r\n            <div className=\"settings-header\">Privacy Settings</div>\r\n\r\n            <PrivacyToggles \r\n                default_public_playlist = {this.props.user.default_public_playlist} \r\n                verify_requests = {this.props.user.verify_requests}\r\n                _id = {this.props.user._id}\r\n                onPrivacyChange = {this.props.onPrivacyChange}/>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default PrivacySetting;","/** SETTINGS PAGE  **/\r\n\r\nimport React, { Component } from 'react'\r\nimport AccountSetting from './AccountSetting/AccountSetting'\r\nimport AdvancedSetting from './AdvancedSetting/AdvancedSetting'\r\nimport PrivacySetting from './PrivacySetting/PrivacySetting'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport PlayCircleFilledRoundedIcon from '@material-ui/icons/PlayCircleFilledRounded'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport './Setting.css'\r\n\r\nconst useStyles= theme => ({\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: theme.spacing(0, 1),\r\n        marginLeft: \"0px\",\r\n        marginTop: \"10px\",\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n      },\r\n      col : {\r\n          border: \"1px solid\",\r\n          background: \"#f0f0f0\",\r\n          color: \"#fff\",\r\n          paddingTop: \"50px\"\r\n      },\r\n     sidebarHeader : {\r\n        paddingTop: \"10px\",\r\n        marginBottom : \"20px\"\r\n     },\r\n      content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(0),\r\n      },\r\n    wrapper: {\r\n        // padding: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        borderBottom: \"2px solid lightgray\"\r\n    },\r\n    settingsOptionsButton: {    \r\n        width: \"100%\",\r\n        minHeight: \"50px\",\r\n        border: \"none\",\r\n        outline: \"none\",\r\n        textAlign: \"left\",\r\n        paddingLeft: \"20px\",\r\n        background: \"transparent\"\r\n    },\r\n    settingsConent: {\r\n        padding : 0\r\n    }\r\n})\r\nclass Setting extends Component {\r\n    state = { \r\n        showAccount: true,\r\n        showPrivacy: false,\r\n        showAdvanced: false,\r\n        user: null,\r\n        loading: true\r\n    }\r\n\r\n    // Get the User \r\n    componentDidMount = () => {\r\n        if (!this.props.username)\r\n            this.props.history.push('/login')\r\n        this.setState({loading: true})\r\n\r\n        if (this.props.username === this.props.match.params.username){\r\n            let requestBody = {\r\n                query: `\r\n                    query{\r\n                        getUserByUsername(username : \"${this.props.username}\") {\r\n                            user {\r\n                                _id\r\n                            username \r\n                            profile_img\r\n                            default_public_saved_playlist\r\n                            default_public_playlist\r\n                            verify_requests\r\n                            email\r\n                            url\r\n                            }\r\n                        }\r\n                    }\r\n                `\r\n            }\r\n    \r\n            fetch ('http://localhost:5000/graphql', {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }})\r\n                .then(res => {\r\n                    // console.log(res)\r\n                    if (res.status !== 200 && res.status !== 201)\r\n                        throw new Error ('Failed')\r\n                    return res.json()\r\n                })\r\n                .then(data => {\r\n                   this.setState({\r\n                       user: data.data.getUserByUsername.user,\r\n                       loading:false\r\n                   })\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n\r\n    // Render the Settings Page \r\n    render() { \r\n        \r\n            \r\n        // If the data is still loading, do not attempt to render any information \r\n        if (this.state.loading)\r\n            return(<> </>)\r\n        const {classes} = this.props\r\n        return (  \r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n                <Container classname = {classes.wrapper}>\r\n                    <Grid container>\r\n                        <Grid item xs={2} className = {classes.col}>\r\n                            \r\n                        <div className=\"sidebar-header text-left\">\r\n                            <h3 style={{color : \"black\"}}>Settings</h3>\r\n                        </div>\r\n                     <ul >\r\n                         <li>\r\n                            <button className = {classes.settingsOptionsButton} id = \"settings-account-btn\" style = {{background: \"lightgray\"}} onClick={this.changeView}>Account</button>          \r\n                     </li>\r\n                         <li>\r\n                             <button className = {classes.settingsOptionsButton} id = \"settings-privacy-btn\" onClick={this.changeView}>Privacy</button>\r\n                            \r\n                         </li>\r\n                         <li>\r\n                             <button className = {classes.settingsOptionsButton} id = \"settings-advanced-btn\" onClick={this.changeView}>Advanced Settings</button>\r\n                \r\n                         </li>\r\n                     </ul>\r\n                     \r\n                        </Grid>\r\n                        <Grid item xs className ={classes.settingsContent}>\r\n                            {this.state.showAccount ? <AccountSetting user = {this.state.user} onUsernameChange ={this.props.onUsernameChange} history = {this.props.history}/>: null}\r\n                            {this.state.showPrivacy ? <PrivacySetting user ={this.state.user} onPrivacyChange = {this.onPrivacyChange}/> : null}\r\n                            {this.state.showAdvanced ? <AdvancedSetting user={this.state.user}/> : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container> \r\n            </main>\r\n        );\r\n    }\r\n\r\n    onPrivacyChange = (type, value) => {\r\n        let user = this.state.user \r\n        if (type === \"playlist\")\r\n            user.default_public_playlist = value \r\n        else \r\n            user.verify_requests = value \r\n        this.setState({user:user})\r\n    }\r\n    // Handle button clicks to \"Account Setting\", \"Privacy Setting\", and \"Advanced Setting\"\r\n    changeView = (event) => {\r\n        let invisible = [];\r\n        const visible = event.target.id\r\n        \r\n        if (visible === \"settings-account-btn\"){\r\n            this.setState({\r\n                showAccount: true,\r\n                showPrivacy: false,\r\n                showAdvanced: false\r\n            })\r\n            invisible.push(\"settings-privacy-btn\")\r\n            invisible.push(\"settings-advanced-btn\")\r\n        }\r\n        else if (visible === \"settings-privacy-btn\"){\r\n            this.setState({\r\n                showAccount: false,\r\n                showPrivacy: true,\r\n                showAdvanced: false\r\n            })\r\n\r\n            invisible.push(\"settings-account-btn\")\r\n            invisible.push(\"settings-advanced-btn\")\r\n        }\r\n        else {\r\n            this.setState({\r\n                showAccount: false,\r\n                showPrivacy: false,\r\n                showAdvanced: true\r\n            })\r\n            invisible.push(\"settings-privacy-btn\")\r\n            invisible.push(\"settings-account-btn\")\r\n\r\n        }\r\n        document.getElementById(visible).style.background = \"lightgray\"\r\n        document.getElementById(invisible[0]).style.background = \"transparent\"\r\n        document.getElementById(invisible[1]).style.background = \"transparent\"\r\n     \r\n    }\r\n}\r\n \r\nexport default withStyles(useStyles)(Setting);","// /** HEADER NAVBAR\r\n//  * Contains home button, search bar, and settings icon \r\n//  */\r\n\r\nimport { fade, withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport { Select, FormControl } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport clsx from 'clsx';\r\nimport React, { Component } from 'react'\r\nconst drawerWidth = 240;\r\nconst useStyles = theme => ({\r\n  paper: {\r\n    border: '1px solid #d3d4d5',\r\n  },\r\n  \r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n\r\n  search: {\r\n    position: 'relative',\r\n\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    paddingTop: \"10px\",\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: '500px',\r\n      height: '50px'\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2,2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    \r\n    width: '410px',\r\n    height: '30px'\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    paddingRight:'50px',\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    position: 'center',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '100%',\r\n    },\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  selectMenu: {\r\n      height: \"40px\"\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  icon : {\r\n    '&:focus': {\r\n      outline: 'none',\r\n    }\r\n  }\r\n});\r\n\r\nclass HeaderNavbar extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.menuId = 'primary-search-account-menu'\r\n    this.mobileMenuId = 'primary-search-account-menu-mobile'\r\n    this.searchEl = React.createRef();\r\n\r\n  }\r\n  state = {  \r\n    value : \"All\",\r\n    anchorEl: null,\r\n    mobileMoreAnchorEl: null,\r\n  }\r\n\r\n  handleChange = (e) => {\r\n      console.log(e.target)\r\n     this.setState({value : e.target.value})\r\n  }\r\n\r\n  handleProfileMenuOpen = (event) => {\r\n    this.setState({anchorEl : event.target})\r\n  };\r\n\r\n  handleMobileMenuClose = () => {\r\n    this.setState({mobileMoreAnchorEl : null})\r\n\r\n  };\r\n\r\n  handleMenuClose = () => {\r\n    this.setState({anchorEl: null})\r\n    this.handleMobileMenuClose();\r\n  };\r\n\r\n  handleMobileMenuOpen = (event) => {\r\n      console.log(event.target)\r\n    this.setState({mobileMoreAnchorEl : event.target})\r\n  };\r\n\r\n  toPlaylists = () => {\r\n    console.log(\"To playlists\")\r\n    this.props.history.push(\"/\" + this.props.username)\r\n    this.handleMenuClose()\r\n  }\r\n\r\n  toFollowers = () => {\r\n    console.log(\"To followers \")\r\n    this.props.history.push(\"/\" + this.props.username + \"/followers\")\r\n    this.handleMenuClose()\r\n  }\r\n\r\n  toSettings = () => {\r\n    console.log(\"To Settings\")\r\n    this.props.history.push(\"/\" + this.props.username + \"/settings\")\r\n    this.handleMenuClose()\r\n  }\r\n\r\n  toLogOut = () => {\r\n    console.log(\"Log Out\")\r\n    localStorage.removeItem(\"username\")\r\n    this.props.onUsernameChange(\"\")\r\n    this.props.history.push(\"/\")\r\n    this.handleMenuClose()\r\n  }\r\n  renderMenu = () => {\r\n    return (\r\n      <Menu\r\n        anchorEl={this.state.anchorEl}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        id={this.menuId}\r\n        keepMounted\r\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        open={Boolean(this.state.anchorEl)}\r\n        onClose={this.handleMenuClose}\r\n      >\r\n        <MenuItem onClick={this.toPlaylists}>Playlist</MenuItem>\r\n        <MenuItem onClick={this.toFollowers}>Followers</MenuItem>\r\n        <MenuItem onClick={this.toSettings}>Settings</MenuItem>\r\n        <MenuItem onClick={this.toLogOut}>Logout</MenuItem>\r\n      </Menu>\r\n    );\r\n  }\r\n  renderMobileMenu = () =>{\r\n    const {classes} = this.props\r\n    return (\r\n      <Menu\r\n        anchorEl={this.state.mobileMoreAnchorEl}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        id={this.mobileMenuId}\r\n        keepMounted\r\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        open={Boolean(this.state.mobileMoreAnchorEl)}\r\n        onClose={this.handleMobileMenuClose}\r\n      >\r\n        <MenuItem onClick={this.handleProfileMenuOpen}>\r\n          <IconButton\r\n            aria-label=\"account of current user\"\r\n            aria-controls=\"primary-search-account-menu\"\r\n            aria-haspopup=\"true\"\r\n            color=\"inherit\"\r\n           \r\n          >\r\n            <AccountCircle />\r\n          </IconButton>\r\n          <p>Profile</p>\r\n        </MenuItem>\r\n      </Menu>\r\n    );\r\n  }\r\n\r\n  toHome = () => {\r\n    this.props.history.push('/home')\r\n  }\r\n\r\n  handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\"){\r\n        const type = this.state.value \r\n        const query = this.searchEl.current.children[0].value\r\n        console.log(type)\r\n        if (query !== \"\"){\r\n            const url = '/searchq=' +  encodeURIComponent(query)+ \"/type=\" + type.toLowerCase()\r\n            const {history} = this.props;\r\n                            \r\n            history.push(url)\r\n        }\r\n    }\r\n  }\r\n\r\n  render() { \r\n    const {classes} = this.props\r\n\r\n    return (  \r\n        <div className={classes.grow}>\r\n            <AppBar \r\n              // position=\"fixed\"\r\n              // className={clsx(classes.appBar, {\r\n              //   [classes.appBarShift]: this.props.open,\r\n              // })}\r\n            \r\n            position=\"static\" \r\n            style={{ background: '#5472d3', zIndex: 2 }}>\r\n                <Toolbar>\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  aria-label=\"open drawer\"\r\n                  onClick={this.props.handleDrawerOpen}\r\n                  edge=\"start\"\r\n                  className={clsx(classes.menuButton, {\r\n                    [classes.hide]: this.props.open,\r\n                  }, classes.icon)}\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n                    {/* <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        className={classes.menuButton}\r\n                        aria-label=\"open drawer\"\r\n                    >\r\n                        <HomeIcon />\r\n                    </IconButton>  */}\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick = {this.toHome}\r\n                        className = {classes.icon}\r\n                    >\r\n                        <MusicNoteIcon />\r\n                        <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                            EasyTunes\r\n                        </Typography>\r\n                    </IconButton> \r\n                    <div className= {classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                        <SearchIcon />\r\n                    </div>\r\n                    \r\n                    <InputBase\r\n                        placeholder=\"Search\"\r\n                        classes={{\r\n                            root: classes.inputRoot,\r\n                            input: classes.inputInput,\r\n                        }}\r\n                        inputProps={{ 'aria-label': 'search' }}\r\n                        ref = {this.searchEl}\r\n                        onKeyPress={this.handleKeyPress}\r\n                        />\r\n                        <FormControl classes = {{div: this.selectMenu}}>\r\n                            <Select onChange= {this.handleChange}>\r\n                                <MenuItem value= {\"All\"}>All</MenuItem>\r\n                                <MenuItem value= {\"Artists\"}>Artists</MenuItem>\r\n                                <MenuItem value= {\"Songs\"}>Songs</MenuItem>\r\n                                <MenuItem value= {\"Playlists\"}>Mixtapes</MenuItem>\r\n                                <MenuItem value= {\"Users\"}>Users</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className={classes.grow} />\r\n                    <div className={classes.sectionDesktop}>\r\n                        <IconButton\r\n                            edge=\"end\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls={this.menuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={this.handleProfileMenuOpen}\r\n                            color=\"inherit\"\r\n                            className = {classes.icon}\r\n                            >\r\n                            <AccountCircle />\r\n                            </IconButton>\r\n                    </div>  \r\n                    <div className={classes.sectionMobile}>\r\n                        <IconButton\r\n                        aria-label=\"show more\"\r\n                        aria-controls={this.mobileMenuId}\r\n                        aria-haspopup=\"true\"\r\n                        onClick={this.handleMobileMenuOpen}\r\n                        color=\"inherit\"\r\n                        className = {classes.icon}\r\n                        >\r\n                        <MoreIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    {this.renderMobileMenu()}\r\n                    {this.renderMenu()}   \r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default withStyles(useStyles)(HeaderNavbar);","/** PLAYLIST NAVBAR\r\n * Bar at the bottom of the screen \r\n * Allows users to control the songs in the playlist they're listening to  \r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport './PlaylistNavbar.css'\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport SpotifyPlayer from 'react-spotify-web-playback';\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport './AudioPlayer.css'\r\n\r\nconst useStyle=theme => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n})\r\nclass PlaylistNavbar extends Component {    \r\n    handleCallback = ({type, ...state}) => {\r\n\r\n      console.log(type)\r\n      console.log(state)\r\n \r\n      if (type === \"track_update\"){          \r\n        this.props.onSongChange(state.track.id)\r\n      }\r\n      if (type === \"player_update\"){\r\n        console.log(\"Player Update\")\r\n      }\r\n     this.props.onPlayChange(state.isPlaying)\r\n    }\r\n\r\n    shuffle = () => {\r\n      this.props.onShuffleChange()\r\n    }\r\n\r\n    render() {     \r\n      console.log(this.props)\r\n      const {classes} = this.props\r\n        return ( \r\n            <>\r\n              <div className={classes.grow}>\r\n              <AppBar \r\n              // position=\"fixed\"\r\n              // className={clsx(classes.appBar, {\r\n              //   [classes.appBarShift]: this.props.open,\r\n              // })}\r\n            \r\n            position=\"static\" \r\n            >\r\n  \r\n                      {this.props.access_token &&\r\n                              \r\n                            <SpotifyPlayer\r\n                              token= {this.props.access_token}\r\n                              callback = {this.handleCallback}\r\n                              uris={this.props.playlist}\r\n                              magnifySliderOnHover = {true}\r\n                              showSaveIcon = {false}\r\n                              play = {this.props.play}\r\n                              offset = {this.props.offset}\r\n                              styles={{\r\n                                activeColor: '#fff',\r\n                                bgColor: '#333',\r\n                                color: '#fff',\r\n                                loaderColor: '#fff',\r\n                                sliderColor: '#1cb954',\r\n                                trackArtistColor: '#d9d9d9',\r\n                                trackNameColor: '#fff',\r\n                              }}\r\n                            />\r\n                            \r\n                          \r\n                      }\r\n                    {/* <button className=\"shuffle\" onClick = {this.shuffle}> Shuffle </button>  */}\r\n              </AppBar>\r\n              </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default withStyles(useStyle)(PlaylistNavbar);","import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport SubscriptionsIcon from '@material-ui/icons/Subscriptions';\r\nimport GroupIcon from \"@material-ui/icons/Group\"\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\r\nimport HeaderNavbar from '../HeaderNavbar/HeaderNavbar'\r\nimport { palette } from '@material-ui/system';\r\nimport PlaylistNavbar from '../PlaylistNavbar/PlaylistNavbar'\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    \r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    \r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n    \r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    background: '#5472d3',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,   \r\n    }),\r\n  },\r\n  drawerClose: {\r\n    background: '#5472d3',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  bottomAppBar: {\r\n    top: 'auto',\r\n    bottom: 0,\r\n  },\r\n});\r\n\r\nclass Menu extends Component {\r\n  state = {  \r\n    open: false\r\n  }\r\n\r\n  toMyPlaylists = () => {\r\n    this.props.history.push(\"/\" + this.props.username)\r\n  }\r\n\r\n  toSavedPlaylists = () => {\r\n    this.props.history.push('/' + this.props.username)\r\n  }\r\n\r\n  toFollowers = () => {\r\n    this.props.history.push('/' + this.props.username + \"/followers\" )\r\n  }\r\n\r\n  toFollowing = () => {\r\n    this.props.history.push(\"/\" + this.props.username + '/following')\r\n  }\r\n\r\n  toRequests = () => {\r\n    this.props.history.push(\"/\" + this.props.username + '/requests')\r\n  }\r\n\r\n  toSetting = () => {\r\n    this.props.history.push(\"/\" + this.props.username + '/settings')\r\n  }\r\n\r\n  handleDrawerClose = () => {\r\n    this.setState({open: false})\r\n  }\r\n\r\n  handleDrawerOpen = () => {\r\n    this.setState({open: true})\r\n  }\r\n  toPlaylists = () => {\r\n    console.log(\"To playlists\")\r\n    this.props.history.push(\"/\" + this.props.username)\r\n    // this.handleMenuClose()\r\n  }\r\n\r\n  toFollowers = () => {\r\n    console.log(\"To followers \")\r\n    this.props.history.push(\"/\" + this.props.username + \"/followers\")\r\n    // this.handleMenuClose()\r\n  }\r\n\r\n  toSettings = () => {\r\n    console.log(\"To Settings\")\r\n    this.props.history.push(\"/\" + this.props.username + \"/settings\")\r\n    // this.handleMenuClose()\r\n  }\r\n\r\n  toLogOut = () => {\r\n    console.log(\"Log Out\")\r\n    localStorage.removeItem(\"username\")\r\n    this.props.onUsernameChange(\"\")\r\n    this.props.history.push(\"/\")\r\n    // this.handleMenuClose()\r\n  }\r\n  render() { \r\n    const {classes} = this.props\r\n    return (  \r\n      <>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\" \r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: this.state.open,\r\n        })}\r\n      >\r\n        <HeaderNavbar username= {this.props.username} onUsernameChange = {this.props.onUsernameChange} handleDrawerOpen = {this.handleDrawerOpen} open = {this.state.open} history = {this.props.history}/> \r\n      \r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: this.state.open,\r\n          [classes.drawerClose]: !this.state.open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: this.state.open,\r\n            [classes.drawerClose]: !this.state.open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <IconButton onClick={this.handleDrawerClose}  className = {classes.icon}>\r\n            {this.state.open ?\r\n                <ChevronLeftIcon /> :\r\n                <ChevronRightIcon /> \r\n            }\r\n           \r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n            <ListItem button key={\"Playlists\"} onClick = {this.toPlaylists}>\r\n              <ListItemIcon> <SubscriptionsIcon/></ListItemIcon>\r\n              <ListItemText primary={\"Playlists\"} />\r\n            </ListItem>\r\n\r\n            <ListItem button key={\"Followers\"} onClick = {this.toFollowers}>\r\n              <ListItemIcon><GroupIcon/></ListItemIcon>\r\n              <ListItemText primary={\"Followers\"} />\r\n            </ListItem>\r\n\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          <ListItem button key={\"Settings\"} onClick = {this.toSettings}>\r\n            <ListItemIcon> <SettingsIcon/></ListItemIcon>\r\n            <ListItemText primary={\"Settings\"} />\r\n          </ListItem>\r\n          <ListItem button key={\"Log Out\"} onClick = {this.toLogOut}>\r\n            <ListItemIcon> <ExitToAppIcon/></ListItemIcon>\r\n            <ListItemText primary={\"Log Out\"} />\r\n          </ListItem>\r\n\r\n        </List>\r\n      </Drawer>\r\n\r\n      <AppBar \r\n        position = \"fixed\" \r\n        className={clsx(classes.bottomAppBar, {\r\n          [classes.appBarShift]: this.state.open,\r\n        })}\r\n      >\r\n        <PlaylistNavbar \r\n                            username= {this.props.username} \r\n                              play = {this.props.play} \r\n                              onPlayChange = {this.props.onPlayChange} \r\n                              onPlaylistChange = {this.props.onPlaylistChange}\r\n                              onSongChange = {this.props.onSongChange}\r\n                              onShuffleChange = {this.props.onShuffleChange}\r\n                              playlist = {this.props.playlist}\r\n                              current_song = {this.props.current_song}\r\n                              access_token = {this.props.access_token}\r\n                              offset = {this.props.offset}\r\n                              shuffle= {this.props.shuffle}\r\n                              shufflePlaylist = {this.props.shufflePlaylist}\r\n                              needsUpdate = {this.props.needsUpdate}\r\n                              updated = {this.props.updated}\r\n\r\n        />   \r\n      </AppBar>\r\n      \r\n      </>\r\n    );\r\n  }\r\n}\r\n \r\nexport default withStyles(useStyles)(Menu);","\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter, Switch, Route,} from 'react-router-dom';\r\nimport './App.css';\r\n\r\nimport LoginScreen from './components/login_screen/LoginScreen.js';\r\nimport ResetPasswordScreen from './components/reset_password_screen/ResetPasswordScreen.js'\r\nimport Profile from './components/Profile/Profile'\r\nimport Playlist from './components/Playlist/Playlist'\r\nimport Home from \"./components/HomePage/Home\";\r\nimport HomeScreen from \"./components/home_screen/HomeScreen\"\r\nimport SearchScreen from \"./components/search_screen/SearchScreen.js\"\r\nimport FollowingPage from './components/Following/FollowingPage'\r\nimport Setting from './components/Setting/Setting'\r\nimport HeaderNavbar from './components/HeaderNavbar/HeaderNavbar'\r\nimport PlaylistNavbar from './components/PlaylistNavbar/PlaylistNavbar'\r\nimport Menu from './components/Menu/Menu'\r\nimport { withStyles } from '@material-ui/core/styles';\r\n// import Navbar from './components/Navbar/Navbar'\r\n\r\n\r\nconst useStyles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n})\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      username: localStorage.getItem(\"username\"),\r\n      results: null,\r\n      play: false,\r\n      current_playlist: null,\r\n      current_song: null,\r\n      access_token: null,\r\n      uris: [],\r\n      offset: 0,\r\n      shuffle: false,\r\n      needsUpdate: true\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    this.getAccesstoken()    \r\n  }\r\n\r\n  getAccesstoken = async () => {\r\n    return await fetch('http://localhost:5000/access-token', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                    'content-type': 'application/json'\r\n                    }})\r\n                .then(res => {\r\n                    if (res.status !== 200 && res.status !== 201) \r\n                        throw new Error('Failed');\r\n                    return res.json()\r\n                })\r\n                .then(result => {\r\n                  this.setState({access_token : result})\r\n\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n  }\r\n\r\n  onPlayChange = (play) => {\r\n    this.setState({play: play}, function() {console.log(this.state)})\r\n  }\r\n\r\n  updated = () => {\r\n    this.setState({needsUpdate: false})\r\n  }\r\n  onSongChange = (song_id) => {\r\n    let s = null\r\n    let offset = 0\r\n    this.state.current_playlist.songs.forEach((song,i) => {\r\n      if (song.song_id === song_id){\r\n        s = song\r\n        offset = i\r\n      }\r\n         \r\n    })\r\n    console.log(\"SONG CHANGE APP.JS\")\r\n    // if (!this.state.play || !this.state.playlist)\r\n    //   this.setState({current_song: s, play: true, offset:offset, needsUpdate: true}, function() {console.log(this.state)})\r\n    // else \r\n      this.setState({current_song: s, play: true, offset:offset, needsUpdate: false}, function() {console.log(this.state)})\r\n  }\r\n\r\n  shufflePlaylist = (uris, playlist) => {\r\n    var currentIndex = uris.length, temporaryValue, randomIndex;\r\n    let song = null\r\n\r\n      while (currentIndex > 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        temporaryValue = uris[currentIndex];\r\n        uris[currentIndex] = uris[randomIndex];\r\n        uris[randomIndex] = temporaryValue;\r\n      }\r\n      console.log(uris[0])\r\n      playlist.songs.forEach(s => {\r\n        console.log(s.song_uri)\r\n        if (s.song_uri === uris[0])\r\n          song = s\r\n      })\r\n    console.log([uris, song])\r\n    return [uris, song]\r\n  }\r\n\r\n  onPlaylistChange = (playlist, song) => {\r\n    let uris = []\r\n    let result = [uris]\r\n    let offset = 0\r\n    if (playlist){\r\n      uris = playlist.songs.map((song,i) => {\r\n        if (song.song_uri === song.song_uri)  \r\n          offset = i\r\n        return song.song_uri\r\n      })\r\n      result[0] = uris\r\n\r\n    if (this.state.shuffle){\r\n      result = this.shufflePlaylist(uris, playlist)\r\n    }\r\n\r\n  }\r\n  console.log(\"PLAYLIST CHANGE APP.JS\")\r\n  result.push(playlist.songs[offset])\r\n    if (!this.state.play || !this.state.playlist)\r\n      this.setState({current_playlist : playlist, play : true, uris: result[0], current_song: result[1], offset: offset, needsUpdate:true}, function() {console.log(this.state)})\r\n    else \r\n      this.setState({current_playlist : playlist, play : true, uris: result[0], current_song: result[1], offset: offset, needsUpdate:false}, function() {console.log(this.state)})\r\n  }\r\n\r\n  onShuffleChange = () => {\r\n    let uris = this.state.uris \r\n    if (this.state.shuffle){\r\n      uris = this.state.current_playlist.songs.map (song => {return song.song_uri})\r\n    }\r\n    this.setState({shuffle: !this.state.shuffle, uris: uris})\r\n  }\r\n\r\n  onUsernameChange = (username) => {\r\n    this.setState({username: username})\r\n  }\r\n\r\n  onSearchResults = (results) => {\r\n    this.setState({results: results})\r\n  }\r\n\r\n  atHome = () => {\r\n    this.setState({atHome : true})\r\n  }\r\n\r\n  notAtHome = () => {\r\n    this.setState({atHome : false})\r\n  }\r\n\r\n\r\n  \r\n  render() {\r\n    const {classes} = this.props\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"App\"> \r\n        <div className={this.state.username ? classes.root : null}>\r\n            {this.state.username ? \r\n            <Route render = {(props) => \r\n              <Menu {...props} \r\n                username = {this.state.username} \r\n                onUsernameChange = {this.onUsernameChange}\r\n                play = {this.state.play} \r\n                onPlayChange = {this.onPlayChange} \r\n                onPlaylistChange = {this.onPlaylistChange}\r\n                onSongChange = {this.onSongChange}\r\n                onShuffleChange = {this.onShuffleChange}\r\n                playlist = {this.state.uris}\r\n                current_song = {this.state.current_song}\r\n                access_token = {this.state.access_token}\r\n                offset = {this.state.offset}\r\n                shuffle= {this.state.shuffle}\r\n                shufflePlaylist = {this.shufflePlaylist}\r\n                needsUpdate = {this.state.needsUpdate}\r\n                pdated = {this.updated}\r\n              />\r\n              // <HeaderNavbar {...props} username= {this.state.username} onUsernameChange = {this.onUsernameChange}/> \r\n            }/>\r\n            :  null}\r\n\r\n            \r\n\r\n            <Switch>\r\n              <Route exact path='/' \r\n                render = {(props) => (\r\n                  <Home {...props} username = {this.state.username} />\r\n                )}\r\n                /> \r\n              {/* <Route exact path='/' component = {Home}/> */}\r\n\r\n              <Route exact path='/login' \r\n                render = {(props) => (\r\n                  <LoginScreen {...props} username = {this.state.username} login = {true} onUsernameChange={this.onUsernameChange} />\r\n                )}\r\n                /> \r\n\r\n              <Route exact path='/register' \r\n                render = {(props) => (\r\n                  <LoginScreen {...props} username = {this.state.username} login = {false} onUsernameChange={this.onUsernameChange} />\r\n                )}\r\n              />\r\n\r\n              <Route exact path='/forgotpassword' component={ResetPasswordScreen}/>\r\n\r\n              <Route exact path='/home' \r\n                render = {(props) => (\r\n                  <HomeScreen {...props} \r\n                    username = {this.state.username} \r\n                    access_token = {this.state.access_token}\r\n                    current_playlist = {this.state.current_playlist}\r\n                    current_song = {this.state.current_song}/>\r\n                )}\r\n              />\r\n\r\n              <Route exact path='/searchq=:query/type=:type' \r\n                render = {(props) => (\r\n                <SearchScreen {...props} username = {this.state.username} results = {this.state.results}/> \r\n              )}/>\r\n\r\n              <Route exact path='/:username/followers' \r\n                render = {(props => (\r\n                  <FollowingPage {...props} username = {this.state.username} state = \"followers\"/>\r\n                ))}\r\n              />\r\n\r\n              <Route exact path='/:username/following' \r\n                render = {(props => (\r\n                  <FollowingPage {...props} username = {this.state.username} state = \"following\" />\r\n                ))}\r\n              />\r\n\r\n              <Route exact path='/:username/requests' \r\n                render = {(props => (\r\n                  <FollowingPage {...props} username = {this.state.username} state = \"requests\" />\r\n                ))}\r\n              />\r\n\r\n              <Route exact path='/:username/playlist=:playlistid'\r\n                render = {(props) => (\r\n                  <Playlist {...props} \r\n                    username = {this.state.username}\r\n                    play = {this.state.play}\r\n                    onPlayChange = {this.onPlayChange}\r\n                    onPlaylistChange = {this.onPlaylistChange}\r\n                    onSongChange = {this.onSongChange}\r\n                    current_playlist = {this.state.current_playlist}\r\n                    current_song = {this.state.current_song}\r\n                    shuffle= {this.shuffle}\r\n                  />\r\n                )}\r\n              /> \r\n\r\n              <Route exact path='/:username/settings'\r\n                render = {(props) => (\r\n                  <Setting {...props} username = {this.state.username} onUsernameChange = {this.onUsernameChange}/>\r\n                )}\r\n              />\r\n\r\n              <Route exact path='/:username'\r\n                render = {(props) => (\r\n                  <Profile {...props} \r\n                  username = {this.state.username} \r\n                  play = {this.state.play} \r\n                  onPlayChange = {this.onPlayChange} \r\n                  onPlaylistChange = {this.onPlaylistChange}\r\n                  current_playlist = {this.state.current_playlist}\r\n                  shuffle= {this.shuffle}\r\n                />\r\n                  // <Profile {...props} \r\n                  //   username = {this.state.username} \r\n                  //   play = {this.state.play} \r\n                  //   onPlayChange = {this.onPlayChange} \r\n                  //   onPlaylistChange = {this.onPlaylistChange}\r\n                  //   current_playlist = {this.state.current_playlist}\r\n                  //   shuffle= {this.shuffle}\r\n                  // />\r\n                )}\r\n              />\r\n              \r\n              \r\n              {/* <Route path='/:userid/following' component={Following}/> */}\r\n              \r\n              {/* <Route path='/:any' component={HomeScreen} /> */}\r\n            </Switch>\r\n            {/* {this.state.username ? \r\n            <>\r\n            \r\n              <Route render = {(props) => \r\n                <PlaylistNavbar {...props} \r\n                            username= {this.state.username} \r\n                              play = {this.state.play} \r\n                              onPlayChange = {this.onPlayChange} \r\n                              onPlaylistChange = {this.onPlaylistChange}\r\n                              onSongChange = {this.onSongChange}\r\n                              onShuffleChange = {this.onShuffleChange}\r\n                              playlist = {this.state.uris}\r\n                              current_song = {this.state.current_song}\r\n                              access_token = {this.state.access_token}\r\n                              offset = {this.state.offset}\r\n                              shuffle= {this.state.shuffle}\r\n                              shufflePlaylist = {this.shufflePlaylist}\r\n                              needsUpdate = {this.state.needsUpdate}\r\n                              updated = {this.updated}\r\n\r\n                />   \r\n              \r\n              }/>\r\n              </>\r\n          :  null} */}\r\n\r\n          </div>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(App)","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>, \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}